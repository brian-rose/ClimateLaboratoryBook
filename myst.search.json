{"version":"1","records":[{"hierarchy":{"lvl1":"Assignments"},"type":"lvl1","url":"/about-assignments","position":0},{"hierarchy":{"lvl1":"Assignments"},"content":"","type":"content","url":"/about-assignments","position":1},{"hierarchy":{"lvl1":"Assignments","lvl2":"About the assignments"},"type":"lvl2","url":"/about-assignments#about-the-assignments","position":2},{"hierarchy":{"lvl1":"Assignments","lvl2":"About the assignments"},"content":"The notebooks in this section offer a variety of homework assignments\nsuitable for upper-level undergraduate.\n\nRequired homework assignments in my classes will be drawn from this material.\nSpecific assignments and due dates will usually be posted on class web pages.","type":"content","url":"/about-assignments#about-the-assignments","position":3},{"hierarchy":{"lvl1":"How to cite and reuse this material"},"type":"lvl1","url":"/attribution","position":0},{"hierarchy":{"lvl1":"How to cite and reuse this material"},"content":"The material is licensed for permissive re-use under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0)\nlicense. This means you are free to share and adapt this material under the condition that\nyou give appropriate credit to the original author (Brian E. J. Rose).\n\nEvery release of the \n\nsource code repository\nis archived with a DOI:\n\n\n\n\nYou can use this DOI to cite anything in the source code\n(including code and calculations in the notebooks that comprise each chapter).\n\nAlternatively, you can cite the text of individual chapters by linking directly to the URL with a date of access,\nfor example\n\nRose, Brian E. J. (2025, August 22). Insolation, The Climate Laboratory, \n\nhttps://​brian​-rose​.github​.io​/ClimateLaboratoryBook​/courseware​/insolation​.html","type":"content","url":"/attribution","position":1},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM"},"type":"lvl1","url":"/courseware/advanced-albedo-feedback","position":0},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\nNote\n\nThese notes and the companion \n\nAdvanced topic: Snowball Earth and Large Ice Cap Instability in the EBM extend the material in the \n\nIce-albedo feedback and Snowball Earth in the EBM notes.\n\n","type":"content","url":"/courseware/advanced-albedo-feedback","position":1},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"1. Interactive snow and ice line in the EBM"},"type":"lvl2","url":"/courseware/advanced-albedo-feedback#id-1-interactive-snow-and-ice-line-in-the-ebm","position":2},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"1. Interactive snow and ice line in the EBM"},"content":"\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#id-1-interactive-snow-and-ice-line-in-the-ebm","position":3},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"The annual mean EBM","lvl2":"1. Interactive snow and ice line in the EBM"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#the-annual-mean-ebm","position":4},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"The annual mean EBM","lvl2":"1. Interactive snow and ice line in the EBM"},"content":"The equation is\\begin{align*}\nC(\\phi) \\frac{\\partial T_s}{\\partial t} = & ~(1-\\alpha) ~ Q - \\left( A + B~T_s \\right) +  \\\\\n& \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(\\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\\end{align*}\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#the-annual-mean-ebm","position":5},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Temperature-dependent ice line parameterization","lvl2":"1. Interactive snow and ice line in the EBM"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#temperature-dependent-ice-line-parameterization","position":6},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Temperature-dependent ice line parameterization","lvl2":"1. Interactive snow and ice line in the EBM"},"content":"Let the surface albedo be larger wherever the temperature is below some threshold T_f:\\alpha\\left(\\phi, T(\\phi) \\right) = \\left\\{\\begin{array}{ccc} \n\\alpha_0 + \\alpha_2 P_2(\\sin\\phi) & ~ & T(\\phi) > T_f \\\\\na_i & ~ & T(\\phi) \\le T_f \\\\\n\\end{array} \\right.\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#temperature-dependent-ice-line-parameterization","position":7},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Adding the interactive ice line to the EBM in climlab","lvl2":"1. Interactive snow and ice line in the EBM"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#adding-the-interactive-ice-line-to-the-ebm-in-climlab","position":8},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Adding the interactive ice line to the EBM in climlab","lvl2":"1. Interactive snow and ice line in the EBM"},"content":"\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport climlab\n\n#  for convenience, set up a dictionary with our reference parameters\nparam = {'A':210, 'B':2, 'a0':0.3, 'a2':0.078, 'ai':0.62, 'Tf':-10.}\nmodel1 = climlab.EBM_annual(name='Annual EBM with ice line', \n                            num_lat=180, D=0.55, **param )\nprint( model1)\n\nBecause we provided a parameter ai for the icy albedo, our model now contains several sub-processes contained within the process called albedo. Together these implement the step-function formula above.\n\nThe process called iceline simply looks for grid cells with temperature below T_f.\n\nprint(model1.param)\n\ndef ebm_plot( model, figsize=(8,12), show=True ):\n    '''This function makes a plot of the current state of the model,\n    including temperature, energy budget, and heat transport.'''\n    templimits = -30,35\n    radlimits = -340, 340\n    htlimits = -7,7\n    latlimits = -90,90\n    lat_ticks = np.arange(-90,90,30)\n    \n    fig = plt.figure(figsize=figsize)\n    \n    ax1 = fig.add_subplot(3,1,1)\n    ax1.plot(model.lat, model.Ts)\n    ax1.set_xlim(latlimits)\n    ax1.set_ylim(templimits)\n    ax1.set_ylabel('Temperature (°C)')\n    ax1.set_xticks( lat_ticks )\n    ax1.grid()\n    \n    ax2 = fig.add_subplot(3,1,2)\n    ax2.plot(model.lat, model.ASR, 'k--', label='SW' )\n    ax2.plot(model.lat, -model.OLR, 'r--', label='LW' )\n    ax2.plot(model.lat, model.net_radiation, 'c-', label='net rad' )\n    ax2.plot(model.lat, model.heat_transport_convergence, 'g--', label='dyn' )\n    ax2.plot(model.lat, model.net_radiation\n                        + model.heat_transport_convergence, 'b-', label='total' )\n    ax2.set_xlim(latlimits)\n    ax2.set_ylim(radlimits)\n    ax2.set_ylabel('Energy budget (W m$^{-2}$)')\n    ax2.set_xticks( lat_ticks )\n    ax2.grid()\n    ax2.legend()\n    \n    ax3 = fig.add_subplot(3,1,3)\n    ax3.plot(model.lat_bounds, model.heat_transport)\n    ax3.set_xlim(latlimits)\n    ax3.set_ylim(htlimits)\n    ax3.set_ylabel('Heat transport (PW)')\n    ax3.set_xlabel('Latitude')\n    ax3.set_xticks( lat_ticks )\n    ax3.grid()\n\n    return fig\n\nmodel1.integrate_years(5)\nf = ebm_plot(model1)\n\nmodel1.icelat\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#adding-the-interactive-ice-line-to-the-ebm-in-climlab","position":9},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"2. Polar-amplified warming in the EBM"},"type":"lvl2","url":"/courseware/advanced-albedo-feedback#id-2-polar-amplified-warming-in-the-ebm","position":10},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"2. Polar-amplified warming in the EBM"},"content":"\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#id-2-polar-amplified-warming-in-the-ebm","position":11},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Add a small radiative forcing","lvl2":"2. Polar-amplified warming in the EBM"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#add-a-small-radiative-forcing","position":12},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Add a small radiative forcing","lvl2":"2. Polar-amplified warming in the EBM"},"content":"The equivalent of doubling CO_2 in this model is something likeA \\rightarrow A - \\delta A\n\nwhere \\delta A = 4 W m^{-2}.\n\ndeltaA = 4.\n\nmodel2 = climlab.process_like(model1)\nmodel2.subprocess['LW'].A = param['A'] - deltaA\nmodel2.integrate_years(5, verbose=False)\n\nplt.plot(model1.lat, model1.Ts)\nplt.plot(model2.lat, model2.Ts)\n\nThe warming is polar-amplified:  more warming at the poles than elsewhere.\n\nWhy?\n\nAlso, the current ice line is now:\n\nmodel2.icelat\n\nThere is no ice left!\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#add-a-small-radiative-forcing","position":13},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Effects of further radiative forcing in the ice-free regime","lvl2":"2. Polar-amplified warming in the EBM"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#effects-of-further-radiative-forcing-in-the-ice-free-regime","position":14},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Effects of further radiative forcing in the ice-free regime","lvl2":"2. Polar-amplified warming in the EBM"},"content":"Let’s do some more greenhouse warming:\n\nmodel3 = climlab.process_like(model1)\nmodel3.subprocess['LW'].A = param['A'] - 2*deltaA\nmodel3.integrate_years(5, verbose=False)\n\nplt.plot(model1.lat, model1.Ts)\nplt.plot(model2.lat, model2.Ts)\nplt.plot(model3.lat, model3.Ts)\nplt.xlim(-90, 90)\nplt.grid()\n\nIn the ice-free regime, there is no polar-amplified warming. A uniform radiative forcing produces a uniform warming.\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#effects-of-further-radiative-forcing-in-the-ice-free-regime","position":15},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"type":"lvl2","url":"/courseware/advanced-albedo-feedback#id-3-effects-of-diffusivity-in-the-annual-mean-ebm-with-albedo-feedback","position":16},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"content":"\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#id-3-effects-of-diffusivity-in-the-annual-mean-ebm-with-albedo-feedback","position":17},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"In-class investigation: Effects of diffusivity with albedo feedback","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#in-class-investigation-effects-of-diffusivity-with-albedo-feedback","position":18},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"In-class investigation: Effects of diffusivity with albedo feedback","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"content":"We will repeat the diffusivity-tuning exercise from the \n\nnotes on the 1D EBM, but this time with albedo feedback included in our model.\n\nSolve the annual-mean EBM (integrate out to equilibrium) over a range of different diffusivity parameters.\n\nMake three plots:\n\nGlobal-mean temperature as a function of D\n\nEquator-to-pole temperature difference \\Delta T as a function of D\n\nPoleward heat transport across 35 degrees \\mathcal{H}_{max} as a function of D\n\nChoose a value of D that gives a reasonable approximation to observations:\n\n\\Delta T \\approx 45 ºC\n\nUse these parameter values:\n\nparam = {'A':210, 'B':2, 'a0':0.3, 'a2':0.078, 'ai':0.62, 'Tf':-10.}\nprint( param)\n\n\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#in-class-investigation-effects-of-diffusivity-with-albedo-feedback","position":19},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"One possible way to do this:","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#one-possible-way-to-do-this","position":20},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"One possible way to do this:","lvl2":"3. Effects of diffusivity in the annual mean EBM with albedo feedback"},"content":"\n\nDarray = np.arange(0., 2.05, 0.05)\n\nmodel_list = []\nTmean_list = []\ndeltaT_list = []\nHmax_list = []\nfor D in Darray:\n    ebm = climlab.EBM_annual(num_lat=360, D=D, **param )\n    ebm.integrate_years(5., verbose=False)\n    Tmean = ebm.global_mean_temperature()\n    deltaT = np.max(ebm.Ts) - np.min(ebm.Ts)\n    HT = np.squeeze(ebm.heat_transport)\n    ind = np.where(ebm.lat_bounds==35.5)[0]\n    Hmax = HT[ind]\n    model_list.append(ebm)\n    Tmean_list.append(Tmean)\n    deltaT_list.append(deltaT)\n    Hmax_list.append(Hmax)\n\ncolor1 = 'b'\ncolor2 = 'r'\n\nfig = plt.figure(figsize=(8,6))\nax1 = fig.add_subplot(111)\nax1.plot(Darray, deltaT_list, color=color1, label=r'$\\Delta T$')\nax1.plot(Darray, Tmean_list, '--', color=color1, label=r'$\\overline{T}$')\nax1.set_xlabel('D (W m$^{-2}$ °C$^{-1}$)', fontsize=14)\nax1.set_xticks(np.arange(Darray[0], Darray[-1], 0.2))\nax1.set_ylabel(r'Temperature (°C)', fontsize=14,  color=color1)\nfor tl in ax1.get_yticklabels():\n    tl.set_color(color1)\nax1.legend(loc='center right')\nax2 = ax1.twinx()\nax2.plot(Darray, Hmax_list, color=color2)\nax2.set_ylabel('Poleward heat transport across 35.5° (PW)', fontsize=14, color=color2)\nfor tl in ax2.get_yticklabels():\n    tl.set_color(color2)\nax1.set_title('Effect of diffusivity on EBM with albedo feedback', fontsize=16)\nax1.grid()\n\nDiscuss!\n\nThe heat transport is no longer stricly monotonic in diffusivity D. The kink in the graph results from competing effects of increased transport efficiency and decreased temperature gradients due to ice loss.\n\nRealistic present-day conditions seem to occur right near the local maximum of the \\mathcal{H}_{max} graph, showing that total heat transport is relatively insensitive to details of the atmosphere-ocean dynamics.\n\nThis actually reproduces a result from a classic paper by \n\nStone (1978).\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#one-possible-way-to-do-this","position":21},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"4. Diffusive response to a point source of energy"},"type":"lvl2","url":"/courseware/advanced-albedo-feedback#id-4-diffusive-response-to-a-point-source-of-energy","position":22},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"4. Diffusive response to a point source of energy"},"content":"\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#id-4-diffusive-response-to-a-point-source-of-energy","position":23},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Step 1: Adding a point heat source to the EBM without albedo feedback","lvl2":"4. Diffusive response to a point source of energy"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#step-1-adding-a-point-heat-source-to-the-ebm-without-albedo-feedback","position":24},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Step 1: Adding a point heat source to the EBM without albedo feedback","lvl2":"4. Diffusive response to a point source of energy"},"content":"Let’s add a point heat source to the EBM and see what sets the spatial structure of the response.\n\nWe will add a heat source at about 45º latitude.\n\nFirst, we will calculate the response in a model without albedo feedback.\n\nparam_noalb = {'A': 210, 'B': 2, 'D': 0.55, 'Tf': -10.0, 'a0': 0.3, 'a2': 0.078}\nm1 = climlab.EBM_annual(num_lat=180, **param_noalb)\nprint(m1)\n\nm1.integrate_years(5.)\n\nm2 = climlab.process_like(m1)\n\npoint_source = climlab.process.energy_budget.ExternalEnergySource(state=m2.state, timestep=m2.timestep)\nind = np.where(m2.lat == 45.5)\npoint_source.heating_rate['Ts'][ind] = 100.\n\nm2.add_subprocess('point source', point_source)\nprint( m2)\n\nm2.integrate_years(5.)\n\nplt.plot(m2.lat, m2.Ts - m1.Ts)\nplt.xlim(-90,90)\nplt.xlabel('Latitude')\nplt.ylabel(r'$\\Delta T_s$')\nplt.grid()\n\nThe warming effects of our point source are felt at all latitudes but the effects decay away from the heat source.\n\nSome analysis will show that the length scale of the warming is proportional to\\sqrt{\\frac{D}{B}}\n\nso increases with the diffusivity.\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#step-1-adding-a-point-heat-source-to-the-ebm-without-albedo-feedback","position":25},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Step 2: Effects of point heat source with albedo feedback","lvl2":"4. Diffusive response to a point source of energy"},"type":"lvl3","url":"/courseware/advanced-albedo-feedback#step-2-effects-of-point-heat-source-with-albedo-feedback","position":26},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl3":"Step 2: Effects of point heat source with albedo feedback","lvl2":"4. Diffusive response to a point source of energy"},"content":"Now repeat this calculation with ice albedo feedback\n\nm3 = climlab.EBM_annual(num_lat=180, **param)\nm3.integrate_years(5.)\nm4 = climlab.process_like(m3)\npoint_source = climlab.process.energy_budget.ExternalEnergySource(state=m4.state, timestep=m4.timestep)\npoint_source.heating_rate['Ts'][ind] = 100.\nm4.add_subprocess('point source', point_source)\nm4.integrate_years(5.)\n\nplt.plot(m4.lat, m4.Ts - m3.Ts)\nplt.xlim(-90,90)\nplt.xlabel('Latitude')\nplt.ylabel(r'$\\Delta T_s$')\nplt.grid()\n\nNow the maximum warming does not coincide with the heat source at 45°!\n\nOur heat source has led to melting of snow and ice, which induces an additional heat source in the high northern latitudes.\n\nHeat transport communicates the external warming to the ice cap, and also communicates the increased shortwave absorption due to ice melt globally!\n\n","type":"content","url":"/courseware/advanced-albedo-feedback#step-2-effects-of-point-heat-source-with-albedo-feedback","position":27},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"Credits"},"type":"lvl2","url":"/courseware/advanced-albedo-feedback#credits","position":28},{"hierarchy":{"lvl1":"Advanced topic: Ice albedo feedback in the EBM","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/advanced-albedo-feedback#credits","position":29},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition"},"type":"lvl1","url":"/courseware/advanced-heat-transport","position":0},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\nNote\n\nThis notebook is an extension of the \n\nHeat transport notes containing some additional advanced material on the decomposition of total heat transport in components. The advanced notes are unfinished but may be useful.\n\n","type":"content","url":"/courseware/advanced-heat-transport","position":1},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"1. Spatial patterns of insolation and surface temperature"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-1-spatial-patterns-of-insolation-and-surface-temperature","position":2},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"1. Spatial patterns of insolation and surface temperature"},"content":"\n\nLet’s take a look at seasonal and spatial pattern of insolation and compare this to the zonal average surface temperatures.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport climlab\nfrom climlab import constants as const\n\n#  Calculate daily average insolation as function of latitude and time of year\nlat = np.linspace( -90., 90., 500 )\ndays = np.linspace(0, const.days_per_year, 365 )\nQ = climlab.solar.insolation.daily_insolation( lat, days )\n\n##  daily surface temperature from  NCEP reanalysis\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\nncep_temp = xr.open_dataset( ncep_url + \"surface_gauss/skt.sfc.day.1981-2010.ltm.nc\", decode_times=False)\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/'\n#skt_path = 'surface_gauss/skt'\n#ncep_temp = xr.open_dataset(url+skt_path)\nncep_temp_zon = ncep_temp.skt.mean(dim='lon')\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nCS = ax1.contour( days, lat, Q , levels = np.arange(0., 600., 50.) )\nax1.clabel(CS, CS.levels, inline=True, fmt='%1.0f', fontsize=10)\nax1.set_title('Daily average insolation', fontsize=18 )\nax1.contourf ( days, lat, Q, levels=[-100., 0.], colors='k' )\n\nax2 = fig.add_subplot(122)\nCS = ax2.contour( (ncep_temp.time - ncep_temp.time[0])/const.hours_per_day, ncep_temp.lat, \n                 ncep_temp_zon.T, levels=np.arange(210., 310., 10. ) )\nax2.clabel(CS, CS.levels, inline=True, fmt='%1.0f', fontsize=10)\nax2.set_title('Observed zonal average surface temperature', fontsize=18 )\n\nfor ax in [ax1,ax2]:\n    ax.set_xlabel('Days since January 1', fontsize=16 )\n    ax.set_ylabel('Latitude', fontsize=16 )\n    ax.set_yticks([-90,-60,-30,0,30,60,90])\n    ax.grid()\n\nThis figure reveals something fairly obvious, but still worth thinking about:\n\nWarm temperatures are correlated with high insolation. It’s warm where the sun shines.\n\nMore specifically, we can see a few interesting details here:\n\nThe seasonal cycle is weakest in the tropics and strongest in the high latitudes.\n\nThe warmest temperatures occur slighly NORTH of the equator\n\nThe highest insolation occurs at the poles at summer solstice.\n\nThe local surface temperature does not correlate perfectly with local insolation for two reasons:\n\nthe climate system has heat capacity, which buffers some of the seasonal variations\n\nthe climate system moves energy around in space!\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-1-spatial-patterns-of-insolation-and-surface-temperature","position":3},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-2-calculating-radiative-convective-equilibrium-as-a-function-of-latitude","position":4},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\nAs a first step to understanding the effects of heat transport by fluid motions in the atmosphere and ocean, we can calculate what the surface temperature would be without any motion.\n\nLet’s calculate a radiative-convective equilibrium state for every latitude band.\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-2-calculating-radiative-convective-equilibrium-as-a-function-of-latitude","position":5},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Putting realistic insolation into an RCM","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/advanced-heat-transport#putting-realistic-insolation-into-an-rcm","position":6},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Putting realistic insolation into an RCM","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"This code demonstrates how to create a model with both latitude and vertical dimensions.\n\n# A two-dimensional domain\nstate = climlab.column_state(num_lev=30, num_lat=40, water_depth=10.)\n#  Specified relative humidity distribution\nh2o = climlab.radiation.ManabeWaterVapor(name='Fixed Relative Humidity', state=state)\n#  Hard convective adjustment\nconv = climlab.convection.ConvectiveAdjustment(name='Convective Adjustment', state=state, adj_lapse_rate=6.5)\n#  Daily insolation as a function of latitude and time of year\nsun = climlab.radiation.DailyInsolation(name='Insolation', domains=state['Ts'].domain)\n#  Couple the radiation to insolation and water vapor processes\nrad = climlab.radiation.RRTMG(name='Radiation',\n                             state=state, \n                             specific_humidity=h2o.q, \n                             albedo=0.125,\n                             irradiance_factor=sun.irradiance_factor,\n                             coszen=sun.coszen)\nmodel = climlab.couple([rad,sun,h2o,conv], name='RCM')\nprint( model)\n\nmodel.compute_diagnostics()\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.insolation)\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)');\n\nThis new insolation process uses the same code we’ve already been working with to compute realistic distributions of insolation. Here we are usingclimlab.radiation.DailyInsolation\n\nbut there is alsoclimlab.radiation.AnnualMeanInsolation\n\nfor models in which you prefer to suppress the seasonal cycle and prescribe a time-invariant insolation.\n\nThe following code will just integrate the model forward in four steps in order to get snapshots of insolation at the solstices and equinoxes.\n\n#  model is initialized on Jan. 1\n\n#  integrate forward just under 1/4 year... should get about to the NH spring equinox\nmodel.integrate_days(31+28+22)\nQ_spring = model.insolation.copy()\n#  Then forward to NH summer solstice\nmodel.integrate_days(31+30+31)\nQ_summer = model.insolation.copy()\n#  and on to autumnal equinox\nmodel.integrate_days(30+31+33)\nQ_fall = model.insolation.copy()\n#  and finally to NH winter solstice\nmodel.integrate_days(30+31+30)\nQ_winter = model.insolation.copy()\n\nfig, ax = plt.subplots()\nax.plot(model.lat, Q_spring, label='Spring')\nax.plot(model.lat, Q_summer, label='Summer')\nax.plot(model.lat, Q_fall, label='Fall')\nax.plot(model.lat, Q_winter, label='Winter')\nax.legend()\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)');\n\nThis just serves to demonstrate that the DailyInsolation process is doing something sensible.\n\nNote that we could also pass different orbital parameters to this subprocess. They default to present-day values, which is what we are using here.\n\n","type":"content","url":"/courseware/advanced-heat-transport#putting-realistic-insolation-into-an-rcm","position":7},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Find the steady seasonal cycle of temperature in radiative-convective equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/advanced-heat-transport#find-the-steady-seasonal-cycle-of-temperature-in-radiative-convective-equilibrium","position":8},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Find the steady seasonal cycle of temperature in radiative-convective equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\nmodel.integrate_years(4.)\n\nmodel.integrate_years(1.)\n\nAll climlab Process objects have an attribute called timeave.\n\nThis is a dictionary of time-averaged diagnostics, which are automatically calculated during the most recent call to integrate_years() or integrate_days().\n\nmodel.timeave.keys()\n\nHere we use the timeave['insolation'] to plot the annual mean insolation.\n\n(We know it is the annual average because the last call to model.integrate_years was for exactly 1 year)\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['insolation'])\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)')\n\n","type":"content","url":"/courseware/advanced-heat-transport#find-the-steady-seasonal-cycle-of-temperature-in-radiative-convective-equilibrium","position":9},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Compare annual average temperature in RCE to the zonal-, annual mean observations.","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/advanced-heat-transport#compare-annual-average-temperature-in-rce-to-the-zonal-annual-mean-observations","position":10},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Compare annual average temperature in RCE to the zonal-, annual mean observations.","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\n# Plot annual mean surface temperature in the model,\n#   compare to observed annual mean surface temperatures\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['Ts'], label='RCE')\nax.plot(ncep_temp_zon.lat, ncep_temp_zon.mean(dim='time'), label='obs')\nax.set_xticks(range(-90,100,30))\nax.grid(); ax.legend();\nax.set_xlabel('Latitude')\nax.set_ylabel('Temperature (K)')\n\nOur modeled RCE state is far too warm in the tropics, and too cold in the mid- to high latitudes.\n\n","type":"content","url":"/courseware/advanced-heat-transport#compare-annual-average-temperature-in-rce-to-the-zonal-annual-mean-observations","position":11},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Vertical structure of temperature: comparing RCE to observations","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/advanced-heat-transport#vertical-structure-of-temperature-comparing-rce-to-observations","position":12},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Vertical structure of temperature: comparing RCE to observations","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\n#  Observed air temperature from NCEP reanalysis\n## The NOAA ESRL server is shutdown! January 2019\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", decode_times=False)\n#air = xr.open_dataset(url+'pressure/air')\n#ncep_air = air.rename({'lev':'level'})\nlevel_ncep_air = ncep_air.level\nlat_ncep_air = ncep_air.lat\nTzon = ncep_air.air.mean(dim=('time','lon'))\n\n#  Compare temperature profiles in RCE and observations\ncontours = np.arange(180., 350., 15.)\n\nfig = plt.figure(figsize=(14,6))\nax1 = fig.add_subplot(1,2,1)\ncax1 = ax1.contourf(lat_ncep_air, level_ncep_air, Tzon+const.tempCtoK, levels=contours)\nfig.colorbar(cax1)\nax1.set_title('Observered temperature (K)')\n\nax2 = fig.add_subplot(1,2,2)\nfield = model.timeave['Tatm'].transpose()\ncax2 = ax2.contourf(model.lat, model.lev, field, levels=contours)\nfig.colorbar(cax2)\nax2.set_title('RCE temperature (K)')\n\nfor ax in [ax1, ax2]:\n    ax.invert_yaxis()\n    ax.set_xlim(-90,90)\n    ax.set_xticks([-90, -60, -30, 0, 30, 60, 90])\n    ax.set_xlabel('Latitude')\n    ax.set_ylabel('Pressure (hPa)')\n\nAgain, this plot reveals temperatures that are too warm in the tropics, too cold at the poles throughout the troposphere.\n\nNote however that the vertical temperature gradients are largely dictated by the convective adjustment in our model. We have parameterized this gradient, and so we can change it by changing our parameter for the adjustment.\n\nWe have (as yet) no parameterization for the horizontal redistribution of energy in the climate system.\n\n","type":"content","url":"/courseware/advanced-heat-transport#vertical-structure-of-temperature-comparing-rce-to-observations","position":13},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA energy budget in RCE equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/advanced-heat-transport#toa-energy-budget-in-rce-equilibrium","position":14},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA energy budget in RCE equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"Because there is no horizontal energy transport in this model, the TOA radiation budget should be closed (net flux is zero) at all latitudes.\n\nLet’s check this by plotting time-averaged shortwave and longwave radiation:\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['ASR'], label='ASR')\nax.plot(model.lat, model.timeave['OLR'], label='OLR')\nax.set_xlabel('Latitude')\nax.set_ylabel('W m$^{-2}$')\nax.legend(); ax.grid()\n\nIndeed, the budget is (very nearly) closed everywhere. Each latitude is in energy balance, independent of every other column.\n\n","type":"content","url":"/courseware/advanced-heat-transport#toa-energy-budget-in-rce-equilibrium","position":15},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-3-observed-and-modeled-toa-radiation-budget","position":16},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"\n\nWe are going to look at the (time average) TOA budget as a function of latitude to see how it differs from the RCE state we just plotted.\n\nIdeally we would look at actual satellite observations of SW and LW fluxes. Instead, here we will use the NCEP Reanalysis for convenience.\n\nBut bear in mind that the radiative fluxes in the reanalysis are a model-generated product, they are not really observations.\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-3-observed-and-modeled-toa-radiation-budget","position":17},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA budget from NCEP Reanalysis","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl3","url":"/courseware/advanced-heat-transport#toa-budget-from-ncep-reanalysis","position":18},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA budget from NCEP Reanalysis","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"\n\n# Get TOA radiative flux data from NCEP reanalysis\n# downwelling SW\ndswrf = xr.open_dataset(ncep_url + '/other_gauss/dswrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#dswrf = xr.open_dataset(url + 'other_gauss/dswrf')\n#  upwelling SW\nuswrf = xr.open_dataset(ncep_url + '/other_gauss/uswrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#uswrf = xr.open_dataset(url + 'other_gauss/uswrf')\n#  upwelling LW\nulwrf = xr.open_dataset(ncep_url + '/other_gauss/ulwrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#ulwrf = xr.open_dataset(url + 'other_gauss/ulwrf')\n\nASR = dswrf.dswrf - uswrf.uswrf\nOLR = ulwrf.ulwrf\n\nASRzon = ASR.mean(dim=('time','lon'))\nOLRzon = OLR.mean(dim=('time','lon'))\n\nticks = [-90, -60, -30, 0, 30, 60, 90]\nfig, ax = plt.subplots()\nax.plot(ASRzon.lat, ASRzon, label='ASR')\nax.plot(OLRzon.lat, OLRzon, label='OLR')\nax.set_ylabel('W m$^{-2}$')\nax.set_xlabel('Latitude')\nax.set_xlim(-90,90); ax.set_ylim(50,310)\nax.set_xticks(ticks);\nax.set_title('Observed annual mean radiation at TOA')\nax.legend(); ax.grid();\n\nWe find that ASR does NOT balance OLR in most locations.\n\nAcross the tropics the absorbed solar radiation exceeds the longwave emission to space.  The tropics have a net gain of energy by radiation.\n\nThe opposite is true in mid- to high latitudes: the Earth is losing energy by net radiation to space at these latitudes.\n\n","type":"content","url":"/courseware/advanced-heat-transport#toa-budget-from-ncep-reanalysis","position":19},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA budget from the control CESM simulation","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl3","url":"/courseware/advanced-heat-transport#toa-budget-from-the-control-cesm-simulation","position":20},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"TOA budget from the control CESM simulation","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"Load data from the fully coupled CESM control simulation that we’ve used before.\n\ncasenames = {'cpl_control': 'cpl_1850_f19',\n             'cpl_CO2ramp': 'cpl_CO2ramp_f19',\n             'som_control': 'som_1850_f19',\n             'som_2xCO2':   'som_1850_2xCO2',\n            }\n# The path to the THREDDS server, should work from anywhere\nbasepath = 'http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/'\n# For better performance if you can access the roselab_rit filesystem (e.g. from JupyterHub)\n#basepath = '/roselab_rit/cesm_archive/'\ncasepaths = {}\nfor name in casenames:\n    casepaths[name] = basepath + casenames[name] + '/concatenated/'\n\n# make a dictionary of all the CAM atmosphere output\natm = {}\nfor name in casenames:\n    path = casepaths[name] + casenames[name] + '.cam.h0.nc'\n    print('Attempting to open the dataset ', path)\n    atm[name] = xr.open_dataset(path)\n\nlat_cesm = atm['cpl_control'].lat\nASR_cesm = atm['cpl_control'].FSNT\nOLR_cesm = atm['cpl_control'].FLNT\n\n# extract the last 10 years from the slab ocean control simulation\n# and the last 20 years from the coupled control\nnyears_slab = 10\nnyears_cpl = 20\nclim_slice_slab = slice(-(nyears_slab*12),None)\nclim_slice_cpl = slice(-(nyears_cpl*12),None)\n\n#  For now we're just working with the coupled control simulation\n#  Take the time and zonal average\nASR_cesm_zon = ASR_cesm.isel(time=clim_slice_slab).mean(dim=('lon','time'))\nOLR_cesm_zon = OLR_cesm.isel(time=clim_slice_slab).mean(dim=('lon','time'))\n\nNow we can make the same plot of ASR and OLR that we made for the observations above.\n\nfig, ax = plt.subplots()\nax.plot(lat_cesm, ASR_cesm_zon, label='ASR')\nax.plot(lat_cesm, OLR_cesm_zon, label='OLR')\nax.set_ylabel('W m$^{-2}$')\nax.set_xlabel('Latitude')\nax.set_xlim(-90,90); ax.set_ylim(50,310)\nax.set_xticks(ticks);\nax.set_title('CESM control simulation: Annual mean radiation at TOA')\nax.legend(); ax.grid();\n\nEssentially the same story as the reanalysis data: there is a surplus of energy across the tropics and a net energy deficit in mid- to high latitudes.\n\nThere are two locations where ASR = OLR, near about 35º in both hemispheres.\n\n","type":"content","url":"/courseware/advanced-heat-transport#toa-budget-from-the-control-cesm-simulation","position":21},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"4. The energy budget for a zonal band"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-4-the-energy-budget-for-a-zonal-band","position":22},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"4. The energy budget for a zonal band"},"content":"\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-4-the-energy-budget-for-a-zonal-band","position":23},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"The basic idea","lvl2":"4. The energy budget for a zonal band"},"type":"lvl3","url":"/courseware/advanced-heat-transport#the-basic-idea","position":24},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"The basic idea","lvl2":"4. The energy budget for a zonal band"},"content":"Through most of the previous notes we have been thinking about global averages.\n\nWe’ve been working with an energy budget that looks something like this:\n\nWhen we start thinking about regional climates, we need to modify our budget to account for the additional heating or cooling due to transport in and out of the column:\n\nConceptually, the additional energy source is the difference between what’s coming in and what’s going out:h = \\mathcal{H}_{in}  - \\mathcal{H}_{out}\n\nwhere h is a dynamic heating rate in W m^{-2}.\n\n","type":"content","url":"/courseware/advanced-heat-transport#the-basic-idea","position":25},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"A more careful budget","lvl2":"4. The energy budget for a zonal band"},"type":"lvl3","url":"/courseware/advanced-heat-transport#a-more-careful-budget","position":26},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"A more careful budget","lvl2":"4. The energy budget for a zonal band"},"content":"Let’s now consider a thin band of the climate system, of width \\delta \\phi , and write down a careful energy budget for it.\n\n\n\nLet \\mathcal{H}(\\phi) be the total rate of northward energy transport across the latitude line \\phi, measured in Watts (usually PW).\n\nLet T(\\phi,t) be the zonal average surface temperature (“zonal average” = average around latitude circle).\n\nWe can write the energy budget as\\frac{\\partial E}{\\partial t} = \\text{energy in} - \\text{energy out}\n\nwhere E is the total energy content of the column, which is useful to write asE = \\int_{bottom}^{top} \\rho ~ e ~ dz\n\nand e is the local enthalpy of the fluid, in units of J kg^{-1}. The integral energy content E thus has units of J m^{-2}.\n\nWe have written the time tendency as a partial derivative now because E varies in both space and time.\n\nNow there are two energy sources and two energy sinks to think about:\nRadiation and dynamics (horizontal transport)\\frac{\\partial E}{\\partial t} = R_{TOA} - (\\text{transport out} - \\text{transport in})~/ ~\\text{area of band}\n\nwhere we define the net incoming radiation at the top of atmosphere asR_{TOA} = \\text{ASR} - \\text{OLR} = (1-\\alpha) Q - \\text{OLR}\n\nThe surface area of the latitude band isA = \\text{Circumference} ~\\times ~ \\text{north-south width}A = 2 \\pi a \\cos \\phi  ~ \\times ~  a \\delta \\phiA = 2 \\pi a^2  \\cos⁡\\phi ~ \\delta\\phi\n\nWe will denote the energy transport in and out of the band respectively as \\mathcal{H}(\\phi), \\mathcal{H}(\\phi + \\delta\\phi)\n\nThen the budget can be written\\frac{\\partial E}{\\partial t} = \\text{ASR} - \\text{OLR} - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi ~ \\delta\\phi} \\Big( \\mathcal{H}(\\phi + \\delta\\phi) - \\mathcal{H}(\\phi) \\Big)\n\nFor thin bands where \\delta\\phi is very small, we can write\\frac{1}{\\delta\\phi} \\Big( \\mathcal{H}(\\phi + \\delta\\phi) - \\mathcal{H}(\\phi) \\Big) = \\frac{\\partial \\mathcal{H}}{\\partial \\phi}\n\nSo the local budget at any latitude \\phi is\\frac{\\partial E}{\\partial t} = \\text{ASR} - \\text{OLR} - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H}}{\\partial \\phi}\n\nThe dynamical heating rate in W m^{-2} is thush = - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H}}{\\partial \\phi}\n\nwhich is the convergence of energy transport into this latitude band: the difference between what’s coming in and what’s going out.\n\n","type":"content","url":"/courseware/advanced-heat-transport#a-more-careful-budget","position":27},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Calculating heat transport from the steady-state energy budget","lvl2":"4. The energy budget for a zonal band"},"type":"lvl3","url":"/courseware/advanced-heat-transport#calculating-heat-transport-from-the-steady-state-energy-budget","position":28},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Calculating heat transport from the steady-state energy budget","lvl2":"4. The energy budget for a zonal band"},"content":"Notice that if the above budget is in equilibrium then \\partial E/ \\partial t = 0 and the budget says that divergence of heat transport balances the net radiative heating at every latitude.\n\nIf we can assume that the budget is balanced, i.e. assume that the system is at equilibrium and there is negligible heat storage, then we can use the budget to infer \\mathcal{H} from a measured (or modeled) TOA radiation imbalance.\n\nSetting \\partial E/ \\partial t = 0 and rearranging:\\frac{\\partial \\mathcal{H}}{\\partial \\phi}  = 2 \\pi ~a^2  \\cos⁡\\phi ~ R_{TOA}\n\nNow integrate from the South Pole (\\phi = -\\pi/2):\\int_{-\\pi/2}^{\\phi} \\frac{\\partial \\mathcal{H}}{\\partial \\phi^\\prime}  d\\phi^\\prime = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\\mathcal{H}(\\phi) - \\mathcal{H}(-\\pi/2) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nOur boundary condition is that the transport must go to zero at the pole. We therefore have a formula for calculating the heat transport at any latitude, by integrating the imbalance from the South Pole:\\mathcal{H}(\\phi) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nWhat about the boundary condition at the other pole? We must have \\mathcal{H}(\\pi/2) = 0 as well, because a non-zero transport at the pole is not physically meaningful.\n\nNotice that if we apply the above formula and integrate all the way to the other pole, we then have\\mathcal{H}(\\pi/2) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\pi/2} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nThis is an integral of the radiation imbalance weighted by cosine of latitude. In other words, this is proportional to the area-weighted global average energy imbalance.\n\nWe started by assuming that this imbalance is zero.\n\nIf the global budget is balanced, then the physical boundary condition of no-flux at the poles is satisfied.\n\n","type":"content","url":"/courseware/advanced-heat-transport#calculating-heat-transport-from-the-steady-state-energy-budget","position":29},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"5. Observed and modeled poleward heat transport"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-5-observed-and-modeled-poleward-heat-transport","position":30},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"5. Observed and modeled poleward heat transport"},"content":"\n\nHere we will code up a function that performs the above integration.\n\ndef inferred_heat_transport(energy_in, lat=None, latax=None):\n    '''Compute heat transport as integral of local energy imbalance.\n    Required input:\n        energy_in: energy imbalance in W/m2, positive in to domain\n    As either numpy array or xarray.DataArray\n    If using plain numpy, need to supply these arguments:\n        lat: latitude in degrees\n        latax: axis number corresponding to latitude in the data\n            (axis over which to integrate)\n    returns the heat transport in PW.\n    Will attempt to return data in xarray.DataArray if possible.\n    '''\n    from scipy import integrate\n    from climlab import constants as const\n    if lat is None:\n        try: lat = energy_in.lat\n        except:\n            raise InputError('Need to supply latitude array if input data is not self-describing.')\n    lat_rad = np.deg2rad(lat)\n    coslat = np.cos(lat_rad)\n    field = coslat*energy_in\n    if latax is None:\n        try: latax = field.get_axis_num('lat')\n        except:\n            raise ValueError('Need to supply axis number for integral over latitude.')\n    #  result as plain numpy array\n    integral = integrate.cumulative_trapezoid(field, x=lat_rad, initial=0., axis=latax)\n    result = (1E-15 * 2 * np.pi * const.a**2 * integral)\n    if isinstance(field, xr.DataArray):\n        result_xarray = field.copy()\n        result_xarray.values = result\n        return result_xarray\n    else:\n        return result\n\nLet’s now use this to calculate the total northward heat transport from our control simulation with the CESM:\n\nfig, ax = plt.subplots()\nax.plot(lat_cesm, inferred_heat_transport(ASR_cesm_zon - OLR_cesm_zon))\nax.set_ylabel('PW')\nax.set_xlabel('Latitude')\nax.set_xticks(ticks)\nax.grid()\nax.set_title('Total northward heat transport inferred from CESM control simulation')\n\nThe total heat transport is very nearly symmetric about the equator, with poleward transport of about 5 to 6 PW in both hemispheres.\n\nThe transport peaks in magnitude near 35º latitude, the same latitude where we found that ASR = OLR. This is no coincidence!\n\nEquatorward of 35º (across the tropics) there is net heating by radiation and net cooling by dynamics. The opposite is true poleward of 35º.\n\nWhat about the “observations”, i.e. the reanalysis data?\n\nWe can try to do the same calculation.\n\n#  Need to flip the arrays because we want to start from the south pole\nRtoa_ncep = ASRzon-OLRzon\nlat_ncep = ASRzon.lat\nfig, ax = plt.subplots()\nax.plot(lat_ncep, inferred_heat_transport(Rtoa_ncep))\nax.set_ylabel('PW')\nax.set_xlabel('Latitude')\nax.set_xticks(ticks)\nax.grid()\nax.set_title('Total northward heat transport inferred from NCEP reanalysis')\n\nOur integral does NOT go to zero at the North Pole!. This means that the global energy budget is NOT balanced in the reanalysis data.\n\nLet’s look at the global imbalance:\n\n#  global average of TOA radiation in reanalysis data\nweight_ncep = np.cos(np.deg2rad(lat_ncep)) / np.cos(np.deg2rad(lat_ncep)).mean(dim='lat')\nimbal_ncep = (Rtoa_ncep).weighted(weight_ncep).mean(dim='lat')\nprint( 'The net downward TOA radiation flux in NCEP renalysis data is %0.1f W/m2.' %imbal_ncep)\n\nEvidently there is a substantial net flux out to space in this dataset.\n\nBefore we can compute heat transport from this data, we need to balance the global data.\n\nTo do this requires making assumptions about the spatial distribution of the imbalance.\n\nThe simplest assumption we can make is that the imbalance is uniform across the Earth.\n\nRtoa_ncep_balanced = Rtoa_ncep - imbal_ncep\nnewimbalance = float(Rtoa_ncep_balanced.weighted(weight_ncep).mean(dim='lat'))\nprint( 'The net downward TOA radiation flux after balancing the data is %0.2e W/m2.' %newimbalance)\n\nfig, ax = plt.subplots()\nax.plot(lat_ncep, inferred_heat_transport(Rtoa_ncep_balanced))\nax.set_ylabel('PW')\nax.set_xlabel('Latitude')\nax.set_xticks(ticks)\nax.grid()\nax.set_title('Total northward heat transport inferred from NCEP reanalysis (after global balancing)')\n\nWe now get a physically sensible result (zero at both poles).\n\nThe heat transport is poleward everywhere, and very nearly anti-symmetric across the equator. The shape is very similar to what we found from the CESM simulation, with peaks near 35º.\n\nHowever the magnitude of the peaks is substantially smaller. Does this indicate a shortcoming of the CESM simulation?\n\nProbably not!\n\nIt turns out that our result here is very sensitive to the details of how we balance the radiation data.\n\nAs an exercise, you might try applying different corrections other than the globally uniform correction we used above. E.g. try weighting the tropics or the mid-latitudes more strongly.\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-5-observed-and-modeled-poleward-heat-transport","position":31},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"An example of a recently published observational estimate of meridional heat transport","lvl2":"5. Observed and modeled poleward heat transport"},"type":"lvl3","url":"/courseware/advanced-heat-transport#an-example-of-a-recently-published-observational-estimate-of-meridional-heat-transport","position":32},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"An example of a recently published observational estimate of meridional heat transport","lvl2":"5. Observed and modeled poleward heat transport"},"content":"\n\n\n\nThe ERBE period zonal mean annual cycle of the meridional energy transport in PW by (a) the atmosphere and ocean as inferred from ERBE R_T, NRA \\deltaA_E/\\deltat, and GODAS \\deltaO_E/\\deltat; (b) the atmosphere based on NRA; and (c) by the ocean as implied by ERBE + NRA F_S and GODAS \\deltaO_E/\\deltat. Stippling and hatching in (a)–(c) represent regions and times of year in which the standard deviation of the monthly mean values among estimates, some of which include the CERES period (see text), exceeds 0.5 and 1.0 PW, respectively. (d) The median annual mean transport by latitude for the total (gray), atmosphere (red), and ocean (blue) accompanied with the associated \\pm2\\sigma range (shaded).\n\nThis is a reproduction of Figure 7 from Fasullo and Trenberth (2008), “The Annual Cycle of the Energy Budget. Part II: Meridional Structures and Poleward Transports”, J. Climate 21, doi:10.1175/2007JCLI1936.1\n\nThis figure shows the breakdown of the heat transport by season as well as the partition between the atmosphere and ocean.\n\nFocussing just on the total, annual transport in panel (d) (black curve), we see that is quite consistent with what we computed from the CESM simulation.\n\n","type":"content","url":"/courseware/advanced-heat-transport#an-example-of-a-recently-published-observational-estimate-of-meridional-heat-transport","position":33},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"6. Energy budgets for the atmosphere and ocean"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-6-energy-budgets-for-the-atmosphere-and-ocean","position":34},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"6. Energy budgets for the atmosphere and ocean"},"content":"\n\nThe total transport (which we have been inferring from the TOA radiation imbalance) includes contributions from both the atmosphere and the ocean:\\mathcal{H} = \\mathcal{H}_{a} + \\mathcal{H}_{o}\n\nWe have used the TOA imbalance to infer the total transport because TOA radiation is the only significant energy source / sink to the climate system as a whole.\n\nHowever, if we want to study (or model) the individual contributions from the atmosphere and ocean, we need to consider the energy budgets for each individual domain.\n\nWe will therefore need to broaden our discussion to include the net surface heat flux, i.e. the total flux of energy between the surface and the atmosphere.\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-6-energy-budgets-for-the-atmosphere-and-ocean","position":35},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Surface fluxes","lvl2":"6. Energy budgets for the atmosphere and ocean"},"type":"lvl3","url":"/courseware/advanced-heat-transport#surface-fluxes","position":36},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Surface fluxes","lvl2":"6. Energy budgets for the atmosphere and ocean"},"content":"Let’s denote the net upward energy flux at the surface as F_S.\n\nThere are four principal contributions to F_S:\n\nShortwave radiation\n\nLongwave radiation\n\nSensible heat flux\n\nEvaporation or latent heat flux\n\nSensible and latent heat fluxes involve turbulent exchanges in the planetary boundary layer. We will look at these in more detail later.\n\n# monthly climatologies for surface flux data from reanalysis\n#  all defined as positive UP\nncep_nswrs = xr.open_dataset(ncep_url + \"surface_gauss/nswrs.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\nncep_nlwrs = xr.open_dataset(ncep_url + \"surface_gauss/nlwrs.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\nncep_shtfl = xr.open_dataset(ncep_url + \"surface_gauss/shtfl.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\nncep_lhtfl = xr.open_dataset(ncep_url + \"surface_gauss/lhtfl.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\n#ncep_nswrs = xr.open_dataset(url + 'surface_gauss/nswrs')\n#ncep_nlwrs = xr.open_dataset(url + 'surface_gauss/nlwrs')\n#ncep_shtfl = xr.open_dataset(url + 'surface_gauss/shtfl')\n#ncep_lhtfl = xr.open_dataset(url + 'surface_gauss/lhtfl')\n\n#  Calculate ANNUAL AVERAGE net upward surface flux\nncep_net_surface_up = (ncep_nlwrs.nlwrs\n                     + ncep_nswrs.nswrs\n                     + ncep_shtfl.shtfl\n                     + ncep_lhtfl.lhtfl\n                      ).mean(dim='time')\n\nlon_ncep = ncep_net_surface_up.lon\nfig, ax = plt.subplots()\ncax = ax.pcolormesh(lon_ncep, lat_ncep, ncep_net_surface_up, \n               cmap=plt.cm.seismic, vmin=-200., vmax=200. )\nfig.colorbar(cax, ax=ax)\nax.set_title('Net upward surface energy flux in NCEP Reanalysis data')\n\nDiscuss...  Large net fluxes over ocean, not over land.\n\n","type":"content","url":"/courseware/advanced-heat-transport#surface-fluxes","position":37},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Energy budget for the ocean","lvl2":"6. Energy budgets for the atmosphere and ocean"},"type":"lvl3","url":"/courseware/advanced-heat-transport#energy-budget-for-the-ocean","position":38},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Energy budget for the ocean","lvl2":"6. Energy budgets for the atmosphere and ocean"},"content":"Using exactly the same reasoning we used for the whole climate system, we can write a budget for the OCEAN ONLY:\\frac{\\partial E_o}{\\partial t} = -F_S - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H_o}}{\\partial \\phi}\n\nIn principle it is possible to calculate \\mathcal{H}_o from this budget, analagously to how we calculated the total \\mathcal{H}.\n\nAssuming that\n\nsurface fluxes are well-known\n\nthe ocean heat storage is negligible (a big assumption!)\n\nwe can write\\mathcal{H}_o(\\phi) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} - \\cos⁡\\phi^\\prime ~ F_S d\\phi^\\prime\n\nwhere the minus sign account for the fact that we defined F_S as positive up (out of the ocean).\n\n","type":"content","url":"/courseware/advanced-heat-transport#energy-budget-for-the-ocean","position":39},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Energy budget for the atmosphere","lvl2":"6. Energy budgets for the atmosphere and ocean"},"type":"lvl3","url":"/courseware/advanced-heat-transport#energy-budget-for-the-atmosphere","position":40},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Energy budget for the atmosphere","lvl2":"6. Energy budgets for the atmosphere and ocean"},"content":"The net energy source to the atmosphere is the sum of the TOA flux and the surface flux. Thus we can write\\frac{\\partial E_a}{\\partial t} = R_{TOA} + F_S - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H_a}}{\\partial \\phi}\n\nand we can similarly integrate to get the transport:\\mathcal{H}_a(\\phi) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ \\big( R_{TOA} + F_S \\big) d\\phi^\\prime\n\nNote that these formulas ensure that \\mathcal{H} = \\mathcal{H}_a + \\mathcal{H}_o.\n\n","type":"content","url":"/courseware/advanced-heat-transport#energy-budget-for-the-atmosphere","position":41},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Atmospheric water budget and latent heat transport","lvl2":"6. Energy budgets for the atmosphere and ocean"},"type":"lvl3","url":"/courseware/advanced-heat-transport#atmospheric-water-budget-and-latent-heat-transport","position":42},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Atmospheric water budget and latent heat transport","lvl2":"6. Energy budgets for the atmosphere and ocean"},"content":"Water vapor contributes to the atmopsheric energy transport because energy consumed through evaporation is converted back to sensible heat wherever the vapor subsequently condenses.\n\nIf the evaporation and the condensation occur at different latitudes then there is a net transport of energy due to the movement of water vapor.\n\nWe can use the same kind of budget reasoning to compute this latent heat transport. But this time we will make a budget for water vapor only.\n\nThe only sources and sinks of water vapor to the atmosphere are surface evaporation and precipitation:L_v \\frac{\\partial Q}{\\partial t} = L_v \\big( Evap - Precip \\big) - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H}_{LH}}{\\partial \\phi}\n\nHere we are using\n\nQ is the depth-integrated water vapor (the “precipitable water”) in kg m^{-2}\n\nEvap and Precip are in kg m^{-2} s^{-1} (equivalent to mm/s)\n\nL_v = 2.5 \\times 10^6 J kg^{-1} is the latent heat of vaporization\n\n\\mathcal{H}_{LH} is the northward latent heat transport\n\nAll terms in the above equation thus have units of W m^{-2}.\n\nUsing the now-familiar equilibrium reasoning, we can use this water balance to compute the latent heat transport from the net surface evaporation minus precipitation:\\mathcal{H}_{LH}(\\phi) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ L_v ~\\big( Evap - Precip \\big) d\\phi^\\prime\n\nFrom this we can then infer all the energy transport associated with the motion of dry air as a residual:\\mathcal{H}_{Dry} = \\mathcal{H}_a - \\mathcal{H}_{LH}\n\n","type":"content","url":"/courseware/advanced-heat-transport#atmospheric-water-budget-and-latent-heat-transport","position":43},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"7. Calculating the partitioning of poleward energy transport into different components"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-7-calculating-the-partitioning-of-poleward-energy-transport-into-different-components","position":44},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"7. Calculating the partitioning of poleward energy transport into different components"},"content":"\n\nThis function implements the above formulas to calculate the following quantities from CESM simulation output:\n\nTotal heat transport, \\mathcal{H}\n\nOcean heat transport, \\mathcal{H}_o\n\nAtmospheric heat transport, \\mathcal{H}_a\n\nAtmospheric latent heat transport, \\mathcal{H}_{LH}\n\nAtmospheric dry heat transport, \\mathcal{H}_{Dry}\n\ndef CESM_heat_transport(run, timeslice=clim_slice_cpl):\n    #  Take zonal and time averages of the necessary input fields\n    fieldlist = ['FLNT','FSNT','LHFLX','SHFLX','FLNS','FSNS','PRECSC','PRECSL','QFLX','PRECC','PRECL']\n    zon = run[fieldlist].isel(time=timeslice).mean(dim=('lon','time'))\n    OLR = zon.FLNT\n    ASR = zon.FSNT\n    Rtoa = ASR - OLR  # net downwelling radiation\n    #  surface energy budget terms, all defined as POSITIVE UP\n    #    (from ocean to atmosphere)\n    LHF = zon.LHFLX\n    SHF = zon.SHFLX\n    LWsfc = zon.FLNS\n    SWsfc = -zon.FSNS\n    SnowFlux =  ((zon.PRECSC + zon.PRECSL) *\n                      const.rho_w * const.Lhfus)\n    # net upward radiation from surface\n    SurfaceRadiation = LWsfc + SWsfc\n    # net upward surface heat flux\n    SurfaceHeatFlux = SurfaceRadiation + LHF + SHF + SnowFlux\n    # net heat flux into atmosphere\n    Fatmin = Rtoa + SurfaceHeatFlux\n    #  hydrological cycle, all terms in  kg/m2/s or mm/s\n    Evap = zon.QFLX\n    Precip = (zon.PRECC + zon.PRECL) * const.rho_w\n    EminusP = Evap - Precip\n        \n    # heat transport terms\n    HT = {}\n    HT['total'] = inferred_heat_transport(Rtoa)\n    HT['atm'] = inferred_heat_transport(Fatmin)\n    HT['ocean'] = inferred_heat_transport(-SurfaceHeatFlux)\n    HT['latent'] = inferred_heat_transport(EminusP*const.Lhvap) # atm. latent heat transport from moisture imbal.\n    HT['dse'] = HT['atm'] - HT['latent']  # dry static energy transport as residual\n\n    return HT\n\n#  Compute heat transport partition for both control and 2xCO2 simulations\nHT_control = CESM_heat_transport(atm['cpl_control'])\nHT_2xCO2 = CESM_heat_transport(atm['cpl_CO2ramp'])\n\nfig = plt.figure(figsize=(16,6))\nruns = [HT_control, HT_2xCO2]\nN = len(runs)\n\nfor n, HT in enumerate([HT_control, HT_2xCO2]):\n    ax = fig.add_subplot(1, N, n+1)\n    ax.plot(lat_cesm, HT['total'], 'k-', label='total', linewidth=2)\n    ax.plot(lat_cesm, HT['atm'], 'r-', label='atm', linewidth=2)\n    ax.plot(lat_cesm, HT['dse'], 'r--', label='dry')\n    ax.plot(lat_cesm, HT['latent'], 'r:', label='latent')\n    ax.plot(lat_cesm, HT['ocean'], 'b-', label='ocean', linewidth=2)\n\n    ax.set_xlim(-90,90)\n    ax.set_xticks(ticks)\n    ax.legend(loc='upper left')\n    ax.grid()\n    ax.set_xlabel('Latitude')\n    ax.set_ylabel('PW')\n\nDiscuss the shape of these curves, before and after the global warming.\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-7-calculating-the-partitioning-of-poleward-energy-transport-into-different-components","position":45},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"8. Mechanisms of heat transport"},"type":"lvl2","url":"/courseware/advanced-heat-transport#id-8-mechanisms-of-heat-transport","position":46},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"8. Mechanisms of heat transport"},"content":"\n\nEnergy is transported across latitude lines whenever there is an exchange of fluids with different energy content: e.g. warm fluid moving northward while colder fluid moves southward.\n\nThus energy transport always involves correlations between northward component of velocity v and energy e\n\nThe transport is an integral of these correlations, around a latitude circle and over the depth of the fluid:\\mathcal{H} = \\int_0^{2\\pi} \\int_{\\text{bottom}}^{\\text{top}} \\rho ~ v ~ e ~ dz ~ a \\cos\\phi ~ d\\lambda\n\nThe total transport (which we have been inferring from the TOA radiation imbalance) includes contributions from both the atmosphere and the ocean:\\mathcal{H} = \\mathcal{H}_{a} + \\mathcal{H}_{o}\n\nWe can apply the above definition to both fluids (with appropriate values for bottom and top in the depth integral).\n\nThe appropriate measure of energy content is different for the atmosphere and ocean.\n\nFor the ocean, we usually use the enthalpy for an incompressible fluid:e_o \\approx c_w ~ T\n\nwhere c_w \\approx 4.2 \\times 10^{3} J kg^{-1} K^{-1} is the specific heat for seawater.\n\nFor the atmosphere, it’s a bit more complicated. We need to account for both the compressibility of air, and for its water vapor content. This is because of the latent energy associated with evaporation and condensation of vapor.\n\nIt is convenient to define the moist static energy for the atmosphere:MSE = c_p ~T + g~ Z + L_v ~q\n\nwhose terms are respectively the internal energy, the potential energy, and the latent heat of water vapor (see texts on atmopsheric thermodynamics for details).\n\nWe will assume that MSE is a good approximation to the total energy content of the atmosphere, soe_a \\approx MSE\n\nNote that in both cases we have neglected the kinetic energy from this budget.\n\nThe kinetic energy per unit mass is e_k = |\\vec{v}|^2/2, where \\vec{v} = (u,v,w) is the velocity vector.\n\nIn practice it is a very small component of the total energy content of the fluid and is usually neglected in analyses of poleward energy transport.\n\nAs we have seen, we can further divide the atmospheric transport into transports due to the movement of dry air (the tranport of dry static energy) and transport associated with evaporation and condensation of water vapor (the latent heat transport)\n\n","type":"content","url":"/courseware/advanced-heat-transport#id-8-mechanisms-of-heat-transport","position":47},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Mechanisms of energy transport in the ocean","lvl2":"8. Mechanisms of heat transport"},"type":"lvl3","url":"/courseware/advanced-heat-transport#mechanisms-of-energy-transport-in-the-ocean","position":48},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl3":"Mechanisms of energy transport in the ocean","lvl2":"8. Mechanisms of heat transport"},"content":"Assuming the ocean extends from z=-H to z=0 we can then write\\mathcal{H}_o \\approx a \\cos\\phi \\int_0^{2\\pi} \\int_{-H}^{0}  c_w ~\\rho ~ v ~ T ~ dz  ~ d\\lambda\n\nsetting v ~ T = 0 at all land locations around the latitude circle.\n\nThe northward transport \\mathcal{H}_o is positive if there is a net northward flow of warm water and southward flow of cold water.\n\nThis can occur due to horizontal differences in currents and temperatures.\n\nThe classic example is flow in the subtropical gyres and western boundary currents. In the subtropical North Atlantic, there is rapid northward flow of warm water in the Gulf Stream. This is compensated by a slow southward flow of cooler water across the interior of the basin.\n\nBecause the water masses are at different temperatures, equal and opposite north-south exchanges of mass result in net northward transport of energy.\n\nEnergy transport can also result from vertical structure of the currents.\n\nThere is a large-scale overturning circulation in the Atlantic that involves near-surface northward flow of warmer water, compensated by deeper southward flow of colder water.\n\nAgain, equal exchange of water but net transport of energy.\n\nNote\n\nThese notes are unfinished.\n\n","type":"content","url":"/courseware/advanced-heat-transport#mechanisms-of-energy-transport-in-the-ocean","position":49},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"Credits"},"type":"lvl2","url":"/courseware/advanced-heat-transport#credits","position":50},{"hierarchy":{"lvl1":"Advanced topic: Heat transport decomposition","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/advanced-heat-transport#credits","position":51},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback"},"type":"lvl1","url":"/courseware/advanced-sensitivity-feedback","position":0},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback","position":1},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"1. Radiative forcing"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-1-radiative-forcing","position":2},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"1. Radiative forcing"},"content":"\n\nLet’s say we instantaneously double atmospheric CO_2. What happens?\n\nThe atmosphere is less efficient at radiating energy away to space.\n\nOLR will decrease\n\nThe climate system will begin gaining energy.\n\nWe will call this abrupt decrease in OLR the radiative forcing, a positive number in W m^{-2}\\Delta R = -\\Delta OLR\n\n\\Delta R is a measure of the rate at which energy begins to accumulate in the climate system after an abrupt increase in greenhouse gases, but before any change in climate (i.e. temperature).\n\nWhat happens next?\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-1-radiative-forcing","position":3},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"2. Climate sensitivity (without feedback)"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-2-climate-sensitivity-without-feedback","position":4},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"2. Climate sensitivity (without feedback)"},"content":"\n\nLet’s use our simple zero-dimensional EBM to calculate the resulting change in equilibrium temperature.\n\nHow much warming will we get once the climate system has adjusted to the radiative forcing?\n\nFirst note that at equilibrium we must haveASR = OLR\n\nand in our very simple model, there is no change in ASR, soASR_f = ASR_f\n\n(with  standing for final.)\n\nFrom this we infer thatOLR_f = OLR_i\n\nThe new equilibrium will have exactly the same OLR as the old equilibrium, but a different surface temperature.\n\nThe climate system must warm up by a certain amount to get the OLR back up to its original value! The question is, how much warming is necessary? In other words, what is the new equilibrium temperature?\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-2-climate-sensitivity-without-feedback","position":5},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Equilibrium Climate Sensitivity (ECS)","lvl2":"2. Climate sensitivity (without feedback)"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#equilibrium-climate-sensitivity-ecs","position":6},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Equilibrium Climate Sensitivity (ECS)","lvl2":"2. Climate sensitivity (without feedback)"},"content":"We now define the Equilibrium Climate Sensitivity (denoted ECS or \\Delta T_{2xCO2}):\n\nThe global mean surface warming necessary to balance the planetary energy budget after a doubling of atmospheric CO_2.\n\nThe temperature must increase so that the increase in OLR is exactly equal to the radiative forcing:OLR_f - OLR_{2xCO2} = \\Delta R\n\nFrom the \n\nlecture on analytical solutions of the global EBM, we have linearized our model for OLR with a slope \\lambda_0 = 3.3 W m^{-2} K^{-1}. This means that a global warming of 1 degree causes a 3.3 W m^{-2} increase in the OLR. So we can write:OLR_f \\approx OLR_{2xCO2} + \\lambda_0 \\Delta T_0\n\nwhere we are writing the change in temperature as\\Delta T_0 = T_f - T_i\n\n(and the subscript zero will remind us that this is the response in the simplest model, in the absence of any feedbacks)\n\nTo achieve energy balance, the planet must warm up by\\Delta T_0 = \\frac{\\Delta R}{\\lambda_0}\n\nAs we will see later, the actual radiative forcing due CO_2 doubling is about 4 W m^{-2}.\n\nSo our model without feedback gives a prediction for climate sensitivity:\n\n#  Repeating code from Lecture 2\nOLRobserved = 238.5  # in W/m2\nsigma = 5.67E-8  # S-B constant\nTsobserved = 288.  # global average surface temperature\ntau = OLRobserved / sigma / Tsobserved**4  # solve for tuned value of transmissivity\n\nlambda_0 = 4 * sigma * tau * Tsobserved**3\n\nDeltaR = 4.  # Radiative forcing in W/m2\nDeltaT0 = DeltaR / lambda_0\nprint( 'The Equilibrium Climate Sensitivity in the absence of feedback is {:.1f} K.'.format(DeltaT0))\n\nQuestion: what are the current best estimates for the actual warming (including all feedbacks) in response to a doubling of CO_2?\n\nWe’ll now look at the feedback concept. Climate feedbacks tend to amplify the response to increased CO_2. But \\Delta T_0 is a meaningful climate sensitivity in the absence of feedback.\n\n\\Delta T_0 = 1.2 K is the warming that we would have if the Earth radiated the excess energy away to space as a blackbody, and with no change in the planetary albedo.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#equilibrium-climate-sensitivity-ecs","position":7},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"3. The feedback concept"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-3-the-feedback-concept","position":8},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"3. The feedback concept"},"content":"\n\nA concept borrowed from electrical engineering. You have all heard or used the term before, but we’ll try take a more precise approach today.\n\nA feedback occurs when a portion of the output from the action of a system is added to the input and subsequently alters the output:\n\n\n\nThe result of a loop system can either be amplification or dampening of the process, depending on the sign of the gain in the loop, which we will denote f.\n\nWe will call amplifying feedbacks positive (f>0) and damping feedbacks negative (f<0).\n\nWe can think of the “process” here as the entire climate system, which contains many examples of both positive and negative feedback.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-3-the-feedback-concept","position":9},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Example: the water vapor feedback","lvl2":"3. The feedback concept"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#example-the-water-vapor-feedback","position":10},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Example: the water vapor feedback","lvl2":"3. The feedback concept"},"content":"The capacity of the atmosphere to hold water vapor (saturation specific humidity) increases exponentially with temperature. Warming is thus accompanied by moistening (more water vapor), which leads to more warming due to the enhanced water vapor greenhouse effect.\n\nPositive or negative feedback?\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#example-the-water-vapor-feedback","position":11},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Example: the ice-albedo feedback","lvl2":"3. The feedback concept"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#example-the-ice-albedo-feedback","position":12},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Example: the ice-albedo feedback","lvl2":"3. The feedback concept"},"content":"Colder temperatures lead to expansion of the areas covered by ice and snow, which tend to be more reflective than water and vegetation. This causes a reduction in the absorbed solar radiation, which leads to more cooling.\n\nPositive or negative feedback?\n\nMake sure it’s clear that the sign of the feedback is the same whether we are talking about warming or cooling.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#example-the-ice-albedo-feedback","position":13},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"4. Climate feedback: some definitions"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-4-climate-feedback-some-definitions","position":14},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"4. Climate feedback: some definitions"},"content":"\n\nWe start with an initial radiative forcing , and get a response\\Delta T_0 = \\frac{\\Delta R}{\\lambda_0}\n\nNow consider what happens in the presence of a feedback process. For a concrete example, let’s take the water vapor feedback. For every degree of warming, there is an additional increase in the greenhouse effect, and thus additional energy added to the system.\n\nLet’s denote this extra energy asf \\lambda_0 \\Delta T_0\n\nwhere f is the feedback amount, a number that represents what fraction of the output gets added back to the input. f must be between -\\infty and +1.\n\nFor the example of the water vapor feedback, f is positive (between 0 and +1) – the process adds extra energy to the original radiative forcing.\n\nThe amount of energy in the full “input” is now\\Delta R + f \\lambda_0 \\Delta T_0\n\nor(1+f) \\lambda_0 \\Delta T_0\n\nBut now we need to consider the next loop. A fraction f of the additional energy is also added to the input, giving us(1+f+f^2) \\lambda_0 \\Delta T_0\n\nand we can go round and round, leading to the infinite series(1+f+f^2+f^3+ ...) \\lambda_0 \\Delta T_0 = \\lambda_0 \\Delta T_0 \\sum_{n=0}^{\\infty} f^n\n\nQuestion: what happens if f=1?\n\nIt so happens that this infinite series has an exact solution\\sum_{n=0}^{\\infty} f^n = \\frac{1}{1-f}\n\nSo the full response including all the effects of the feedback is actually\\Delta T = \\frac{1}{1-f} \\Delta T_0\n\nThis is also sometimes written as\\Delta T = g \\Delta T_0\n\nwhereg = \\frac{1}{1-f} = \\frac{\\Delta T}{\\Delta T_0}\n\nis called the system gain -- the ratio of the actual warming (including all feedbacks) to the warming we would have in the absence of feedbacks.\n\nSo if the overall feedback is positive, then f>0 and g>1.\n\nAnd if the overall feedback is negative?\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-4-climate-feedback-some-definitions","position":15},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"5. Climate sensitivity with feedback"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-5-climate-sensitivity-with-feedback","position":16},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"5. Climate sensitivity with feedback"},"content":"\n\nECS is an important number. A major goal of climate modeling is to provide better estimates of ECS and its uncertainty.\n\nThe IPCC report AR5 gives a likely range of 1.5 to 4.5 K. (There is lots of uncertainty in these numbers – we will definitely come back to this question)\n\nSo our simple estimate of the no-feedback change \\Delta T_0 is apparently underestimating climate sensitivity.\n\nSaying the same thing another way: the overall net climate feedback is positive, amplifying the response, and the system gain g>1.\n\nLet’s assume that the true value is \\Delta T_{2xCO2} = 3 K (middle of the range). This implies that the gain isg = \\frac{\\Delta T_{2xCO2}}{\\Delta T_0} = \\frac{3}{1.2} = 2.5\n\nThe actual warming is substantially amplified!\n\nThere are lots of reasons for this, but the water vapor feedback is probably the most important.\n\nQuestion:  if g=2.5, what is the feedback amount f?g = \\frac{1}{1-f}\n\nor rearranging,f = 1 - 1/g = 0.6\n\nThe overall feedback (due to water vapor, clouds, etc.) is positive.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-5-climate-sensitivity-with-feedback","position":17},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-6-contribution-of-individual-feedback-processes-to-equilibrium-climate-sensitivity","position":18},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"\n\nNow what if we have several individual feedback processes occurring simultaneously?\n\nWe can think of individual feedback amounts f_1, f_2, f_3, ..., with each  representing a physically distinct mechanism, e.g. water vapor, surface snow and ice, cloud changes, etc.\n\nEach individual process takes a fraction f_i of the output and adds to the input. So the feedback amounts are additive,f = f_1 + f_2 + f_3 + ... = \\sum_{i=0}^N f_i\n\nThis gives us a way to compare the importance of individual feedback processes!\n\nThe climate sensitivity is now\\Delta T_{2xCO2} = \\frac{1}{1- \\sum_{i=0}^N f_i } \\Delta T_0\n\nThe climate sensitivity is thus increased by positive feedback processes, and decreased by negative feedback processes.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-6-contribution-of-individual-feedback-processes-to-equilibrium-climate-sensitivity","position":19},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Climate feedback parameters","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#climate-feedback-parameters","position":20},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Climate feedback parameters","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"We can also write this in terms of the original radiative forcing as\\Delta T_{2xCO2} = \\frac{\\Delta R}{\\lambda_0 - \\sum_{i=1}^{N} \\lambda_i}\n\nwhere\\lambda_i = \\lambda_0 f_i\n\nknown as climate feedback parameters, in units of W m^{-2} K^{-1}.\n\nWith this choice of sign conventions, \\lambda_i > 0 for a positive feedback process.\n\nIndividual feedback parameters \\lambda_i are then additive, and can be compared to the no-feedback parameter \\lambda_0.\n\nBased on our earlier numbers, the net feedback necessary to get a climate sensitivity of 3 K is\\sum_{i=1}^N \\lambda_i = \\lambda_0 \\sum_{i=1}^N f_i = (3.3 \\text{ W m}^{-2} \\text{ K}^{-1}) (0.6) = 2 \\text{ W m}^{-2} \\text{ K}^{-1}\n\nWe might decompose this net climate feedback into, for example\n\nlongwave and shortwave processes\n\ncloud and non-cloud processes\n\nThese individual feedback processes may be positive or negative. This is very powerful, because we can measure the relative importance of different feedback processes simply by comparing their \\lambda_i values.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#climate-feedback-parameters","position":21},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Every climate model has a Planck feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#every-climate-model-has-a-planck-feedback","position":22},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Every climate model has a Planck feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"The “Planck feedback” represented by the negative of our reference parameter -\\lambda_0 is not really a feedback at all.\n\nIt is the most basic and universal climate process, and is present in every climate model. It is simply an expression of the fact that a warm planet radiates more to space than a cold planet.\n\nAs we will see, our estimate of -\\lambda_0 = -3.3 ~\\text{W} ~\\text{m}^{-2} ~\\text{K}^{-1}  is essentially the same as the Planck feedback diagnosed from complex GCMs. Unlike our simple zero-dimensional EBM, however, most other climate models (and the real climate system) have other radiative feedback processes, such that\\lambda = \\lambda_0 - \\sum_{i=1}^{N} \\lambda_i \\ne \\lambda_0\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#every-climate-model-has-a-planck-feedback","position":23},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"7. Feedbacks diagnosed from complex climate models"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-7-feedbacks-diagnosed-from-complex-climate-models","position":24},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"7. Feedbacks diagnosed from complex climate models"},"content":"","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-7-feedbacks-diagnosed-from-complex-climate-models","position":25},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Data from the IPCC AR5","lvl2":"7. Feedbacks diagnosed from complex climate models"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#data-from-the-ipcc-ar5","position":26},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Data from the IPCC AR5","lvl2":"7. Feedbacks diagnosed from complex climate models"},"content":"This figure is reproduced from the IPCC AR5 report. It shows the feedbacks diagnosed from the various models that contributed to the assessment.\n\n(Later in the term we will discuss how the feedback diagnosis is actually done)\n\nSee below for complete citation information.\n\n\n\nFigure 9.43 | (a) Strengths of individual feedbacks for CMIP3 and CMIP5 models (left and right columns of symbols) for Planck (P), water vapour (WV), clouds (C), albedo (A), lapse rate (LR), combination of water vapour and lapse rate (WV+LR) and sum of all feedbacks except Planck (ALL), from Soden and Held (2006) and Vial et al. (2013), following Soden et al. (2008). CMIP5 feedbacks are derived from CMIP5 simulations for abrupt fourfold increases in CO2 concentrations (4 × CO2). (b) ECS obtained using regression techniques by Andrews et al. (2012) against ECS estimated from the ratio of CO2 ERF to the sum of all feedbacks. The CO2 ERF is one-half the 4 × CO2 forcings from Andrews et al. (2012), and the total feedback (ALL + Planck) is from Vial et al. (2013).\n\nFigure caption reproduced from the AR5 WG1 report \n\nFlato et al., 2013\n\nLegend:\n\nP: Planck feedback\n\nWV: Water vapor feedback\n\nLR: Lapse rate feedback\n\nWV+LR: combined water vapor plus lapse rate feedback\n\nC: cloud feedback\n\nA: surface albedo feedback\n\nALL: sum of all feedback except Plank, i.e. ALL = WV+LR+C+A\n\nThings to note:\n\nThe models all agree strongly on the Planck feedback.\n\nThe Planck feedback is about -\\lambda_0 = -3.3 ~\\text{W} ~\\text{m}^{-2} ~\\text{K}^{-1}  just like our above estimate (but with opposite sign convention -- watch carefully for that in the literature)\n\nThe water vapor feedback is strongly positive in every model.\n\nThe lapse rate feedback is something we will study later. It is slightly negative.\n\nFor reasons we will discuss later, the best way to measure the water vapor feedback is to combine it with lapse rate feedback.\n\nModels agree strongly on the combined water vapor plus lapse rate feedback.\n\nThe albedo feedback is slightly positive but rather small globally.\n\nBy far the largest spread across the models occurs in the cloud feedback.\n\nGlobal cloud feedback ranges from slighly negative to strongly positive across the models.\n\nMost of the spread in the total feedback is due to the spread in the cloud feedback.\n\nTherefore, most of the spread in the ECS across the models is due to the spread in the cloud feedback.\n\nOur estimate of +2.0 ~\\text{W} ~\\text{m}^{-2} ~\\text{K}^{-1} for all the missing processes is consistent with the GCM ensemble.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#data-from-the-ipcc-ar5","position":27},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#id-8-the-zero-dimensional-model-with-variable-albedo","position":28},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#id-8-the-zero-dimensional-model-with-variable-albedo","position":29},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"The model","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#the-model","position":30},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"The model","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"In homework you will be asked to include a new process in the zero-dimensional EBM: a temperature-dependent albedo.\n\nWe use the following formula:\\alpha(T) = \\left\\{ \\begin{array}{ccc}\n\\alpha_i &   & T \\le T_i \\\\\n\\alpha_o + (\\alpha_i-\\alpha_o) \\frac{(T-T_o)^2}{(T_i-T_o)^2} &   & T_i < T < T_o \\\\\n\\alpha_o &   & T \\ge T_o \\end{array} \\right\\}\n\nwith parameter values:\n\n\\alpha_o = 0.289 is the albedo of a warm, ice-free planet\n\n\\alpha_i = 0.7 is the albedo of a very cold, completely ice-covered planet\n\nT_o = 293 K is the threshold temperature above which our model assumes the planet is ice-free\n\nT_i = 260 K is the threshold temperature below which our model assumes the planet is completely ice covered.\n\nFor intermediate temperature, this formula gives a smooth variation in albedo with global mean temperature. It is tuned to reproduce the observed albedo \\alpha = 0.299 for T = 288 K.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#the-model","position":31},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Coding up the model in Python","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#coding-up-the-model-in-python","position":32},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Coding up the model in Python","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"This largely repeats what I asked you to do in your homework.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef albedo(T, alpha_o = 0.289, alpha_i = 0.7, To = 293., Ti = 260.):\n    alb1 = alpha_o + (alpha_i-alpha_o)*(T-To)**2 / (Ti - To)**2\n    alb2 = np.where(T>Ti, alb1, alpha_i)\n    alb3 = np.where(T<To, alb2, alpha_o)\n    return alb3\n\ndef ASR(T, Q=341.3):\n    alpha = albedo(T)\n    return Q * (1-alpha)\n\ndef OLR(T, sigma=5.67E-8, tau=0.57):\n    return tau * sigma * T**4\n\ndef Ftoa(T):\n    return ASR(T) - OLR(T)\n\nT = np.linspace(220., 300., 100)\n\nplt.plot(T, albedo(T))\nplt.xlabel('Temperature (K)')\nplt.ylabel('albedo')\nplt.ylim(0,1)\nplt.title('Albedo as a function of global mean temperature')\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#coding-up-the-model-in-python","position":33},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Graphical solution: TOA fluxes as functions of temperature","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#graphical-solution-toa-fluxes-as-functions-of-temperature","position":34},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Graphical solution: TOA fluxes as functions of temperature","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"\n\nplt.plot(T, OLR(T), label='OLR')\nplt.plot(T, ASR(T), label='ASR')\nplt.plot(T, Ftoa(T), label='Ftoa')\nplt.xlabel('Surface temperature (K)')\nplt.ylabel('TOA flux (W m$^{-2}$)')\nplt.grid()\nplt.legend(loc='upper left')\n\nThe graphs meet at three different points! That means there are actually three different possible equilibrium temperatures in this model.\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#graphical-solution-toa-fluxes-as-functions-of-temperature","position":35},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Numerical solution to get the three equilibrium temperatures","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#numerical-solution-to-get-the-three-equilibrium-temperatures","position":36},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Numerical solution to get the three equilibrium temperatures","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"\n\n# Use numerical root-finding to get the equilibria\nfrom scipy.optimize import brentq\n# brentq is a root-finding function\n#  Need to give it a function and two end-points\n#  It will look for a zero of the function between those end-points\nTeq1 = brentq(Ftoa, 280., 300.)\nTeq2 = brentq(Ftoa, 260., 280.)\nTeq3 = brentq(Ftoa, 200., 260.)\n\nprint( Teq1, Teq2, Teq3)\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#numerical-solution-to-get-the-three-equilibrium-temperatures","position":37},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Bonus exercise","lvl2":"8. The zero-dimensional model with variable albedo"},"type":"lvl3","url":"/courseware/advanced-sensitivity-feedback#bonus-exercise","position":38},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl3":"Bonus exercise","lvl2":"8. The zero-dimensional model with variable albedo"},"content":"Using numerical timestepping and different initial temperatures, can you get the model to converge on all three equilibria, or only some of them?\n\nWhat do you think this means?\n\n","type":"content","url":"/courseware/advanced-sensitivity-feedback#bonus-exercise","position":39},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"Credits"},"type":"lvl2","url":"/courseware/advanced-sensitivity-feedback#credits","position":40},{"hierarchy":{"lvl1":"Advanced topic: Climate sensitivity and feedback","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/advanced-sensitivity-feedback#credits","position":41},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM"},"type":"lvl1","url":"/courseware/advanced-snowball-earth","position":0},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\nNote\n\nThese notes and the companion \n\nAdvanced topic: Ice albedo feedback in the EBM extend the material in the \n\nIce-albedo feedback and Snowball Earth in the EBM notes.\n\nWarning\n\nUnlike most of the other notebooks in this series, this one performs some intensive computations and may take more than an hour to run from start to finish (your mileage may vary).\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom climlab import constants as const\nimport climlab\n\n","type":"content","url":"/courseware/advanced-snowball-earth","position":1},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"1. The Neoproterozoic Snowball Earth events"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#id-1-the-neoproterozoic-snowball-earth-events","position":2},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"1. The Neoproterozoic Snowball Earth events"},"content":"\n\n","type":"content","url":"/courseware/advanced-snowball-earth#id-1-the-neoproterozoic-snowball-earth-events","position":3},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"The Geologic Time Scale","lvl2":"1. The Neoproterozoic Snowball Earth events"},"type":"lvl3","url":"/courseware/advanced-snowball-earth#the-geologic-time-scale","position":4},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"The Geologic Time Scale","lvl2":"1. The Neoproterozoic Snowball Earth events"},"content":"First, some information on the nomenclature for Earth history \n\nWalker & Geissman, 2009:\n\nThe long view of glacial epochs on Earth \n\nHoffman et al., 2017:\n\n","type":"content","url":"/courseware/advanced-snowball-earth#the-geologic-time-scale","position":5},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"Extensive evidence for large glaciers at sea level in the tropics","lvl2":"1. The Neoproterozoic Snowball Earth events"},"type":"lvl3","url":"/courseware/advanced-snowball-earth#extensive-evidence-for-large-glaciers-at-sea-level-in-the-tropics","position":6},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"Extensive evidence for large glaciers at sea level in the tropics","lvl2":"1. The Neoproterozoic Snowball Earth events"},"content":"Evidently the climate was very cold at these times (635 Ma and 715 Ma) \n\nHoffman & Li, 2009:\n\n\n\nSource: \n\nHoffman & Schrag (2002)\n\n","type":"content","url":"/courseware/advanced-snowball-earth#extensive-evidence-for-large-glaciers-at-sea-level-in-the-tropics","position":7},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"The Snowball Earth hypothesis","lvl2":"1. The Neoproterozoic Snowball Earth events"},"type":"lvl3","url":"/courseware/advanced-snowball-earth#the-snowball-earth-hypothesis","position":8},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"The Snowball Earth hypothesis","lvl2":"1. The Neoproterozoic Snowball Earth events"},"content":"Various bizarre features in the geological record from 635 and 715 Ma ago indicate that the Earth underwent some very extreme environmental changes… at least twice. The Snowball Earth hypothesis postulates that:\n\nThe Earth was completely ice-covered (including the oceans)\n\nThe total glaciation endured for millions of years\n\nCO_2 slowly accumulated in the atmosphere from volcanoes\n\nWeathering of rocks (normally acting to reduce CO_2) extremely slow due to cold, dry climate\n\nEventually the extreme greenhouse effect is enough to melt back the ice\n\nThe Earth then enters a period of extremely hot climate.\n\nThe hypothesis rests on a phenomenon first discovered by climate modelers in the Budyko-Sellers EBM: runaway ice-albedo feedback or large ice cap instability.\n\n","type":"content","url":"/courseware/advanced-snowball-earth#the-snowball-earth-hypothesis","position":9},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"2. Stability of the polar ice caps: the concept"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#id-2-stability-of-the-polar-ice-caps-the-concept","position":10},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"2. Stability of the polar ice caps: the concept"},"content":"\n\n\n\nFor small perturbations, we can relate the cooling to the displacement of the ice edge as:\\delta T = -\\frac{dT}{d\\phi} \\bigg|_{\\phi_i} \\delta \\phi\n\n","type":"content","url":"/courseware/advanced-snowball-earth#id-2-stability-of-the-polar-ice-caps-the-concept","position":11},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"Stability criterion:","lvl2":"2. Stability of the polar ice caps: the concept"},"type":"lvl3","url":"/courseware/advanced-snowball-earth#stability-criterion","position":12},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"Stability criterion:","lvl2":"2. Stability of the polar ice caps: the concept"},"content":"\\frac{\\delta a ~ S(\\phi_i) ~ \\cos\\phi_i}{B} < -\\frac{dT}{d\\phi} \\bigg|_{\\phi_i} \\delta \\phi\n\nThe LHS is largest at the equator, while the RHS is large in mid-latitudes and near zero at the equator.\n\nThe conclusion:  The ice will always grow unstably toward the equator once it reaches some critical latitude.\n\nThis is called Large Ice Cap Instability, and was first discovered in the Budyko-Sellers EBM.\n\nSee \n\nRose (2015) for more details.\n\n","type":"content","url":"/courseware/advanced-snowball-earth#stability-criterion","position":13},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"3. Annual-mean EBM with albedo feedback: adjustment to equilibrium"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#id-3-annual-mean-ebm-with-albedo-feedback-adjustment-to-equilibrium","position":14},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"3. Annual-mean EBM with albedo feedback: adjustment to equilibrium"},"content":"\n\nHere we will use the 1-dimensional diffusive Energy Balance Model (EBM) to explore the effects of albedo feedback and heat transport on climate sensitivity.\n\n#  for convenience, set up a dictionary with our reference parameters\nparam = {'A':210, 'B':2, 'a0':0.3, 'a2':0.078, 'ai':0.62, 'Tf':-10., 'D':0.55}\nmodel1 = climlab.EBM_annual(name='Annual Mean EBM with ice line', num_lat=180, **param )\nprint(model1)\n\nmodel1.integrate_years(5)\nTequil = np.array(model1.Ts)\nALBequil = np.array(model1.albedo)\nOLRequil = np.array(model1.OLR)\nASRequil = np.array(model1.ASR)\n\nLet’s look at what happens if we perturb the temperature -- make it 20ºC colder everywhere!\n\nmodel1.Ts -= 20.\nmodel1.compute_diagnostics()\n\nLet’s take a look at how we have just perturbed the absorbed shortwave:\n\nmy_ticks = [-90,-60,-30,0,30,60,90]\nlat = model1.lat\n\nfig = plt.figure( figsize=(12,5) )\n\nax1 = fig.add_subplot(1,2,1)\nax1.plot(lat, Tequil, label='equil') \nax1.plot(lat, model1.state['Ts'], label='pert' )\nax1.grid()\nax1.legend()\nax1.set_xlim(-90,90)\nax1.set_xticks(my_ticks)\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Temperature (°C)')\n\nax2 = fig.add_subplot(1,2,2)\nax2.plot( lat, ASRequil, label='equil') \nax2.plot( lat, model1.diagnostics['ASR'], label='pert' )\nax2.grid()\nax2.legend()\nax2.set_xlim(-90,90)\nax2.set_xticks(my_ticks)\nax2.set_xlabel('Latitude')\nax2.set_ylabel('ASR (W m$^{-2}$)')\n\nSo there is less absorbed shortwave now, because of the increased albedo. The global mean difference is:\n\nclimlab.global_mean( model1.ASR - ASRequil )\n\nLess shortwave means that there is a tendency for the climate to cool down even more! In other words, the shortwave feedback is positive.\n\n","type":"content","url":"/courseware/advanced-snowball-earth#id-3-annual-mean-ebm-with-albedo-feedback-adjustment-to-equilibrium","position":15},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"4. Global feedback analysis in the EBM"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#id-4-global-feedback-analysis-in-the-ebm","position":16},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"4. Global feedback analysis in the EBM"},"content":"\n\nTake the global mean of the EBM equation, the transport term drops outC \\frac{\\partial \\langle T_s \\rangle}{\\partial t} = \\langle (1-\\alpha) ~ Q \\rangle - ~A - B~\\langle T_s \\rangle\n\nBack in our \n\nLecture on climate sensitivity we defined the net climate feedback parameter through a linear Taylor series expansion of the global energy budget:\\lambda = \\frac{\\partial}{\\partial \\langle T_s \\rangle} \\bigg( \\Delta F_{TOA} \\bigg)\n\nwhere \\Delta F_{TOA} is the change in the net downward radiative flux at the TOA associated with a change \\delta \\langle T_s \\rangle in the global average surface temperature.\n\nApplying this to the RHS of our EBM equation gives\\lambda = \\lambda_{LW} + \\lambda_{SW}\n\nwith longwave and shortwave contributions:\\lambda_{LW} = -B\n\nand\\lambda_{SW} = \\frac{\\Delta \\langle (1-\\alpha) ~ Q \\rangle}{\\Delta \\langle T_s \\rangle}\n\nThe longwave feedback is a constant in our model, by contruction.\n\nThe shortwave feedback, on the other hand, is state-dependent. The feedback depends on the detailed displacement of the ice line for a given global temperature change.\n\nPlugging in numbers from our example above gives\n\n\\lambda = - 2 + \\frac{-20.4}{-20} = -2 + 1 = -1 W m^{-2} °C^{-1}\n\nThe feedback is negative, as we expect! The tendency to warm up from reduced OLR outweighs the tendency to cool down from reduced ASR. A negative net feedback means that the system will relax back towards the equilibrium.\n\nLet’s let the temperature evolve one year at a time and add extra lines to the graph:\n\nplt.plot( lat, Tequil, 'k--', label='equil' )\nplt.plot( lat, model1.Ts, 'k-', label='pert' )\nplt.grid(); plt.xlim(-90,90); plt.legend()\nfor n in range(5):\n    model1.integrate_years(years=1.0, verbose=False)\n    plt.plot(lat, model1.Ts)\nplt.ylabel('Temperature (°C)')\nplt.xlabel('Latitude')\n\nTemperature drifts back towards equilibrium, as we expected!\n\nWhat if we cool the climate so much that the entire planet is ice covered?\n\nmodel1.Ts -= 40.\nmodel1.compute_diagnostics()\n\nLook again at the change in absorbed shortwave:\n\nclimlab.global_mean( model1.ASR - ASRequil )\n\nIt’s much larger because we’ve covered so much more surface area with ice!\n\nThe feedback calculation now looks like\n\n\\lambda = - 2 + \\frac{-109}{-40} = -2 + 2.7 = +0.7 W m^{-2} °C^{-1}\n\nWhat? Looks like the positive albedo feedback is so strong here that it has outweighed the negative longwave feedback. What will happen to the system now? Let’s find out...\n\nplt.plot( lat, Tequil, 'k--', label='equil' )\nplt.plot( lat, model1.Ts, 'k-', label='pert' )\nplt.grid(); plt.xlim(-90,90); plt.legend()\nfor n in range(5):\n    model1.integrate_years(years=1.0, verbose=False)\n    plt.plot(lat, model1.Ts)\nplt.ylabel('Temperature (°C)')\nplt.xlabel('Latitude')\n\nSomething very different happened! The climate drifted towards an entirely different equilibrium state, in which the entire planet is cold and ice-covered.\n\nWe will refer to this as the SNOWBALL EARTH.\n\nNote that the warmest spot on the planet is still the equator, but it is now about -33ºC rather than +28ºC!\n\n","type":"content","url":"/courseware/advanced-snowball-earth#id-4-global-feedback-analysis-in-the-ebm","position":17},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"5. Here Comes the Sun! Where is the ice edge?"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#id-5-here-comes-the-sun-where-is-the-ice-edge","position":18},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"5. Here Comes the Sun! Where is the ice edge?"},"content":"\n\nThe ice edge in our model is always where the temperature crosses T_f = -10^\\circC. The system is at equilibrium when the temperature is such that there is a balance between ASR, OLR, and heat transport convergence everywhere.\n\nSuppose that sun was hotter or cooler at different times (in fact it was significantly cooler during early Earth history). That would mean that the solar constant S_0 = 4Q was larger or smaller. We should expect that the temperature (and thus the ice edge) should increase and decrease as we change S_0.\n\nS_0 during the Neoproterozoic Snowball Earth events is believed to be about 93% of its present-day value, or about 1270 W m^{-2}.\n\nWe are going to look at how the equilibrium ice edge depends on S_0, by integrating the model out to equilibrium for lots of different values of S_0. We will start by slowly decreasing S_0, and then slowly increasing S_0.\n\nmodel2 = climlab.EBM_annual(num_lat = 360, **param)\n\nS0array = np.linspace(1400., 1200., 200)\n\nmodel2.integrate_years(5)\n\nprint( model2.icelat)\n\nicelat_cooling = np.empty_like(S0array)\nicelat_warming = np.empty_like(S0array)\n\n# First cool....\nfor n in range(S0array.size):\n    model2.subprocess['insolation'].S0 = S0array[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_cooling[n] = np.max(model2.icelat)\n# Then warm...\nfor n in range(S0array.size):\n    model2.subprocess['insolation'].S0 = np.flipud(S0array)[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_warming[n] = np.max(model2.icelat)\n\nFor completeness: also start from present-day conditions and warm up.\n\nmodel3 = climlab.EBM_annual(num_lat=360, **param)\nS0array3 = np.linspace(1350., 1400., 50)\n#S0array3 = np.linspace(1350., 1400., 5)\nicelat3 = np.empty_like(S0array3)\n\nfor n in range(S0array3.size):\n    model3.subprocess['insolation'].S0 = S0array3[n]\n    model3.integrate_years(10, verbose=False)\n    icelat3[n] = np.max(model3.icelat)\n\nfig = plt.figure( figsize=(10,6) )\nax = fig.add_subplot(111)\nax.plot(S0array, icelat_cooling, 'r-', label='cooling' )\nax.plot(S0array, icelat_warming, 'b-', label='warming' )\nax.plot(S0array3, icelat3, 'g-', label='warming' )\nax.set_ylim(-10,100)\nax.set_yticks((0,15,30,45,60,75,90))\nax.grid()\nax.set_ylabel('Ice edge latitude', fontsize=16)\nax.set_xlabel('Solar constant (W m$^{-2}$)', fontsize=16)\nax.plot( [const.S0, const.S0], [-10, 100], 'k--', label='present-day' )\nax.legend(loc='upper left')\nax.set_title('Solar constant versus ice edge latitude in the EBM with albedo feedback', fontsize=16);\n\nThere are actually up to 3 different climates possible for a given value of S_0!\n\n","type":"content","url":"/courseware/advanced-snowball-earth#id-5-here-comes-the-sun-where-is-the-ice-edge","position":19},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"How to un-freeze the Snowball","lvl2":"5. Here Comes the Sun! Where is the ice edge?"},"type":"lvl3","url":"/courseware/advanced-snowball-earth#how-to-un-freeze-the-snowball","position":20},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl3":"How to un-freeze the Snowball","lvl2":"5. Here Comes the Sun! Where is the ice edge?"},"content":"\n\nThe graph indicates that if the Earth were completely frozen over, it would be perfectly happy to stay that way even if the sun were brighter and hotter than it is today.\n\nOur EBM predicts that (with present-day parameters) the equilibrium temperature at the equator in the Snowball state is about -33ºC, which is much colder than the threshold temperature T_f = -10^\\circC. How can we melt the Snowball?\n\nWe need to increase the avaible energy sufficiently to get the equatorial temperatures above this threshold! That is going to require a much larger increase in S_0 (could also increase the greenhouse gases, which would have a similar effect)!\n\nLet’s crank up the sun to 1830 W m^{-2} (about a 35% increase from present-day).\n\nmodel4 = climlab.process_like(model2)  # initialize with cold Snowball temperature\nmodel4.subprocess['insolation'].S0 = 1830.\nmodel4.integrate_years(40)\nplt.plot(model4.lat, model4.Ts)\nplt.xlim(-90,90); plt.ylabel('Temperature (°C)'); plt.xlabel('Latitude')\nplt.grid(); plt.xticks(my_ticks)\nprint('The ice edge is at ' + str(model4.icelat) + ' degrees latitude.' )\n\nStill a Snowball... but just barely! The temperature at the equator is just below the threshold.\n\nTry to imagine what might happen once it starts to melt. The solar constant is huge, and if it weren’t for the highly reflective ice and snow, the climate would be really really hot!\n\nWe’re going to increase S_0 one more time...\n\nmodel4.subprocess['insolation'].S0 = 1840.\nmodel4.integrate_years(10)\nplt.plot(model4.lat, model4.Ts)\nplt.xlim(-90,90); plt.ylabel('Temperature (°C)'); plt.xlabel('Latitude')\nplt.grid(); plt.xticks(my_ticks);\n\nSuddenly the climate looks very very different again! The global mean temperature is\n\nprint( model4.global_mean_temperature() )\n\nA roasty 58ºC, and the poles are above 20ºC. A tiny increase in S_0 has led to a very drastic change in the climate.\n\nS0array_snowballmelt = np.linspace(1400., 1900., 50)\nicelat_snowballmelt = np.empty_like(S0array_snowballmelt)\nicelat_snowballmelt_cooling = np.empty_like(S0array_snowballmelt)\n\nfor n in range(S0array_snowballmelt.size):\n    model2.subprocess['insolation'].S0 = S0array_snowballmelt[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_snowballmelt[n] = np.max(model2.icelat)\n    \nfor n in range(S0array_snowballmelt.size):\n    model2.subprocess['insolation'].S0 = np.flipud(S0array_snowballmelt)[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_snowballmelt_cooling[n] = np.max(model2.icelat)\n\nNow we will complete the plot of ice edge versus solar constant.\n\nfig = plt.figure( figsize=(10,6) )\nax = fig.add_subplot(111)\nax.plot(S0array, icelat_cooling, 'r-', label='cooling' )\nax.plot(S0array, icelat_warming, 'b-', label='warming' )\nax.plot(S0array3, icelat3, 'g-', label='warming' )\nax.plot(S0array_snowballmelt, icelat_snowballmelt, 'b-' )\nax.plot(S0array_snowballmelt, icelat_snowballmelt_cooling, 'r-' )\nax.set_ylim(-10,100)\nax.set_yticks((0,15,30,45,60,75,90))\nax.grid()\nax.set_ylabel('Ice edge latitude', fontsize=16)\nax.set_xlabel('Solar constant (W m$^{-2}$)', fontsize=16)\nax.plot( [const.S0, const.S0], [-10, 100], 'k--', label='present-day' )\nax.legend(loc='upper left')\nax.set_title('Solar constant versus ice edge latitude in the EBM with albedo feedback', fontsize=16);\n\nThe upshot:\n\nFor extremely large S_0, the only possible climate is a hot Earth with no ice.\n\nFor extremely small S_0, the only possible climate is a cold Earth completely covered in ice.\n\nFor a large range of S_0 including the present-day value, more than one climate is possible!\n\nOnce we get into a Snowball Earth state, getting out again is rather difficult!\n\n","type":"content","url":"/courseware/advanced-snowball-earth#how-to-un-freeze-the-snowball","position":21},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"Credits"},"type":"lvl2","url":"/courseware/advanced-snowball-earth#credits","position":22},{"hierarchy":{"lvl1":"Advanced topic: Snowball Earth and Large Ice Cap Instability in the EBM","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/advanced-snowball-earth#credits","position":23},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM"},"type":"lvl1","url":"/courseware/albedo-snowball","position":0},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/albedo-snowball","position":1},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"1. Review of the 1D EBM"},"type":"lvl2","url":"/courseware/albedo-snowball#id-1-review-of-the-1d-ebm","position":2},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"1. Review of the 1D EBM"},"content":"\n\nLast time we derived the equation for the one-dimensional EBM with diffusive heat transport:\n\nC \\frac{\\partial T}{\\partial t} = (1-\\alpha) ~ Q - \\left( A + B~T \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T}{\\partial \\phi} \\right)\n\nWe have chosen the following parameter values, which seems to give a reasonable fit to the observed annual mean temperature and energy budget:\n\n A = 210 ~ \\text{W m}^{-2} (emission at 0°C)\n\n B = 2 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1}  (increase in emission per degree, related to net longwave climate feedback)\n\n D = 0.6 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1}  (thermal diffusivity of the climate system)\n\nWe looked at the adjustment of this model to equilibrium, with annual mean insolation \\overline{Q(\\phi)} and specified albedo \\alpha(\\phi) (giving a reasonable fit to observations).\n\nWe also tuned the diffuvisity D so that our annual mean solution has a reasonable pole-to-equator temperature gradient and peak poleward heat transport.\n\nActually for the new version of this model with interactive ice line, we are going to reduce the diffusivity down to  D = 0.55 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1} .\n\n","type":"content","url":"/courseware/albedo-snowball#id-1-review-of-the-1d-ebm","position":3},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"2. Interactive snow/ice line in the EBM"},"type":"lvl2","url":"/courseware/albedo-snowball#id-2-interactive-snow-ice-line-in-the-ebm","position":4},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"2. Interactive snow/ice line in the EBM"},"content":"\n\nWhat we want to do today is introduce another process into our model: an interactive snow and ice line.\n\nThe idea is simply that, as the climate gets warmer, the snow and ice will retreat poleward, and the planetary albedo will decrease (or vice-versa).\n\nWe modeled this in the zero-dimensional model by using a kind of ramp function for the global mean albedo as a function of global mean temperature.\n\nHere, since our model resolves temperature at each latitude, we want to do something more physical: suppose that the surface is covered in ice and snow wherever the temperature is below some threshold T_f.\n\n","type":"content","url":"/courseware/albedo-snowball#id-2-interactive-snow-ice-line-in-the-ebm","position":5},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Temperature-dependent ice line","lvl2":"2. Interactive snow/ice line in the EBM"},"type":"lvl3","url":"/courseware/albedo-snowball#temperature-dependent-ice-line","position":6},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Temperature-dependent ice line","lvl2":"2. Interactive snow/ice line in the EBM"},"content":"Let the surface albedo be larger wherever the temperature is below some threshold T_f:\\alpha\\left(\\phi, T(\\phi) \\right) = \\left\\{\\begin{array}{ccc} \n\\alpha_0 + \\alpha_2 P_2(\\sin\\phi) & ~ & T(\\phi) > T_f  & \\text{(no ice)} \\\\\na_i & ~ & T(\\phi) \\le T_f & \\text{(ice-covered)} \\\\\n\\end{array} \\right.\n\nwhere P_2(\\sin\\phi) = \\frac{1}{2}\\left( 3\\left(\\sin\\phi\\right)^2 - 1 \\right)  is called the second Legendre Polynomial (just a mathematically convenient description of a smooth variation between the equator and pole).\n\nEmpirically, we follow classic work by \n\nBudyko (1969) and set the threshold temperatureT_f = -10^\\circ\\text{C}\n\nThis is known as a “step function” formula, because the value of \\alpha steps or jumps up to a higher value as we cross the ice line.\n\n","type":"content","url":"/courseware/albedo-snowball#temperature-dependent-ice-line","position":7},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"3. Solving the EBM with variable snow/ice line in CLIMLAB"},"type":"lvl2","url":"/courseware/albedo-snowball#id-3-solving-the-ebm-with-variable-snow-ice-line-in-climlab","position":8},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"3. Solving the EBM with variable snow/ice line in CLIMLAB"},"content":"\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport climlab\nfrom climlab import constants as const\n\n#  for convenience, set up a dictionary with our reference parameters\nparam = {'D':0.55, 'A':210, 'B':2, 'a0':0.3, 'a2':0.078, 'ai':0.62, 'Tf':-10.}\nmodel1 = climlab.EBM_annual(name='EBM with interactive ice line',\n                            num_lat=180, \n                            D=0.55, \n                            A=210., \n                            B=2., \n                            Tf=-10., \n                            a0=0.3, \n                            a2=0.078, \n                            ai=0.62)\nprint(model1)\n\nBecause we provided a parameter ai for the icy albedo, our model now contains several sub-processes contained within the process called albedo. Together these implement the step-function formula above.\n\nThe process called iceline simply looks for grid cells with temperature below T_f.\n\nprint(model1.param)\n\n#  A python shortcut... we can use the dictionary to pass lots of input arguments simultaneously:\n\n#  same thing as before, but written differently:\nmodel1 = climlab.EBM_annual(name='EBM with interactive ice line',\n                            num_lat=180,\n                            **param)\nprint(model1)\n\ndef ebm_plot(e, return_fig=False):    \n    templimits = -60,32\n    radlimits = -340, 340\n    htlimits = -6,6\n    latlimits = -90,90\n    lat_ticks = np.arange(-90,90,30)\n    \n    fig = plt.figure(figsize=(8,12))\n\n    ax1 = fig.add_subplot(3,1,1)\n    ax1.plot(e.lat, e.Ts)\n    ax1.set_ylim(templimits)\n    ax1.set_ylabel('Temperature (°C)')\n    \n    ax2 = fig.add_subplot(3,1,2)\n    ax2.plot(e.lat, e.ASR, 'k--', label='SW' )\n    ax2.plot(e.lat, -e.OLR, 'r--', label='LW' )\n    ax2.plot(e.lat, e.net_radiation, 'c-', label='net rad' )\n    ax2.plot(e.lat, e.heat_transport_convergence, 'g--', label='dyn' )\n    ax2.plot(e.lat, e.net_radiation + e.heat_transport_convergence, 'b-', label='total' )\n    ax2.set_ylim(radlimits)\n    ax2.set_ylabel('Energy budget (W m$^{-2}$)')\n    ax2.legend()\n    \n    ax3 = fig.add_subplot(3,1,3)\n    ax3.plot(e.lat_bounds, e.heat_transport )\n    ax3.set_ylim(htlimits)\n    ax3.set_ylabel('Heat transport (PW)')\n    \n    for ax in [ax1, ax2, ax3]:\n        ax.set_xlabel('Latitude')\n        ax.set_xlim(latlimits)\n        ax.set_xticks(lat_ticks)\n        ax.grid()\n    \n    if return_fig:\n        return fig\n\nmodel1.integrate_years(5)\n\nDiagnostics in this model are mostly on the latitude axis, e.g.:\n\nmodel1.ASR.to_xarray()\n\nThere is a built-in utility to take properly area-weighted global averages!\n\nThis gives us the net global energy imbalance:\n\nclimlab.global_mean(model1.ASR - model1.OLR)\n\nThere is also a built-in diagnostic net_radiation that has the same information (i.e. ASR - OLR):\n\nclimlab.global_mean(model1.net_radiation)\n\nSince it’s not fully equilibrated yet, we can run it out a little longer:\n\n# Integrate out to equilibrium.\nmodel1.integrate_years(5)\n#  Check for energy balance\nprint(climlab.global_mean(model1.net_radiation))\nf = ebm_plot(model1)\n\n#  There is a diagnostic that tells us the current location of the ice edge:\nmodel1.icelat\n\nThis model is tuned up to reasonable “present-day” conditions.\n\n","type":"content","url":"/courseware/albedo-snowball#id-3-solving-the-ebm-with-variable-snow-ice-line-in-climlab","position":9},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"4. Polar-amplified warming in the EBM"},"type":"lvl2","url":"/courseware/albedo-snowball#id-4-polar-amplified-warming-in-the-ebm","position":10},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"4. Polar-amplified warming in the EBM"},"content":"\n\n","type":"content","url":"/courseware/albedo-snowball#id-4-polar-amplified-warming-in-the-ebm","position":11},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Add a small radiative forcing","lvl2":"4. Polar-amplified warming in the EBM"},"type":"lvl3","url":"/courseware/albedo-snowball#add-a-small-radiative-forcing","position":12},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Add a small radiative forcing","lvl2":"4. Polar-amplified warming in the EBM"},"content":"The equivalent of doubling CO2 in this model is something likeA \\rightarrow A - \\delta A\n\nwhere \\delta A = 4 W m^{-2}.\n\nmodel1.subprocess['LW'].A\n\ndeltaA = 4.\n\n#  This is a very handy way to \"clone\" an existing model:\nmodel2 = climlab.process_like(model1)\n\n#  Now change the longwave parameter:\nmodel2.subprocess['LW'].A = param['A'] - deltaA\n#  and integrate out to equilibrium again\nmodel2.integrate_years(5, verbose=False)\n\nplt.plot(model1.lat, model1.Ts, label='model1')\nplt.plot(model2.lat, model2.Ts, label='model2')\nplt.legend(); plt.grid()\n\nThe warming is polar-amplified:  more warming at the poles than elsewhere.\n\nWhy?\n\nAlso, the current ice line is now:\n\nmodel2.icelat\n\nThere is no ice left!\n\nLet’s do some more greenhouse warming:\n\nmodel3 = climlab.process_like(model1)\nmodel3.subprocess['LW'].A = param['A'] - 2*deltaA\nmodel3.integrate_years(5, verbose=False)\n\nplt.plot(model1.lat, model1.Ts, label='model1')\nplt.plot(model2.lat, model2.Ts, label='model2')\nplt.plot(model3.lat, model3.Ts, label='model3')\nplt.xlim(-90, 90)\nplt.grid()\nplt.legend()\n\nIn the ice-free regime, there is no polar-amplified warming. A uniform radiative forcing produces a uniform warming.\n\n","type":"content","url":"/courseware/albedo-snowball#add-a-small-radiative-forcing","position":13},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"5. A different kind of climate forcing: changing the solar constant"},"type":"lvl2","url":"/courseware/albedo-snowball#id-5-a-different-kind-of-climate-forcing-changing-the-solar-constant","position":14},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"5. A different kind of climate forcing: changing the solar constant"},"content":"\n\nHistorically EBMs have been used to study the climatic response to a change in the energy output from the Sun.\n\nWe can do that easily with climlab:\n\nm = climlab.EBM_annual(num_lat=180, **param)\n#  The current (default) solar constant, corresponding to present-day conditions:\nm.subprocess.insolation.S0\n\n","type":"content","url":"/courseware/albedo-snowball#id-5-a-different-kind-of-climate-forcing-changing-the-solar-constant","position":15},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"What happens if we decrease S_0?","lvl2":"5. A different kind of climate forcing: changing the solar constant"},"type":"lvl3","url":"/courseware/albedo-snowball#what-happens-if-we-decrease-s-0","position":16},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"What happens if we decrease S_0?","lvl2":"5. A different kind of climate forcing: changing the solar constant"},"content":"\n\n#  First, get to equilibrium\nm.integrate_years(5.)\n#  Check for energy balance\nclimlab.global_mean(m.net_radiation)\n\nm.icelat\n\n#  Now make the solar constant smaller:\nm.subprocess.insolation.S0 = 1300.\n\n#  Integrate to new equilibrium\nm.integrate_years(10.)\n#  Check for energy balance\nclimlab.global_mean(m.net_radiation)\n\nm.icelat\n\nebm_plot(m)\n\nA much colder climate!  The ice line is sitting at 54º. The heat transport shows that the atmosphere is moving lots of energy across the ice line, trying hard to compensate for the strong radiative cooling everywhere poleward of the ice line.\n\n","type":"content","url":"/courseware/albedo-snowball#what-happens-if-we-decrease-s-0","position":17},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"6. The large ice cap instability"},"type":"lvl2","url":"/courseware/albedo-snowball#id-6-the-large-ice-cap-instability","position":18},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"6. The large ice cap instability"},"content":"\n\n","type":"content","url":"/courseware/albedo-snowball#id-6-the-large-ice-cap-instability","position":19},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"What happens if we decrease S_0 even more?","lvl2":"6. The large ice cap instability"},"type":"lvl3","url":"/courseware/albedo-snowball#what-happens-if-we-decrease-s-0-even-more","position":20},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"What happens if we decrease S_0 even more?","lvl2":"6. The large ice cap instability"},"content":"\n\n#  Now make the solar constant smaller:\nm.subprocess.insolation.S0 = 1200.\n#  First, get to equilibrium\nm.integrate_years(5.)\n#  Check for energy balance\nclimlab.global_mean(m.net_radiation)\n\nm.integrate_years(10.)\n#  Check for energy balance\nclimlab.global_mean(m.net_radiation)\n\nebm_plot(m)\n\nSomething very different happened! Where is the ice line now?\n\nm.icelat\n\n","type":"content","url":"/courseware/albedo-snowball#what-happens-if-we-decrease-s-0-even-more","position":21},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Now what happens if we set S_0 back to its present-day value?","lvl2":"6. The large ice cap instability"},"type":"lvl3","url":"/courseware/albedo-snowball#now-what-happens-if-we-set-s-0-back-to-its-present-day-value","position":22},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Now what happens if we set S_0 back to its present-day value?","lvl2":"6. The large ice cap instability"},"content":"\n\n#  Now make the solar constant smaller:\nm.subprocess.insolation.S0 = 1365.2\n#  First, get to equilibrium\nm.integrate_years(5.)\n#  Check for energy balance\nclimlab.global_mean(m.net_radiation)\n\nebm_plot(m)\n\nIs this the same climate we started with?\n\nThis is an example of a hysteresis in the climate system:  the state of the climate depends on its history!\n\nA global cooling caused snow and ice to expand to the equator\n\nExternal conditions (i.e. the solar constant) returned back to its present-day value\n\nThe climate stayed cold and completely ice-covered.\n\nIf the oceans froze over and the Earth were covered in ice and snow today, it would remain that way!\n\n","type":"content","url":"/courseware/albedo-snowball#now-what-happens-if-we-set-s-0-back-to-its-present-day-value","position":23},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"7. The Neoproterozoic Snowball Earth"},"type":"lvl2","url":"/courseware/albedo-snowball#id-7-the-neoproterozoic-snowball-earth","position":24},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"7. The Neoproterozoic Snowball Earth"},"content":"\n\n","type":"content","url":"/courseware/albedo-snowball#id-7-the-neoproterozoic-snowball-earth","position":25},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"The Geologic Time Scale","lvl2":"7. The Neoproterozoic Snowball Earth"},"type":"lvl3","url":"/courseware/albedo-snowball#the-geologic-time-scale","position":26},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"The Geologic Time Scale","lvl2":"7. The Neoproterozoic Snowball Earth"},"content":"First, some information on the nomenclature for Earth history \n\nWalker & Geissman, 2009:\n\n\n\nThe long view of glacial epochs on Earth \n\nHoffman et al., 2017:\n\n","type":"content","url":"/courseware/albedo-snowball#the-geologic-time-scale","position":27},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Extensive evidence for large glaciers at sea level in the tropics","lvl2":"7. The Neoproterozoic Snowball Earth"},"type":"lvl3","url":"/courseware/albedo-snowball#extensive-evidence-for-large-glaciers-at-sea-level-in-the-tropics","position":28},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"Extensive evidence for large glaciers at sea level in the tropics","lvl2":"7. The Neoproterozoic Snowball Earth"},"content":"Evidently the climate was very cold at these times (635 Ma and 715 Ma) \n\nHoffman & Li, 2009:\n\n","type":"content","url":"/courseware/albedo-snowball#extensive-evidence-for-large-glaciers-at-sea-level-in-the-tropics","position":29},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"The Snowball Earth hypothesis","lvl2":"7. The Neoproterozoic Snowball Earth"},"type":"lvl3","url":"/courseware/albedo-snowball#the-snowball-earth-hypothesis","position":30},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"The Snowball Earth hypothesis","lvl2":"7. The Neoproterozoic Snowball Earth"},"content":"Various bizarre features in the geological record from 635 and 715 Ma ago indicate that the Earth underwent some very extreme environmental changes… at least twice. The Snowball Earth hypothesis postulates that:\n\nThe Earth was completely ice-covered (including the oceans)\n\nThe total glaciation endured for millions of years\n\nCO_2 slowly accumulated in the atmosphere from volcanoes\n\nWeathering of rocks (normally acting to reduce CO_2) extremely slow due to cold, dry climate\n\nEventually the extreme greenhouse effect is enough to melt back the ice\n\nThe Earth then enters a period of extremely hot climate.\n\nThe hypothesis rests on a phenomenon first discovered by climate modelers in the Budyko-Sellers EBM: runaway ice-albedo feedback or large ice cap instability.\n\n","type":"content","url":"/courseware/albedo-snowball#the-snowball-earth-hypothesis","position":31},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"8. Computing the complete hysteresis curve for the 1D diffusive EBM"},"type":"lvl2","url":"/courseware/albedo-snowball#id-8-computing-the-complete-hysteresis-curve-for-the-1d-diffusive-ebm","position":32},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"8. Computing the complete hysteresis curve for the 1D diffusive EBM"},"content":"\n\nWarning\n\nThe calculations in this section may take a long time to complete, depending on the speed of your computer.\n\nThe ice edge in our model is always where the temperature crosses T_f = -10^\\circC. The system is at equilibrium when the temperature is such that there is a balance between ASR, OLR, and heat transport convergence everywhere.\n\nSuppose that sun was hotter or cooler at different times (in fact it was significantly cooler during early Earth history). That would mean that the solar constant S_0 = 4Q was larger or smaller. We should expect that the temperature (and thus the ice edge) should increase and decrease as we change S_0.\n\nS_0 during the Neoproterozoic Snowball Earth events is believed to be about 93% of its present-day value, or about 1270 W m^{-2}.\n\nWe are going to look at how the equilibrium ice edge depends on S_0, by integrating the model out to equilibrium for lots of different values of S_0. We will start by slowly decreasing S_0, and then slowly increasing S_0.\n\nmodel2 = climlab.EBM_annual(num_lat = 360, **param)\nS0array = np.linspace(1400., 1200., 200)\nmodel2.integrate_years(5)\nicelat_cooling = np.empty_like(S0array)\nicelat_warming = np.empty_like(S0array)\n# First cool....\nfor n in range(S0array.size):\n    model2.subprocess['insolation'].S0 = S0array[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_cooling[n] = np.max(model2.icelat)\n# Then warm...\nfor n in range(S0array.size):\n    model2.subprocess['insolation'].S0 = np.flipud(S0array)[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_warming[n] = np.max(model2.icelat)\n# For completeness -- also start from present-day conditions and warm up.\nmodel3 = climlab.EBM_annual(num_lat=360, **param)\nS0array3 = np.linspace(1350., 1400., 50)\nicelat3 = np.empty_like(S0array3)\nfor n in range(S0array3.size):\n    model3.subprocess['insolation'].S0 = S0array3[n]\n    model3.integrate_years(10, verbose=False)\n    icelat3[n] = np.max(model3.icelat)\n\nfig = plt.figure( figsize=(10,6) )\nax = fig.add_subplot(111)\nax.plot(S0array, icelat_cooling, 'r-', label='cooling' )\nax.plot(S0array, icelat_warming, 'b-', label='warming' )\nax.plot(S0array3, icelat3, 'g-', label='warming' )\nax.set_ylim(-10,100)\nax.set_yticks((0,15,30,45,60,75,90))\nax.grid()\nax.set_ylabel('Ice edge latitude', fontsize=16)\nax.set_xlabel('Solar constant (W m$^{-2}$)', fontsize=16)\nax.plot( [const.S0, const.S0], [-10, 100], 'k--', label='present-day' )\nax.legend(loc='upper left')\nax.set_title('Solar constant versus ice edge latitude in the EBM with albedo feedback', fontsize=16);\n\nThere are actually up to 3 different climates possible for a given value of S_0!\n\n","type":"content","url":"/courseware/albedo-snowball#id-8-computing-the-complete-hysteresis-curve-for-the-1d-diffusive-ebm","position":33},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"How to un-freeze the Snowball","lvl2":"8. Computing the complete hysteresis curve for the 1D diffusive EBM"},"type":"lvl3","url":"/courseware/albedo-snowball#how-to-un-freeze-the-snowball","position":34},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl3":"How to un-freeze the Snowball","lvl2":"8. Computing the complete hysteresis curve for the 1D diffusive EBM"},"content":"\n\nThe graph indicates that if the Earth were completely frozen over, it would be perfectly happy to stay that way even if the sun were brighter and hotter than it is today.\n\nOur EBM predicts that (with present-day parameters) the equilibrium temperature at the equator in the Snowball state is about -33ºC, which is much colder than the threshold temperature T_f = -10^\\circC. How can we melt the Snowball?\n\nWe need to increase the avaible energy sufficiently to get the equatorial temperatures above this threshold! That is going to require a much larger increase in S_0 (could also increase the greenhouse gases, which would have a similar effect)!\n\nLet’s crank up the sun to 1830 W m^{-2} (about a 35% increase from present-day).\n\nmy_ticks = [-90,-60,-30,0,30,60,90]\n\nmodel4 = climlab.process_like(model2)  # initialize with cold Snowball temperature\nmodel4.subprocess['insolation'].S0 = 1830.\nmodel4.integrate_years(40)\nplt.plot(model4.lat, model4.Ts)\nplt.xlim(-90,90); plt.ylabel('Temperature (°C)'); plt.xlabel('Latitude')\nplt.grid(); plt.xticks(my_ticks)\nprint('The ice edge is at ' + str(model4.icelat) + ' degrees latitude.' )\n\nStill a Snowball... but just barely! The temperature at the equator is just below the threshold.\n\nTry to imagine what might happen once it starts to melt. The solar constant is huge, and if it weren’t for the highly reflective ice and snow, the climate would be really really hot!\n\nWe’re going to increase S_0 one more time...\n\nmodel4.subprocess['insolation'].S0 = 1840.\nmodel4.integrate_years(10)\nplt.plot(model4.lat, model4.Ts)\nplt.xlim(-90,90); plt.ylabel('Temperature (°C)'); plt.xlabel('Latitude')\nplt.grid(); plt.xticks(my_ticks);\n\nSuddenly the climate looks very very different again! The global mean temperature is\n\nmodel4.global_mean_temperature()\n\nA roasty 58ºC, and the poles are above 20ºC. A tiny increase in S_0 has led to a very drastic change in the climate.\n\nNow we will complete the plot of ice edge versus solar constant.\n\nS0array_snowballmelt = np.linspace(1400., 1900., 50)\nicelat_snowballmelt = np.empty_like(S0array_snowballmelt)\nicelat_snowballmelt_cooling = np.empty_like(S0array_snowballmelt)\n\nfor n in range(S0array_snowballmelt.size):\n    model2.subprocess['insolation'].S0 = S0array_snowballmelt[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_snowballmelt[n] = np.max(model2.icelat)\n    \nfor n in range(S0array_snowballmelt.size):\n    model2.subprocess['insolation'].S0 = np.flipud(S0array_snowballmelt)[n]\n    model2.integrate_years(10, verbose=False)\n    icelat_snowballmelt_cooling[n] = np.max(model2.icelat)\n\nfig = plt.figure( figsize=(18,6) )\nax = fig.add_subplot(111)\nax.plot(S0array, icelat_cooling, 'r-', label='cooling' )\nax.plot(S0array, icelat_warming, 'b-', label='warming' )\nax.plot(S0array3, icelat3, 'g-', label='warming' )\nax.plot(S0array_snowballmelt, icelat_snowballmelt, 'b-' )\nax.plot(S0array_snowballmelt, icelat_snowballmelt_cooling, 'r-' )\nax.set_ylim(-10,100)\nax.set_yticks((0,15,30,45,60,75,90))\nax.grid()\nax.set_ylabel('Ice edge latitude', fontsize=16)\nax.set_xlabel('Solar constant (W m$^{-2}$)', fontsize=16)\nax.plot( [const.S0, const.S0], [-10, 100], 'k--', label='present-day' )\nax.legend(loc='upper left')\nax.set_title('Solar constant versus ice edge latitude in the EBM with albedo feedback', fontsize=16);\n\nThe upshot:\n\nFor extremely large S_0, the only possible climate is a hot Earth with no ice.\n\nFor extremely small S_0, the only possible climate is a cold Earth completely covered in ice.\n\nFor a large range of S_0 including the present-day value, more than one climate is possible!\n\nOnce we get into a Snowball Earth state, getting out again is rather difficult!\n\n","type":"content","url":"/courseware/albedo-snowball#how-to-un-freeze-the-snowball","position":35},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"Credits"},"type":"lvl2","url":"/courseware/albedo-snowball#credits","position":36},{"hierarchy":{"lvl1":"Ice-albedo feedback and Snowball Earth in the EBM","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/albedo-snowball#credits","position":37},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model"},"type":"lvl1","url":"/courseware/analytical-efolding","position":0},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/analytical-efolding","position":1},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"1. The zero-dimensional Energy Balance Model: recap"},"type":"lvl2","url":"/courseware/analytical-efolding#id-1-the-zero-dimensional-energy-balance-model-recap","position":2},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"1. The zero-dimensional Energy Balance Model: recap"},"content":"\n\nIn the \n\nprevious lecture we considered a zero-dimensional Energy Balance Model with the governing equationC \\frac{dT_s}{dt} = (1-\\alpha) Q - \\tau \\sigma T_s^4\n\nwhere\n\nT_s is the global average surface temperature\n\nC is the heat capacity of Earth system, in units of J m^{-2} K^{-1}.\n\n\\tau is the transmissivity of the atmosphere (a measure of the strength of the greenhouse effect).\n\nWe have seen that numerical solutions of this time-dependent model are easy to implement. However the model is solvable analytically once we make a (very good) approximation by linearing the OLR in terms of departures from equilibrium.\n\nThe analytical solutions will give us considerable insight into what’s actually going on in the model.\n\n","type":"content","url":"/courseware/analytical-efolding#id-1-the-zero-dimensional-energy-balance-model-recap","position":3},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"2. Linearizing about the equilibrium solution"},"type":"lvl2","url":"/courseware/analytical-efolding#id-2-linearizing-about-the-equilibrium-solution","position":4},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"2. Linearizing about the equilibrium solution"},"content":"\n\n","type":"content","url":"/courseware/analytical-efolding#id-2-linearizing-about-the-equilibrium-solution","position":5},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl3":"Equilibrium solutions","lvl2":"2. Linearizing about the equilibrium solution"},"type":"lvl3","url":"/courseware/analytical-efolding#equilibrium-solutions","position":6},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl3":"Equilibrium solutions","lvl2":"2. Linearizing about the equilibrium solution"},"content":"We’ve already seen that the equilibrium solution of the model isT_{eq} = \\left( \\frac{(1-\\alpha) Q}{\\tau \\sigma} \\right)^\\frac{1}{4}\n\nand tuned the model parameter based on this relationship.\n\nWe are going to linearize the equation for small perturbations away from this equilibrium.\n\nLet T_s = T_{eq} + T_s^\\prime and restrict our solution to T_s^\\prime << T_{eq}.\n\nNote this this is not a big restriction! For example, a 10 degree warming or cooling is just ±3.4% of the absolute equilibrium temperature.\n\n","type":"content","url":"/courseware/analytical-efolding#equilibrium-solutions","position":7},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl3":"Linearizing the governing equation","lvl2":"2. Linearizing about the equilibrium solution"},"type":"lvl3","url":"/courseware/analytical-efolding#linearizing-the-governing-equation","position":8},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl3":"Linearizing the governing equation","lvl2":"2. Linearizing about the equilibrium solution"},"content":"Now use a first-order Taylor series expansion to write\\text{OLR} = \\tau \\sigma T_s^4OLR = \\tau \\sigma T_s^4 = \\tau \\sigma \\left( T_{eq} + T_s^\\prime \\right)^4  \\approx \\tau \\sigma \\left( T_{eq}^4 + 4 T_{eq}^3 T_s^\\prime \\right)\n\nand the budget for the perturbation temperature thus becomesC \\frac{d T_s^\\prime}{d t} = -\\lambda_0 T_s^\\prime\n\nwhere we define\\lambda_0 = 4 \\tau \\sigma T_{eq}^3\n\nPutting in our observational values, we get\n\nOLRobserved = 238.5  # in W/m2\nsigma = 5.67E-8  # S-B constant\nTsobserved = 288.  # global average surface temperature\ntau = OLRobserved / sigma / Tsobserved**4  # solve for tuned value of transmissivity\n\nlambda_0 = 4 * sigma * tau * Tsobserved**3\n#  This is an example of formatted text output in Python\nprint( 'lambda_0 = {:.2f} W m-2 K-1'.format(lambda_0)  )\n\nThis is actually our first estimate of what is often called the Planck feedback (though the Planck feedback parameter is more properly -\\lambda_0, i.e. a negative number, since it acts as a negative feedback).\n\nIt is the tendency for a warm surface to cool by increased longwave radiation to space.\n\nIt may also be refered to as the “no-feedback” climate response parameter. As we will see, \\lambda_0 quantifies the sensitivity of the climate system in the absence of any actual feedback processes.\n\n","type":"content","url":"/courseware/analytical-efolding#linearizing-the-governing-equation","position":9},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"3. Solving the linear ODE"},"type":"lvl2","url":"/courseware/analytical-efolding#id-3-solving-the-linear-ode","position":10},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"3. Solving the linear ODE"},"content":"\n\nNow definet^* = \\frac{C}{\\lambda_0}\n\nThis is a positive constant with dimensions of time (seconds). With these definitions the temperature evolves according to\\frac{d T_s^\\prime}{d t} = - \\frac{T_s^\\prime}{t^*}\n\nThis is one of the simplest ODEs. Hopefully it looks familiar to most of you. It is the equation for an exponential decay process.\n\nWe can easily solve for the temperature evolution by integrating from an initial condition T_s^\\prime(0):\\int_{T_s^\\prime(0)}^{T_s^\\prime(t)} \\frac{d T_s^\\prime}{T_s^\\prime} = -\\int_0^t  \\frac{dt}{t^*}\\ln \\bigg( \\frac{T_s^\\prime(t)}{T_s^\\prime(0)} \\bigg) = -\\frac{t}{t^*}T_s^\\prime(t) = T_s^\\prime(0) \\exp \\bigg(-\\frac{t}{t^*} \\bigg)\n\nI hope that the mathematics is straightforward for everyone in this class. If not, go through it carefully and make sure you understand each step.\n\n","type":"content","url":"/courseware/analytical-efolding#id-3-solving-the-linear-ode","position":11},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"4. e-folding time for relaxation of global mean temperature"},"type":"lvl2","url":"/courseware/analytical-efolding#id-4-e-folding-time-for-relaxation-of-global-mean-temperature","position":12},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"4. e-folding time for relaxation of global mean temperature"},"content":"\n\nOur model says that surface temperature will relax toward its equilibrium value over a characteristic time scale t^*. This is an e-folding time – the time it takes for the perturbation to decay by a factor 1/e = 0.37\n\nWhat should this timescale be for the climate system?\n\nTo estimate t^* we need a value for the effective heat capacity C.\n\nOur “quick and dirty” estimate above used 100 meters of water to set this heat capacity.\n\n","type":"content","url":"/courseware/analytical-efolding#id-4-e-folding-time-for-relaxation-of-global-mean-temperature","position":13},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl4":"What is the right choice for water depth H?","lvl2":"4. e-folding time for relaxation of global mean temperature"},"type":"lvl4","url":"/courseware/analytical-efolding#what-is-the-right-choice-for-water-depth-h","position":14},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl4":"What is the right choice for water depth H?","lvl2":"4. e-folding time for relaxation of global mean temperature"},"content":"That turns out to be an interesting and subtle question. It depends very much on the timescale of the problem\n\ndays?\n\nyears?\n\ndecades?\n\nmillenia?\n\nWe will revisit this question later in the course. For now, let’s just continue assuming H = 100 m (a bit deeper than the typical depth of the surface mixed layer in the oceans).\n\nNow calculate the e-folding time for the surface temperature:\n\nc_w = 4E3  #  Specific heat of water in J/kg/K\nrho_w = 1E3  #  Density of water in kg/m3\nH = 100.   #  Depth of water in m\nC = c_w * rho_w * H   #  Heat capacity of the model \n\ntstar = C / lambda_0   #  Calculated value of relaxation time constant\nseconds_per_year = 60.*60.*24.*365.\nprint( 'The e-folding time is {:1.2e} seconds or about {:1.0f} years.'.format(tstar, tstar / seconds_per_year))\n\nThis is a rather fast timescale relative to other processes that can affect the planetary energy budget.\n\nBut notice that if the climate feedback parameter \\lambda is smaller, the timescale gets longer.  We will come back to this later.\n\n","type":"content","url":"/courseware/analytical-efolding#what-is-the-right-choice-for-water-depth-h","position":15},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"5. Summary"},"type":"lvl2","url":"/courseware/analytical-efolding#id-5-summary","position":16},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"5. Summary"},"content":"\n\nWe can solve the zero-dimensional EBM by linearizing the fourth-power dependence of OLR on temperature.\n\nThe result is a simple exponential decay model.\n\nThe system will tend to relax toward its equilibrium temperature on an e-folding timescale that depends on\n\nradiative feedback processes, and\n\neffective heat capacity.\n\nIn our estimate, this e-folding time is relatively short.\n\nIn the absence of other processes that can either increase the heat capacity or lower (in absolute value) the feedback parameter, the Earth would never be very far out of energy balance.\n\nWe will quantify this statement more as the term progresses.\n\n","type":"content","url":"/courseware/analytical-efolding#id-5-summary","position":17},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"Credits"},"type":"lvl2","url":"/courseware/analytical-efolding#credits","position":18},{"hierarchy":{"lvl1":"Advanced topic: Analytical solution of the global Energy Balance Model","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/analytical-efolding#credits","position":19},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations"},"type":"lvl1","url":"/courseware/assignment-cesm-climate-change","position":0},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change","position":1},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 1"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-1","position":2},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 1"},"content":"Following the examples in the \n\nlecture notes, open the four CESM simulations (fully coupled and slab ocean versions).\n\nCalculate timeseries of global mean ASR and OLR and store each of these as a new variable. Recall that ASR is called FSNT in the CESM output, and OLR is called FLNT.\n\nPlot a timeseries of (ASR - OLR), the net downward energy flux at the top of the model, along with a 12 month rolling mean, analogous to the plot of global mean surface air temperature in the lecture notes.\n\nNote that the rolling mean is important here because, just like with surface air temperature, there is a large seasonal cycle which makes it harder to see evidence of the climate change signal we wish to focus on.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-1","position":3},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 2"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-2","position":4},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 2"},"content":"Calculate and show the time-average ASR and time-average OLR over the final 10 or 20 years of each simulation. Following the lecture notes, use the 20-year slice for the fully coupled simulations, and the 10-year slice for the slab ocean simulations.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-2","position":5},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 3"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-3","position":6},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 3"},"content":"Based on your plots and numerical results from Parts 1 and 2, answer these questions:\n\nAre the two control simulations (fully coupled and slab ocean) near energy balance?\n\nIn the fully coupled CO2 ramp simulation, does the energy imbalance (ASR-OLR) increase or decrease with time? What is the imbalance at the end of the 80 year simulation?\n\nAnswer the same questions for the slab ocean abrupt 2xCO2 simulation.\n\nExplain in words why the timeseries of ASR-OLR look very different in the fully coupled simulation (1%/year CO2 ramp) versus the slab ocean simulation (abrupt 2xCO2). Think about both the different radiative forcings and the different ocean heat capacities.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-3","position":7},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 4"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-4","position":8},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 4"},"content":"Does the global average ASR increase or decrease because of CO2-driven warming in the CESM?\n\nWould you describe this as a positive or negative feedback?\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-4","position":9},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 5"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-5","position":10},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 5"},"content":"In the previous question you looked at the global average change in ASR. Now I want you to look at how different parts of the world contribute to this change.\n\nMake a map of the change in ASR due to the CO2 forcing. Use the average over the last 20 years of the coupled CO2 ramp simulation, comparing against the average over the last 20 years of the control simulation.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-5","position":11},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 6"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-6","position":12},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 6"},"content":"Repeat part 5, but this time instead of the change in ASR, look at the just change in the clear-sky component of ASR. You can find this in the output field called FSNTC.\n\nThe FSNTC field shows shortwave absorption in the absence of clouds, so the change in FSNTC shows how absorption and reflection of shortwave are affected by processes other than clouds.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-6","position":13},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 7"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#part-7","position":14},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Part 7"},"content":"Discussion:\n\nDo your two maps (change in ASR, change in clear-sky ASR) look the same?\n\nOffer some ideas about why the clear-sky map looks the way it does.\n\nComment on anything interesting, unusual or surprising you found in the maps.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-climate-change#part-7","position":15},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-cesm-climate-change#credits","position":16},{"hierarchy":{"lvl1":"Assignment: Climate change in the CESM simulations","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-cesm-climate-change#credits","position":17},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment"},"type":"lvl1","url":"/courseware/assignment-cesm-control-hints","position":0},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints","position":1},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Preface"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#preface","position":2},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Preface"},"content":"In the homework assignment you are asked to compute various terms in the global-average energy budget from the CESM control simulation and compare them to the observations.\n\nIn the lecture notes, we walked through how to open the dataset and compute the time- and global averages.\n\nThe main challenge here is just understanding how to relate the diagnostic fields in the CESM output dataset to the quantities you are asked to calculate. I give some additional guidance here.\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#preface","position":3},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"What do we mean by “upwelling”, “downwelling”, “net”?"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#what-do-we-mean-by-upwelling-downwelling-net","position":4},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"What do we mean by “upwelling”, “downwelling”, “net”?"},"content":"To understand these terms, just picture the beam of radiation traveling between the surface of the Earth and the top of that atmosphere. “Downwelling” means traveling downward (i.e. toward the surface), and “upwelling” means traveling upward.\n\nThe beam of shortwave (solar) radiation arrives from the sun at the top of the atmosphere and travels downward. Some of that beam is reflected back upward. So the quantity we have denoted as Q in our notes, the total sunlight incident upon the Earth, is the downwelling shorwave flux at the top of the atmosphere. The upwelling shortwave flux at the top of the atmosphere is a number that is smaller than Q and represents the reflection.\n\nFor the longwave beam, it’s the same idea — there is a beam moving upward, or “upwelling”, and a beam moving downward, or “downwelling”. The difference is that this beam is generated by the Earth and the atmosphere itself.\nThe upwelling flux at the surface is the surface emission. The downwelling flux at the surface is the radiation absorbed by the surface (originating somewhere in the atmosphere).\n\nThe “net” flux is the difference between the upwelling and downwelling beams. We have to be careful about sign conventions! In the CESM data, “net” means net upward for longwave radiation, but net downward for shortwave radiation.\n\nThe net longwave flux at the top of the atmosphere is what we have called the Outgoing Longwave Radiation.\n\nThe net shortwave flux at the top of the atmosphere is what we have called the Absorbed Shortwave Radiation.\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#what-do-we-mean-by-upwelling-downwelling-net","position":5},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"From the lecture notes -- CESM naming conventions"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#from-the-lecture-notes-cesm-naming-conventions","position":6},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"From the lecture notes -- CESM naming conventions"},"content":"Reproduced from the lecture notes:\n\nThe model output contains lots of diagnostics about the radiative fluxes. Here are some CESM naming conventions to help you find the appropriate output fields:\n\nAll variables whose names being with 'F' are an energy flux of some kind.\n\nMost have a four-letter code, e.g. 'FLNT'\n\n'FL' means longwave flux (i.e. terrestrial)\n\n'FS' means shortwave flux (i.e. solar)\n\nThe third letter indicates direction of the flux:\n\n'U' = up\n\n'D' = down\n\n'N' = net\n\nThe fourth letter indicates the location of the flux:\n\n'T' = top of atmosphere\n\n'S' = surface\n\nSo 'FLNT' means ‘net longwave flux at the top of atmosphere’, i.e. the outgoing longwave radiation or OLR.\n\nYou wil see that these are all 240 x 96 x 144 -- i.e. a two-dimensional grid for every month in the simulation.\n\nThe one exception to this naming convention is that, as we saw in the lecture notes, the incoming solar radiation (or insolation) is not called FSDT (“Flux of Shortwave radiation Downward at the Top”) in the dataset but instead called SOLIN.\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#from-the-lecture-notes-cesm-naming-conventions","position":7},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Load the data and take a quick look"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#load-the-data-and-take-a-quick-look","position":8},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Load the data and take a quick look"},"content":"\n\nimport xarray as xr\n\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\n\nBased on the above name conventions, we should be able to find the downwelling longwave radiation at the surface as atm_control.FLDS, since it is “Flux of Longwave traveling Downward at the Surface”:\n\natm_control.FLDS\n\nSo that works!\n\nNow, let’s see if we can find the reflected shortwave radiation at the top of the atmosphere as atm_control.FSUT, since it is “Flux of Shortwave traveling Upward at the Top”.\n\natm_control.FSUT\n\nThis field is apparently not in the dataset!\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#load-the-data-and-take-a-quick-look","position":9},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Calculating fields that are missing from the dataset"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#calculating-fields-that-are-missing-from-the-dataset","position":10},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Calculating fields that are missing from the dataset"},"content":"Some of the fields we need are not directly stored in the dataset.\n\nBut that’s ok, because we have enough information to calculate them using simple arithmetic with the fields we do have.\n\nIn the case of our missing FSUT field, the key point is that we do have the “Net” field FSNT and the downwelling field SOLIN.\n\nSince the Net Flux is the difference:\n\nFSNT = SOLIN - FSUT\n\n(i.e. the difference between what’s coming in and what’s going out!)\n\nthen we can rearrange this to solve for our unknown field:\n\nFSUT = SOLIN - FSNT\n\nWe can do this kind of arithmetic with the xarray datasets:\n\n#  Take the difference between the downwelling shortwave flux at the net shortwave flux at the top of atmosphere\n#  The result is the upwelling flux, i.e. the reflected shortwave flux\n#   Store this difference in a new variable called FSUT\nFSUT = atm_control.SOLIN - atm_control.FSNT\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#calculating-fields-that-are-missing-from-the-dataset","position":11},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl3":"A few other derived field examples","lvl2":"Calculating fields that are missing from the dataset"},"type":"lvl3","url":"/courseware/assignment-cesm-control-hints#a-few-other-derived-field-examples","position":12},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl3":"A few other derived field examples","lvl2":"Calculating fields that are missing from the dataset"},"content":"In the homework I ask you calculate the longwave “Upward emission from the surface”. That should be FLUS\n\natm_control.FLUS\n\nSame problem as above, and same solution.\n\nWe have the downwelling flux FLDS (positive down), and the net flux FLNS (positive up). The net flux is defined as\n\nFLNS = FLUS - FLDS\n\nWe get the upward flux by rearranging:\n\nFLUS = FLNS + FLDS\n\nFLUS = atm_control.FLDS + atm_control.FLNS\n\nAll of us get confused about these sign conventions! It’s helpful to draw yourself a sketch of the fluxes going up and down.\n\nWe should also verify that our results make sense physically. If I take the global, time average of the FLUS field, it should be a large positive number!\n\nRemember that we are comparing to the observations, where the value is 396 W/m2.\n\n#  don't forget to take the area-weighted average!\nweight_factor2 = atm_control.gw / atm_control.gw.mean(dim='lat')\n#  I'm going to calculate the average and print it out, rounded to the second decimal place\nmyvalue = (FLUS*weight_factor2).mean(dim=('time','lat','lon')).values  \n# note that adding .values at the end of the expression gives me just the number without the metadata\nprint('Upwelling longwave radiation at the surface: {:.2f} W/m2'.format(myvalue))   \n# This is an example of a formatted print statement in Python\n\nThis apparently very close to the observed value, which is a good indicator that we did the calculation correctly.\n\n","type":"content","url":"/courseware/assignment-cesm-control-hints#a-few-other-derived-field-examples","position":13},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-cesm-control-hints#credits","position":14},{"hierarchy":{"lvl1":"Additional hints and guidance for CESM budgets assignment","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-cesm-control-hints#credits","position":15},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation"},"type":"lvl1","url":"/courseware/assignment-cesm-control","position":0},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-cesm-control","position":1},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Learning goals"},"type":"lvl2","url":"/courseware/assignment-cesm-control#learning-goals","position":2},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Learning goals"},"content":"Students completing this assignment will gain the following skills and concepts:\n\nContinued practice working with the Jupyter notebook\n\nFamiliarity with atmospheric output from the CESM simulation\n\nMore complete comparison of the global energy budget in the CESM control simulation to the observations\n\nValidation of the annual cycle of surface temperature against observations\n\nOpportunity to formulate a hypothesis about these global temperature variations\n\nPython programming skills: basic xarray usage: opening gridded dataset and taking averages\n\n","type":"content","url":"/courseware/assignment-cesm-control#learning-goals","position":3},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Instructions"},"type":"lvl2","url":"/courseware/assignment-cesm-control#instructions","position":4},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Instructions"},"content":"In a local copy of this notebook (on the JupyterHub or your own device) add your answers in additional cells.\n\nComplete the required problems below.\n\nRemember to set your cell types to Markdown for text, and Code for Python code!\n\nInclude comments in your code to explain your method as necessary.\n\nRemember to actually answer the questions. Written answers are required (not just code and figures!)\n\nSubmit your solutions in a single Jupyter notebook that contains your text, your code, and your figures.\n\nMake sure that your notebook runs cleanly without errors:\n\nSave your notebook\n\nFrom the Kernel menu, select Restart & Run All\n\nDid the notebook run from start to finish without error and produce the expected output?\n\nIf yes, save again and submit your notebook file\n\nIf no, fix the errors and try again.\n\n","type":"content","url":"/courseware/assignment-cesm-control#instructions","position":5},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Problem 1: The global energy budget in the CESM control simulation"},"type":"lvl2","url":"/courseware/assignment-cesm-control#problem-1-the-global-energy-budget-in-the-cesm-control-simulation","position":6},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Problem 1: The global energy budget in the CESM control simulation"},"content":"Compute the global, time average of each of the following quantities, and compare them to the observed values from the Trenberth and Fasullo (2012) figure in the course notes:\n\nSolar Radiation budget:\n\nIncoming Solar Radiation, or Insolation\n\nReflected Solar Radiation at the top of atmosphere\n\nSolar Radiation Reflected by Surface\n\nSolar Radiation Absorbed by Surface\n\nSolar Radiation Refelected by Clouds and Atmosphere (you can calculate this as the difference between the reflected radiation at the top of atmosphere and reflected radiation at the surface)\n\nTotal Absorbed Solar Radiation (ASR) at the top of atmosphere\n\nSolar Radiation Absorbed by Atmosphere (you can calculate this as the residual of your budget, i.e. what’s left over after accounting for all other absorption and reflection)\n\nLongwave Radiation budget:\n\nOutgoing Longwave Radiation\n\nUpward emission from the surface\n\nDownwelling radiation at the surface\n\nOther surface fluxes:\n\n“Thermals”, or sensible heat flux. You will find this in the field called SHFLX in your dataset.\n\n“Evapotranspiration”, or latent heat flux. You will find this in the field called LHFLX in your dataset.\n\nNote we will look more carefully at atmospheric absorption and emission processes later. You do not need to try to calculate terms such as “Emitted by Atmosphere” or “Atmospheric Window”\n\nBased on your results above, answer the following questions:\n\nIs the CESM control simulation at (or near) energy balance?\n\nDo you think this simulation is near equilibrium?\n\nSummarize in your own words what you think are the most important similarities and differences of the global energy budgets in the CESM simulation and the observations.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-control#problem-1-the-global-energy-budget-in-the-cesm-control-simulation","position":7},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Problem 2: Verifying the annual cycle in global mean surface temperature against observations"},"type":"lvl2","url":"/courseware/assignment-cesm-control#problem-2-verifying-the-annual-cycle-in-global-mean-surface-temperature-against-observations","position":8},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Problem 2: Verifying the annual cycle in global mean surface temperature against observations"},"content":"In the class notes we plotted the timeseries of global mean surface temperature in the CESM control simulation, and found an annual cycle. The purpose of this exercise is to verify that this phenomenon is also found in the observed temperature record. If so, then we can conclude that it is a real feature of Earth’s climate and not an artifact of the numerical model.\n\nFor observations, we will use the NCEP Reanalysis data.\n\nReanalysis data is really a blend of observations and output from numerical weather prediction models. It represents our “best guess” at conditions over the whole globe, including regions where observations are very sparse.\n\nThe necessary data are all served up over the internet. We will look at monthly climatologies averaged over the 30 year period 1981 - 2010.\n\nYou can browse the available data here:\n\n\nhttps://​www​.esrl​.noaa​.gov​/psd​/data​/gridded​/data​.ncep​.reanalysis​.derived​.html\n\nSurface air temperature is contained in a file called air.2m.mon.ltm.nc, which is found in the collection called Surface Fluxes.\n\nHere’s a link directly to the catalog page for this data file:\n\n\nhttps://​www​.esrl​.noaa​.gov​/psd​/thredds​/catalog​/Datasets​/ncep​.reanalysis​.derived​/surface​_gauss​/catalog​.html​?dataset​=​Datasets​/ncep​.reanalysis​.derived​/surface​_gauss​/air​.2m​.day​.ltm​.nc\n\nNow click on the OPeNDAP link. A page opens up with lots of information about the contents of the file. The Data URL is what we need to read the data into our Python session. For example, this code opens the file and displays a list of the variables it contains:\n\nimport xarray as xr\nurl = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/surface_gauss/air.2m.mon.ltm.nc\"\nncep_air2m = xr.open_dataset(url, decode_times=False)\n\nncep_air2m\n\nThe temperature data is called air. Take a look at the details:\n\nncep_air2m.air\n\nNotice that the dimensions are (time: 12, lat: 94, lon: 192). The time dimension is calendar months. But note that the lat/lon grid is not the same as our model output!\n\nThink about how you will handle calculating the global average of these data.\n\n","type":"content","url":"/courseware/assignment-cesm-control#problem-2-verifying-the-annual-cycle-in-global-mean-surface-temperature-against-observations","position":9},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl3":"Your task:","lvl2":"Problem 2: Verifying the annual cycle in global mean surface temperature against observations"},"type":"lvl3","url":"/courseware/assignment-cesm-control#your-task","position":10},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl3":"Your task:","lvl2":"Problem 2: Verifying the annual cycle in global mean surface temperature against observations"},"content":"Make a well-labeled timeseries graph of the global-averaged observed average surface air temperature climatology.\n\nVerify that the annual cycle we found in the CESM simulation also exists in the observations.\n\nIn your own words, suggest a plausible physical explanation for why this annual cycle exists.\n\n\n\n","type":"content","url":"/courseware/assignment-cesm-control#your-task","position":11},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-cesm-control#credits","position":12},{"hierarchy":{"lvl1":"Assignment: Global average budgets in the CESM pre-industrial control simulation","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-cesm-control#credits","position":13},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters"},"type":"lvl1","url":"/courseware/assignment-insolation-orbit","position":0},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-insolation-orbit","position":1},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Instructions"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#instructions","position":2},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Instructions"},"content":"Follow examples in the lecture notes on \n\nInsolation and \n\nOrbital variations to complete the following exercises. The bonus problem at the end is not required, but could be interesting and will earn extra credit.\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#instructions","position":3},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 1"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#part-1","position":4},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 1"},"content":"Calculate the incoming solar radiation (insolation) at three different latitudes:\n\nthe equator\n\n45ºN\n\nthe North Pole.\n\nUse present-day orbital parameters.\n\nMake a well-labeled graph that shows all three insolation curves on the same plot. The x\naxis of your graph should be days of the calendar year (beginning January 1), and the y axis should be insolation in W/m2. Include a legend showing which curve corresponds to which latitude.\n\nComment on the very different shapes of these three curves.\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#part-1","position":5},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 2"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#part-2","position":6},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 2"},"content":"Make the same graph using the orbital parameters of 10,000 years ago (just after the end of the last ice age). Compare with your graph from Part 1 to answer these questions:\n\nWas the insolation at northern high latitudes at summer solstice weaker or stronger 10,000 years ago compared to present conditions?\n\nWas the summer season longer or shorter at high northern latitudes? To see this, look at the length of time between polar sunrise and polar sunset.\n\nWhat other differences do you notice?\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#part-2","position":7},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 3"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#part-3","position":8},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 3"},"content":"Calculate the annual average insolation for an array of latitudes ranging from the South Pole to the North Pole.\n\nPresent your results as a well-labeled graph of annual average insolation as a function of latitude. You may use either present-day, or any other orbital parameters, but make sure you explain clearly what you using.\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#part-3","position":9},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 4"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#part-4","position":10},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 4"},"content":"Recall that the equilibrium temperature in \n\nour zero-dimensional EBM isT_{eq} = \\left( \\frac{(1-\\alpha) ~ Q}{\\tau~ \\sigma} \\right)^{\\frac{1}{4}}\n\nSuppose that this model applies independently at every latitude, where Q is the annual average insolation at that latitude (i.e. ignore exchanges of energy between adjacent latitude bands).\n\nUsing the annual mean Q you computed in Part 3, make a graph of T_{eq} as a function of latitude. Make sure to state clearly any assumptions you make about the parameter values \\alpha, \\tau.\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#part-4","position":11},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 5"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#part-5","position":12},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Part 5"},"content":"What are typical annual-average surface temperature values at the South Pole, North Pole, and equator on Earth? Make sure to state your sources for these numbers.\n\nHow do these compare to the equilibrium temperatures you computed in Part 4?\n\nDiscuss some possible shortcomings of the simple model you used in Part 4.\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#part-5","position":13},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Bonus question (for fun and extra credit)"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#bonus-question-for-fun-and-extra-credit","position":14},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Bonus question (for fun and extra credit)"},"content":"Repeat the exercises above for a planet with zero eccentricity and 90º obliquity.\n\nSpeculate on what the seasonal cycle of temperature might look like at different locations on this planet.\n\n90º obliquity means the planet’s rotation axis is parallel with the earth-sun plane, as if the planet were lying on its side. In our solar system, the planet Uranus has an obliquity close to 90º, as do many of the newly discovered extra-solar planets.\n\n\n\n","type":"content","url":"/courseware/assignment-insolation-orbit#bonus-question-for-fun-and-extra-credit","position":15},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-insolation-orbit#credits","position":16},{"hierarchy":{"lvl1":"Assignment: Insolation and orbital parameters","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-insolation-orbit#credits","position":17},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model"},"type":"lvl1","url":"/courseware/assignment-rcm-feedback","position":0},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-rcm-feedback","position":1},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Learning goals"},"type":"lvl2","url":"/courseware/assignment-rcm-feedback#learning-goals","position":2},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Learning goals"},"content":"Students completing this assignment will gain the following skills and concepts:\n\nFamiliarity with setting up and running a single-column Radiative-Convective Model using climlab\n\nFamiliarity with plotting and interpreting vertical air temperature data on meteorological Skew-T charts\n\nUse of climlab to perform controlled parameter-sensitivity experiments\n\nUnderstanding of the lapse rate feedback concept\n\nCalculation of radiative forcing and climate feedback parameters\n\n","type":"content","url":"/courseware/assignment-rcm-feedback#learning-goals","position":3},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Question 1"},"type":"lvl2","url":"/courseware/assignment-rcm-feedback#question-1","position":4},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Question 1"},"content":"Here you look at the effects of doubling CO_2 in the single-column Radiative-Convective model.\n\nThis exercise just repeats what we did in the lecture notes. You want to ensure that you can reproduce the same results before starting the next question, because you will need these results below.\n\nFollowing the \n\nlecture notes on climate sensitivity, do the following:\n\nset up a single-column radiative-convective model with specific humidity taken from the CESM control simulation\n\nRun this control model out to equilibrium\n\nUsing a clone of the control model, double the atmospheric CO_2 and calculate the stratosphere-adjusted radiative forcing \\Delta R.\n\nUsing another model clone with doubled CO_2, timestep the model out to equilibrium. For this calculation, do not modify the specific humidity as we are assuming that there is no change in the water vapor distribution as the climate warms.\n\nCalculate the no-feedback Equilibrium Climate Sensitivity (ECS). Recall that this is a number in Kelvin.\n\nAlso calculate the no-feedback climate response parameter \\lambda_0 in W m^{-2} K^{-1}.\n\nVerify and show that you get the same results as we did in the lecture notes.\n\n\n\n","type":"content","url":"/courseware/assignment-rcm-feedback#question-1","position":5},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"type":"lvl2","url":"/courseware/assignment-rcm-feedback#question-2-combined-lapse-rate-and-water-vapor-feedback-in-the-rcm","position":6},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"content":"","type":"content","url":"/courseware/assignment-rcm-feedback#question-2-combined-lapse-rate-and-water-vapor-feedback-in-the-rcm","position":7},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl3":"Instructions","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"type":"lvl3","url":"/courseware/assignment-rcm-feedback#instructions","position":8},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl3":"Instructions","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"content":"A typical, expected feature of global warming is that the upper troposphere warms more than the surface. (Later we will see that this does occur in the CESM simulations).\n\nThis feature is not represented in our standard radiative-convective model, which is forced to a single prescribed lapse rate due to our convective adjustment.\n\nHere you will suppose that other physical processes modify this lapse rate as the climate warms.\n\nRepeat the RCM global warming calculation, but implement two different feedbacks:\n\na water vapor feedback using fixed relative humidity\n\na lapse rate feedback using this formula:\\Gamma = \\Gamma_{ref} - (0.3 \\text{ km}) \\Delta T_s\n\nwhere \\Gamma_{ref} is the critical lapse rate you used in your control model, probably 6.5 K / km, and \\Delta T_s is the current value of the surface warming relative to the control in units of K.\n\nSo, for example if the model has warmed by 1 K at the surface, then our parameterization says that the critical lapse rate should be 6.5 - 0.3 = 6.2 K / km.\n\nFollow the example in the lecture notes where we implemented the fixed relative humidity. Remember that we needed to adjust the specific_humidity field of our radiation process at every timestep. Here we still need to do that, but in addition, we also need to change the attributeadj_lapse_rate\n\nof the convection process at each timestep.\n\nFor example, if you have a model called mymodel that contains a ConvectiveAdjustment process called Convection, here is some code that you would need at every timestep:mymodel.subprocess['Convection'].adj_lapse_rate = newvalue\n\nwhere newvalue is a number in K / km.\n\nYou will need to write a loop where, at every timestep, you calculate the appropriate value of newvalue and set the lapse rate parameter as shown above.","type":"content","url":"/courseware/assignment-rcm-feedback#instructions","position":9},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl3":"Specific questions:","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"type":"lvl3","url":"/courseware/assignment-rcm-feedback#specific-questions","position":10},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl3":"Specific questions:","lvl2":"Question 2: combined lapse rate and water vapor feedback in the RCM"},"content":"Make a nice skew-T plot that shows three temperature profiles:\n\nRCM control\n\nRCM, equilibrium after doubling CO_2 without feedback\n\nRCM, equilibrium after doubling CO_2 with combined water vapor and lapse rate feedback\n\nBased on your plot, where in the column do you find the greatest warming?\n\nCalculate the ECS of the new version of the model with combined water vapor and lapse rate feedback\n\nIs this sensitivity larger or smaller than the “no feedback” ECS? Is it larger or smaller than the ECS with water vapor feedback alone (which we calculated in the lecture notes)?\n\nCalculate the combined feedback parameter for (water vapor plus lapse rate).\n\nCompare this result to the IPCC figure with feedback results from comprehensive models in our lecture notes (labeled “WV+LR”). Do you find a similar number?\n\nWould you describe the lapse rate feedback as positive or negative?\n\n\n\n","type":"content","url":"/courseware/assignment-rcm-feedback#specific-questions","position":11},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-rcm-feedback#credits","position":12},{"hierarchy":{"lvl1":"Assignment: Feedbacks in the Radiative-Convective Model","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-rcm-feedback#credits","position":13},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model"},"type":"lvl1","url":"/courseware/assignment-simple-clouds","position":0},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-simple-clouds","position":1},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Learning goals"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#learning-goals","position":2},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Learning goals"},"content":"Students completing this assignment will gain the following skills and concepts:\n\nContinued practice working with the Jupyter notebook\n\nFamiliarity with the toy “leaky greenhouse” model\n\nConceptual understanding of the role of clouds in the planetary energy budget\n\n","type":"content","url":"/courseware/assignment-simple-clouds#learning-goals","position":3},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Instructions"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#instructions","position":4},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Instructions"},"content":"This assignment requires some mathematics. You can present your work in this notebook, on hand-written paper, or a combination. Just make sure you communicate clearly which answers belong to which question.\n\nFor answers presented in the notebook, follow the usual procedures to ensure that your code is well commented and runs clearly without errors (see previous assignment instructions).\n\n","type":"content","url":"/courseware/assignment-simple-clouds#instructions","position":5},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Introduction"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#introduction","position":6},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Introduction"},"content":"Consider the two-layer “leaky greenhouse” (or grey radiation) model from \n\nthese lecture notes.\n\nHere you will use this model to investigate the radiative effects of clouds.\n\nClouds simultaneously reflect shortwave radiation and absorb longwave radiation. These two effects often oppose each other in nature, and which one is stronger depends (among other things) on whether the clouds are low or high (i.e. in layer 0 or layer 1).\n\nFor this question we will suppose (as we did in the lecture notes) that there is no absorption of shortwave radiation in the atmosphere.\n\n","type":"content","url":"/courseware/assignment-simple-clouds#introduction","position":7},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 1"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#question-1","position":8},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 1"},"content":"Suppose a cloud reflects a fraction \\alpha_c of the shortwave beam incoming from above. \\alpha_c is a number between 0 and 1. Provide a coherent argument (in words, sketches, and/or equations) for why the shortwave effects cloud should alway be a cooling on the surface. Is this cooling effect different if the cloud is low or high? Explain.\n\n\n\n","type":"content","url":"/courseware/assignment-simple-clouds#question-1","position":9},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 2"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#question-2","position":10},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 2"},"content":"Because the liquid water droplets in a cloud are effective absorbers of longwave radiation, a cloud will increase the longwave absorptivity / emissivity of the layer in which it resides.\n\nWe can represent this in the two-layer atmosphere by letting the absorptivity of a cloudy layer be \\epsilon + \\epsilon_c, where \\epsilon_c is an additional absorptivity due to the cloud. Derive a formula (i.e. an algebraic expression) for the OLR in terms of the temperatures T_s, T_0, T_1 and the emissivities \\epsilon, \\epsilon_c for two different cases:\n\na low cloud (the additional \\epsilon_c is in layer 0)\n\na high cloud (the additional \\epsilon_c is in layer 1)\n\n\n\n","type":"content","url":"/courseware/assignment-simple-clouds#question-2","position":11},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 3"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#question-3","position":12},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 3"},"content":"Now use the tuned numerical values we used in class:\n\nT_s = 288 K\n\nT_0 = 275 K\n\nT_1 = 230 K\n\n\\epsilon = 0.586\n\nand take \\epsilon_c = 0.2\n\n(a) Repeat the following for both a high cloud and a low cloud:\n\nCalculate the difference in OLR due to the presence of the cloud, compared to the case with no cloud.\n\nDoes this represent a warming or cooling effect?\n\n(b) Which one has a larger effect, the low cloud or the high cloud?\n\n\n\n","type":"content","url":"/courseware/assignment-simple-clouds#question-3","position":13},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 4"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#question-4","position":14},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 4"},"content":"Based on your results in questions 1-3, which do you think is more likely to produce a net warming effect on the climate: a low cloud or a high cloud? Give an explanation in words.\n\n\n\n","type":"content","url":"/courseware/assignment-simple-clouds#question-4","position":15},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 5"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#question-5","position":16},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Question 5"},"content":"How would your answer change if the atmosphere were isothermal, i.e. T_s = T_0 = T_1?\n\n\n\n","type":"content","url":"/courseware/assignment-simple-clouds#question-5","position":17},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-simple-clouds#credits","position":18},{"hierarchy":{"lvl1":"Assignment: Clouds in the Leaky Greenhouse Model","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-simple-clouds#credits","position":19},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM"},"type":"lvl1","url":"/courseware/assignment-zero-dim-ebm","position":0},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm","position":1},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Learning goals"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#learning-goals","position":2},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Learning goals"},"content":"Students completing this assignment will gain the following skills and concepts:\n\nFamiliarity with the Jupyter notebook\n\nFamiliarity with the zero-dimensional Energy Balance Model\n\nUnderstanding of the adjustment toward equilibrium temperature\n\nIntroduction to the concept of ice-albedo feedback\n\nUse of numerical timestepping to find the equilibrium temperature\n\nPython programming skills: arrays, loops, and simple graphs\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#learning-goals","position":3},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Instructions"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#instructions","position":4},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Instructions"},"content":"In a local copy of this notebook (on the JupyterHub or your own device) add your answers in additional cells.\n\nComplete the required problems below.\n\nSome assignments have optional bonus problems. These are meant to be interesting and thought-provoking, but are not required. Extra credit will be given for interesting answers to the bonus problems.\n\nFollow \n\nthese instructions to run your notebook on the UAlbany JupyterHub. Remember to set your kernel to Python 3 Jan. 2025 Environment\n\nRemember you can add new cells using the “+” button, and set your cell types to Markdown for text, and Code for Python code!\n\nInclude comments in your code to explain your method as necessary.\n\nRemember to actually answer the questions. Written answers in Markdown cells are required (not just code and figures!)\n\nSubmit your solutions in a single Jupyter notebook that contains your text, your code, and your figures.\n\nMake sure that your notebook runs cleanly without errors:\n\nSave your notebook.\n\nFrom the Kernel menu, select Restart & Run All.\n\nDid the notebook run from start to finish without error and produce the expected output?\n\nIf yes, save again and submit your notebook file.\n\nIf no, fix the errors and try again.\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#instructions","position":5},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#problem-1-time-dependent-warming-in-the-zero-dimensional-energy-balance-model","position":6},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"content":"\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#problem-1-time-dependent-warming-in-the-zero-dimensional-energy-balance-model","position":7},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"The equation of the Energy Balance Model","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#the-equation-of-the-energy-balance-model","position":8},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"The equation of the Energy Balance Model","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"content":"In lecture we defined a zero-dimensional Energy Balance Mdel for the global mean surface temperature T_s as followsC  \\frac{dT_s}{dt} = \\text{ASR} - \\text{OLR}\\text{ASR} = (1-\\alpha) Q\\text{OLR} = \\tau \\sigma T_s^4\n\nwhere we defined these terms:\n\nC is a heat capacity for the atmosphere-ocean column\n\n\\alpha is the global mean planetary albedo\n\n\\sigma = 5.67 \\times 10^{-8} W m⁻² K⁻⁴ is the Stefan-Boltzmann constant\n\n\\tau is our transmissivity parameter for the atmosphere.\n\nQ is the global-mean incoming solar radiation, or insolation.\n\nRefer back to our class notes for parameter values.\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#the-equation-of-the-energy-balance-model","position":9},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (a)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-a","position":10},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (a)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"content":"If the heat penetrated to twice as deep into the ocean, the value of C would be twice as large. Would this affect the equilibrium temperature? Why or why not?\n\nHint: look carefully at the equation for the Energy Balance Model. What is the condition for equilibrium? What role does C play in the equation at equilibrium?\n\nYour answer goes here! (Double-click this cell to edit)\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-a","position":11},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (b)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-b","position":12},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (b)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"content":"In the \n\nLecture notes we used numerical timestepping to investigate a hypothetical climate change scenario in which \\tau decreases to 0.57 and \\alpha increases to 0.32. We produced a graph of T_s(t) over a twenty year period, starting from an initial temperature of 288 K. Here you will repeat this calculate with a larger value of C and compare the warming rates. Specifically:\n\nRepeat our in-class time-stepping calculation with the same parameters we used before (including a heat capacity of C = 4\\times10^8 J m⁻² K⁻¹), but extend it to 50 years. You should create an array of temperatures with 51 elements, beginning from 288 K.\n\nNow do it again, but use C = 8\\times10^8 J m⁻² K⁻¹ (representing 200 meters of water). You should create another 51-element array of temperatures also beginning from 288 K.\n\nMake a well-labeled graph that compares the two temperatures over the 50-year period.\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-b","position":13},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (c)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-c","position":14},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (c)","lvl2":"Problem 1: Time-dependent warming in the zero-dimensional Energy Balance Model"},"content":"What do your results show about the role of heat capacity on climate change? Give a short written answer.\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-c","position":15},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#problem-2-albedo-feedback-in-the-energy-balance-model","position":16},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"content":"\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#problem-2-albedo-feedback-in-the-energy-balance-model","position":17},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"The albedo formula","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#the-albedo-formula","position":18},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"The albedo formula","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"content":"For this exercise, we will introduce a new physical process into our model by letting the planetary albedo depend on temperature. The idea is that a warmer planet has less ice and snow at the surface, and thus a lower planetary albedo (less reflection).\n\nRepresent the ice-albedo feedback through the following formula:\\alpha(T) = \\left\\{ \\begin{array}{ccc}\n\\alpha_i &   & T \\le T_i \\\\\n\\alpha_o + (\\alpha_i-\\alpha_o) \\frac{(T-T_o)^2}{(T_i-T_o)^2} &   & T_i < T < T_o \\\\\n\\alpha_o &   & T \\ge T_o \\end{array} \\right\\}\n\nwith the following parameter values:\n\n\\alpha_o = 0.289 is the albedo of a warm, ice-free planet\n\n\\alpha_i = 0.7 is the albedo of a very cold, completely ice-covered planet\n\nT_o = 293 K is the threshold temperature above which we assume the planet is ice-free\n\nT_i = 260 K is the threshold temperature below which we assume the planet is completely ice covered.\n\nFor intermediate temperature, this formula gives a smooth variation in albedo with global mean temperature. It is tuned to reproduce the observed albedo \\alpha = 0.299 for T = 288 K.\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#the-albedo-formula","position":19},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (a)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-a-1","position":20},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (a)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"content":"Define a Python function that implements the above albedo formula. Your function should take the temperature T as input and return the correct albedo \\alpha.\n\nUse your function to calculate albedos for a wide range on planetary temperature (e.g. from T=250 K to T=300 K.)\n\nPresent your results (albedo as a function of global mean temperature, or \\alpha(T)) in a nicely labeled graph with temperature T along the x axis and albedo \\alpha on the y axis.\n\nHint: your code will need to decide which of the three formulas to use based on the value of T. You might want to review the use of if and else statements in Python. Alternatively, you can check out the numpy.where() function (see \n\nthe numpy documentation) which can make decisions simultaneously on arrays of numbers. There is definitely more than one way to solve this problem. It doesn’t matter how you do it as long as it works (and you understand why it works)!\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-a-1","position":21},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (b)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-b-1","position":22},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (b)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"content":"Now investigate a climate change scenario with this new model:\n\nSuppose that the transmissivity decreases from 0.611 to 0.57 (same as before)\n\nThis time the albedo is not a fixed, known number. Instead, it varies with the current value of temperature according the formula you plotted in Part (a).\n\nYour task is to calculate the new equilibrium temperature.\n\nUnlike when the albedo is a fixed number, it is not possible to solve for the equilibrium temperature analytically. Instead, you will use numerical time-stepping to find the equilibrium temperature\n\nRepeat the procedure from Problem 1b (time-step forward for 50 years from an initial temperature of 288 K and make a graph of the results), but this time use the function you defined above to compute the albedo for the current temperature.\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-b-1","position":23},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (c)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"type":"lvl3","url":"/courseware/assignment-zero-dim-ebm#part-c-1","position":24},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl3":"Part (c)","lvl2":"Problem 2: Albedo feedback in the Energy Balance Model"},"content":"Explain in your own words how the temperature-dependent albedo affects the equilibrium temperature. If the albedo never changed from the observed value 0.299, would the equilibrium temperature be larger or smaller?\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#part-c-1","position":25},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Bonus problem"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#bonus-problem","position":26},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Bonus problem"},"content":"Open-ended investigation for extra credit, not required\n\nSomething very different occurs in this model if you introduce a strong negative radiative forcing, either by substantially reducing greenhouse gases (which we would represent as an increase in the transmissivity \\tau), or by decreasing the incoming solar radiation Q.\n\nInvestigate, using your numerical model code, and report your results along with your thoughts.\n\n\n\n","type":"content","url":"/courseware/assignment-zero-dim-ebm#bonus-problem","position":27},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Credits"},"type":"lvl2","url":"/courseware/assignment-zero-dim-ebm#credits","position":28},{"hierarchy":{"lvl1":"Assignment: Climate change in the zero-dimensional EBM","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/assignment-zero-dim-ebm#credits","position":29},{"hierarchy":{"lvl1":"The climate system and climate models"},"type":"lvl1","url":"/courseware/climate-system-models","position":0},{"hierarchy":{"lvl1":"The climate system and climate models"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/climate-system-models","position":1},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"1. The climate system and its interactions"},"type":"lvl2","url":"/courseware/climate-system-models#id-1-the-climate-system-and-its-interactions","position":2},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"1. The climate system and its interactions"},"content":"\n\n","type":"content","url":"/courseware/climate-system-models#id-1-the-climate-system-and-its-interactions","position":3},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Definition of the “climate system” and its “spheres”","lvl2":"1. The climate system and its interactions"},"type":"lvl3","url":"/courseware/climate-system-models#definition-of-the-climate-system-and-its-spheres","position":4},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Definition of the “climate system” and its “spheres”","lvl2":"1. The climate system and its interactions"},"content":"From the IPCC AR5 report \n\nCubasch et al., 2013:\n\nClimate System\n\nThe climate system is the highly complex system consisting of five major components: the \n\nAtmosphere, the \n\nHydrosphere, the \n\nCryosphere, the \n\nLithosphere and the \n\nBiosphere, and the interactions between them. The climate system evolves in time under the influence of its own internal dynamics and because of external forcings such as volcanic eruptions, solar variations and anthropogenic forcings such as the changing composition of the atmosphere and land use change.\n\nWhich begs some further definitions:\n\nAtmosphere\n\nThe gaseous envelope surrounding the Earth.\n\nHydrosphere\n\nThe component of the climate system comprising liquid surface and subterranean water, such as oceans, seas, rivers, lakes, underground water, etc.\n\nBiosphere\n\nThe part of the Earth system comprising all ecosystems and living organisms (both terrestrial and marine)… including derived dead organic matter, such as litter, soil organic matter and oceanic detritus.\n\nCryosphere\n\nAll regions on and beneath the surface of the Earth and ocean where water is in solid form, including sea ice, lake ice, river ice, snow cover, glaciers and ice sheets, and frozen ground (which includes permafrost).\n\nLithosphere\n\nThe upper layer of the solid Earth, both continental and oceanic, which comprises all crustal rocks and the cold, mainly elastic part of the uppermost mantle.\n\n","type":"content","url":"/courseware/climate-system-models#definition-of-the-climate-system-and-its-spheres","position":5},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"WHY might we want to include all these “spheres” in our models?","lvl2":"1. The climate system and its interactions"},"type":"lvl3","url":"/courseware/climate-system-models#why-might-we-want-to-include-all-these-spheres-in-our-models","position":6},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"WHY might we want to include all these “spheres” in our models?","lvl2":"1. The climate system and its interactions"},"content":"Here are two nice figures from the IPCC AR5 WG1 report \n\nCubasch et al., 2013:\n\n\n\nFigure 1.1 | Main drivers of climate change. The radiative balance between incoming solar shortwave radiation (SWR) and outgoing longwave radiation (OLR) is influenced by global climate ‘drivers’. Natural fluctuations in solar output (solar cycles) can cause changes in the energy balance (through fluctuations in the amount of incoming SWR) (Section 2.3). Human activity changes the emissions of gases and aerosols, which are involved in atmospheric chemical reactions, resulting in modified O3 and aerosol amounts (Section 2.2). O3 and aerosol particles absorb, scatter and reflect SWR, changing the energy balance. Some aerosols act as cloud condensation nuclei modifying the properties of cloud droplets and possibly affecting precipitation (Section 7.4). Because cloud interactions with SWR and LWR are large, small changes in the properties of clouds have important implications for the radiative budget (Section 7.4). Anthropogenic changes in GHGs (e.g., CO2, CH4, N2O, O3, CFCs) and large aerosols (>2.5 μm in size) modify the amount of outgoing LWR by absorbing outgoing LWR and re-emitting less energy at a lower temperature (Section 2.2). Surface albedo is changed by changes in vegetation or land surface properties, snow or ice cover and ocean colour (Section 2.3). These changes are driven by natural seasonal and diurnal changes (e.g., snow cover), as well as human influence (e.g., changes in vegetation types) (Forster et al., 2007).\n\n\n\nFigure 1.2 | Climate feedbacks and timescales. The climate feedbacks related to increasing CO2 and rising temperature include negative feedbacks (–) such as LWR, lapse rate (see Glossary in Annex III), and air–sea carbon exchange and positive feedbacks (+) such as water vapour and snow/ice albedo feedbacks. Some feedbacks may be positive or negative (±): clouds, ocean circulation changes, air–land CO2 exchange, and emissions of non-GHGs and aerosols from natural systems. In the smaller box, the large difference in timescales for the various feedbacks is highlighted.\n\n","type":"content","url":"/courseware/climate-system-models#why-might-we-want-to-include-all-these-spheres-in-our-models","position":7},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"The key is that all these processes ultimately affect the planetary energy budget","lvl2":"1. The climate system and its interactions"},"type":"lvl3","url":"/courseware/climate-system-models#the-key-is-that-all-these-processes-ultimately-affect-the-planetary-energy-budget","position":8},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"The key is that all these processes ultimately affect the planetary energy budget","lvl2":"1. The climate system and its interactions"},"content":"Let’s talk about timescales.\n\nNote that the IPCC figure only goes out to centuries – deep ocean circulation – but there are many even longer timescales in the climate system.\ne.g. growth and decay of ice sheets, geological processes like chemical weathering, continental drift\n\nThe choice of which processes to include in a model should therefore be guided by the timescales of interest. For example, the IPCC process is primarily concerned with the century timescale – because it is of special concern to human affairs.\nSo we don’t tend to include ice sheet and geological feedbacks – though coupled ice sheet modeling is becoming more important.\n\n\n\n","type":"content","url":"/courseware/climate-system-models#the-key-is-that-all-these-processes-ultimately-affect-the-planetary-energy-budget","position":9},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"2. Simulation versus Parameterization"},"type":"lvl2","url":"/courseware/climate-system-models#id-2-simulation-versus-parameterization","position":10},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"2. Simulation versus Parameterization"},"content":"\n\n","type":"content","url":"/courseware/climate-system-models#id-2-simulation-versus-parameterization","position":11},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Definitions","lvl2":"2. Simulation versus Parameterization"},"type":"lvl3","url":"/courseware/climate-system-models#definitions","position":12},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Definitions","lvl2":"2. Simulation versus Parameterization"},"content":"The Climate Modelling Primer (4th ed., page 124) \n\nMcGuffie & Henderson-Sellers, 2014 defines parameterization as\n\nThe process of capturing a physical process through some mathematical relationship between important parameters in the process, but without explicitly modeling all the actual processes. For example, the albedo of leaves might be related to the soil moisture (via some specification of wilting point) but the physical and biological mechanisms in the plant that happen when the leaf wilts are not modelled.\n\nAn example from our own work so far: the greenhouse effect, which causes the OLR to be much lower than the surface emission, and the equilibrium temperature of the surface to be much warmer than it would otherwise be.\n\nIn reality the greenhouse effect arises from the contributions of several different gases, at various levels, to the absorption and emission of longwave radiation. Key greenhouse species include water vapor and cloud droplets, which both strongly tied to the day-to-day variations in weather.\n\nHow can we represent this in a climate model?\n\n","type":"content","url":"/courseware/climate-system-models#definitions","position":13},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"type":"lvl3","url":"/courseware/climate-system-models#parameterization","position":14},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"content":"Represent the time-averaged, net effect of the complex radiative transfer process, and its coupling to day-to-day water and cloud variations, with an empirical relationship, e.g.OLR = \\tau \\sigma T_s^4\n\nUse observed temperature and OLR to choose an appropriate value for \\tau\n\n(this is what we have done so far)\n\n","type":"content","url":"/courseware/climate-system-models#parameterization","position":15},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Pro","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"type":"lvl4","url":"/courseware/climate-system-models#pro","position":16},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Pro","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"content":"Simple to implement, easy to understand the result","type":"content","url":"/courseware/climate-system-models#pro","position":17},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Con","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"type":"lvl4","url":"/courseware/climate-system-models#con","position":18},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Con","lvl3":"Parameterization","lvl2":"2. Simulation versus Parameterization"},"content":"How might the value of \\tau change with climate change? We have no way of knowing, and have to make assumptions.\n\n","type":"content","url":"/courseware/climate-system-models#con","position":19},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"type":"lvl3","url":"/courseware/climate-system-models#simulation","position":20},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"content":"Solve a large set of coupled equations for the time-dependent behavior of the atmosphere:\n\nEquations of radiative transfer, with detailed information about the various greenhouse gases\n\nEquations of fluid motion to predict growth and decay of weather system and movement of water vapor\n\nCloud microphysics to predict the formation of cloud droplets and their optical properties\n\nThis is essentially what goes on in a so-called GCM (General Circulation Model or Global Climate Model).\n\n","type":"content","url":"/courseware/climate-system-models#simulation","position":21},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Pro","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"type":"lvl4","url":"/courseware/climate-system-models#pro-1","position":22},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Pro","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"content":"Model is based on real physical principles (e.g. Newton’s laws of motion, conservation of mass and energy). It is therefore more likely to remain valid under changing climate conditions.","type":"content","url":"/courseware/climate-system-models#pro-1","position":23},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Con","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"type":"lvl4","url":"/courseware/climate-system-models#con-1","position":24},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Con","lvl3":"Simulation","lvl2":"2. Simulation versus Parameterization"},"content":"Requires lots of computer resources. Must simulate the weather even though we really just want the climate (statistics of weather!)\n\nEssentially a simulation involves representing (at least some aspects of) the underlying rules that govern the process. There is a chain of causality linking input to output.\n\nParameterization involves making assumptions about the statistical properties of the process – so we can calculate some relevant statistical properties of the output given the input, without needing to explicitly model the actual events.\n\n","type":"content","url":"/courseware/climate-system-models#con-1","position":25},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"3. A taxonomy of climate models"},"type":"lvl2","url":"/courseware/climate-system-models#id-3-a-taxonomy-of-climate-models","position":26},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"3. A taxonomy of climate models"},"content":"\n\n","type":"content","url":"/courseware/climate-system-models#id-3-a-taxonomy-of-climate-models","position":27},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Key components of a climate model","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#key-components-of-a-climate-model","position":28},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Key components of a climate model","lvl2":"3. A taxonomy of climate models"},"content":"Radiation\n\nThe way in which the input and absorption of solar radiation and the emission of infrared radiation are handled\n\nDynamics\n\nThe movement of energy around the globe by winds and ocean currents (specifically from low to high latitudes) and vertical movements (e.g. small-scale turbulence, convection and deep-water formation)\n\nSurface processes\n\nInclusion of the effects of sea and land ice, snow, vegetation and the resultant change in albedo, emissivity and surface-atmosphere energy and moisture interchanges.\n\nChemistry\n\nThe chemical composition of the atmosphere and interactions, including biological, with other components (e.g. carbon exchanges between ocean, land and atmosphere)\n\nResolution (in both time and space)\n\nThe timestep of the model and the horizontal and vertical scales resolved.\n\n","type":"content","url":"/courseware/climate-system-models#key-components-of-a-climate-model","position":29},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"The climate modeling pyramid","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#the-climate-modeling-pyramid","position":30},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"The climate modeling pyramid","lvl2":"3. A taxonomy of climate models"},"content":"The edges represent the basic elements of the models, with complexity increasing upwards. Around the base of the pyramid are the simpler climate models, which incorporate only one primary process.\n\n\n\n","type":"content","url":"/courseware/climate-system-models#the-climate-modeling-pyramid","position":31},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Five basic types of climate model","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#five-basic-types-of-climate-model","position":32},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Five basic types of climate model","lvl2":"3. A taxonomy of climate models"},"content":"Energy Balance Models (EBMs)\n\nRadiative-Convective (RC) or Single-Column models (SCMs)\n\n“Dimensionally Constrained” models\n\nGlobal Circulation Models (GCMs)\n\nEarth System Models (ESMs)\n\nThe vertical axis in the pyramid figures shows increasing complexity BOTH in terms of number of processes included and linked together, AND increasing resolution in space and time.\n\n","type":"content","url":"/courseware/climate-system-models#five-basic-types-of-climate-model","position":33},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"1. Energy Balance Models (EBMs)","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#id-1-energy-balance-models-ebms","position":34},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"1. Energy Balance Models (EBMs)","lvl2":"3. A taxonomy of climate models"},"content":"Here’s a definition:\n\nEnergy Balance Model\n\nA simplified climate model (typically zero- or one-dimensional) predicting the surface temperature as a function of the Earth’s energy balance (i.e., the imbalance between the \n\nAbsorbed Shortwave Radiation and \n\nOutgoing Longwave Radiation.\n\nSimplified relationships are used to calculate the terms contributing to the energy balance in each latitude zone in the one-dimensional case.\n\nHow might we extend our zero-dimensional model to include a latitude dimension? What new kinds of processes might we have to include?\n\n","type":"content","url":"/courseware/climate-system-models#id-1-energy-balance-models-ebms","position":35},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"2. Radiative-Convective (RC) or Single-Column models (SCMs)","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#id-2-radiative-convective-rc-or-single-column-models-scms","position":36},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"2. Radiative-Convective (RC) or Single-Column models (SCMs)","lvl2":"3. A taxonomy of climate models"},"content":"Focus on processes in the vertical column.\n\nRC models compute the (usually global average) temperature profile by explicit modelling of radiation and convection processes, which together determine the *lapse rate.\n\nSCMs are single columns ‘extracted’ from a three-dimensional model and include all the processes that would be modelled in the three-dimensional version but without any of the horizontal energy transfers.\n\n","type":"content","url":"/courseware/climate-system-models#id-2-radiative-convective-rc-or-single-column-models-scms","position":37},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"3. Dimensionally constrained models","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#id-3-dimensionally-constrained-models","position":38},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"3. Dimensionally constrained models","lvl2":"3. A taxonomy of climate models"},"content":"Include the following:\n\nStatistical-Dynamical (SD) models, deal explicitly with surface processes and dynamics in a zonal average (average around latitude circles) framework and have a vertically resolved atmosphere.\n\nEarth-System Models of Intermediate Complexity (EMICs) extend SD models to include interactive chemistry, especially the cycling of carbon between ocean, atmosphere and land.\n\nIntegrated Assessment Models (IAMs) couple the climate system to models of economic activity to more fully assess the impact of particular policy choices affective emissions.\n\n","type":"content","url":"/courseware/climate-system-models#id-3-dimensionally-constrained-models","position":39},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"4. Global Circulation Models (GCMs)","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#id-4-global-circulation-models-gcms","position":40},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"4. Global Circulation Models (GCMs)","lvl2":"3. A taxonomy of climate models"},"content":"Global Circulation Model\n\nA complex climate model that simulates the global, three-dimensional circulation of the atmosphere, ocean, or both.\n\nThese models can exists as fully coupled ocean-atmosphere models or, for testing and evaluation, as independent ocean or atmospheric circulation models.\n\nThese models attempt to simulate as many processes as possible and produce a three-dimensional picture of the time evolution of the state of the whole climate system.\n\nVertical resolution is much finer than horizontal resolution but, even so, the number of layers is usually much less than the number of columns.\n\n","type":"content","url":"/courseware/climate-system-models#id-4-global-circulation-models-gcms","position":41},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Fun fact","lvl3":"4. Global Circulation Models (GCMs)","lvl2":"3. A taxonomy of climate models"},"type":"lvl4","url":"/courseware/climate-system-models#fun-fact","position":42},{"hierarchy":{"lvl1":"The climate system and climate models","lvl4":"Fun fact","lvl3":"4. Global Circulation Models (GCMs)","lvl2":"3. A taxonomy of climate models"},"content":"Depending on who you ask, GCM stands for any of the following:\n\nGeneral Circulation Model (the original)\n\nGlobal Climate Model (more common these days)\n\nGlobal Circulation Model (possibly the most accurate name)\n\nA GCM was originally a representation of the processes that shape and maintain the time-average circulation of the atmosphere, e.g. why are the surface winds, on average, westerly in mid-latitudes and easterly in the tropics?\n\nDistinctions have historically been drawn between oceanic and atmospheric general circulation models, which are often denoted OGCM and AGCM respectively.\n\nAs the pyramid is ascended, more processes are integrated to develop a coupled ocean-atmosphere global model, which might be denoted AOGCM or CGCM.\n\n","type":"content","url":"/courseware/climate-system-models#fun-fact","position":43},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"5. Earth System Models","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#id-5-earth-system-models","position":44},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"5. Earth System Models","lvl2":"3. A taxonomy of climate models"},"content":"Ascending the pyramid even more and moving forward in climate modeling history, more processes that used to be fixed come to be incorporated into GCMs and the coupling becomes more complete: e.g. changes in biomes and vegetation, chemical changes in atmosphere, ocean and soil.\n\nSuch models are now generally known as Earth System Models.\n\nFor brevity we use the generic term GCM to mean any complex three-dimensional model of the atmosphere and ocean and possibly other components, used for climate simulation. We will be more precise where necessary.\n\n","type":"content","url":"/courseware/climate-system-models#id-5-earth-system-models","position":45},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Simple vs. Complex models: their different roles in the science","lvl2":"3. A taxonomy of climate models"},"type":"lvl3","url":"/courseware/climate-system-models#simple-vs-complex-models-their-different-roles-in-the-science","position":46},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Simple vs. Complex models: their different roles in the science","lvl2":"3. A taxonomy of climate models"},"content":"\n\n\n\nIn this course we are going to work extensively with two kinds of simple one-dimensional model: EBMs and RCMs.\n\nSection 2.2.1 and 2.2.2 of the Primer \n\nMcGuffie & Henderson-Sellers, 2014 give a sneak peek of the ingredients and uses for these models.\n\n","type":"content","url":"/courseware/climate-system-models#simple-vs-complex-models-their-different-roles-in-the-science","position":47},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"4. Introducing the GCM"},"type":"lvl2","url":"/courseware/climate-system-models#id-4-introducing-the-gcm","position":48},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"4. Introducing the GCM"},"content":"\n\n","type":"content","url":"/courseware/climate-system-models#id-4-introducing-the-gcm","position":49},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Ingredients of the GCM","lvl2":"4. Introducing the GCM"},"type":"lvl3","url":"/courseware/climate-system-models#ingredients-of-the-gcm","position":50},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Ingredients of the GCM","lvl2":"4. Introducing the GCM"},"content":"The aim of the GCM is the calculation of the full three-dimensional character of the atmosphere and ocean.\n\nTo simulate the fluid flow and its effects on other components of the climate system, instead of parameterizing the flow.\n\nThis requires the solution of a series of equations governing the motion of fluids\n\nConservation of energy\n\nConservation of momentum, Newton’s 2nd law of motion (\\vec{F}=m\\vec{a}) for a moving fluid\n\nConservation of mass, for the fluid itself (air or water) as well as any quantities carried by the fluid (e.g. water vapor in the atmosphere, salt in the ocean)\n\nEquation of state, linking thermodynamic properties of the fluid (e.g. ideal gas law for atmosphere)\n\nAlso, equations for the formation of clouds, sea ice, etc.\n\nAtmospheric Science students will recognize this list - the so-called “governing equations” for the atmosphere.\n\nThese equations are the basis of numerical weather prediction as well as climate modeling.\n\nThe physical laws are expressed in terms of differential equations.\n\nJust as we saw with the zero-dimensional EBM, we need to approximate the derivatives in order to represent them on a computer.\n\nOne way to do this is to divide the Earth into a series of boxes on a regular grid.\n\nThe model then represents all the state variables, e.g. for the atmosphere\n\nTemperature\n\nWind speed and direction\n\nHumidity\n\nPressure\n\nfor each box - essentially a spatial average of these quantities over the box.\n\nThe discretized equations are then solved numerically by timestepping, (conceptually at least) just like we have already done with the EBM.\n\n\n\n","type":"content","url":"/courseware/climate-system-models#ingredients-of-the-gcm","position":51},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Evolving complexity of GCMs","lvl2":"4. Introducing the GCM"},"type":"lvl3","url":"/courseware/climate-system-models#evolving-complexity-of-gcms","position":52},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Evolving complexity of GCMs","lvl2":"4. Introducing the GCM"},"content":"\n\n\n\nFigure 1.13 | The development of climate models over the last 35 years showing how the different components were coupled into comprehensive climate models over time. In each aspect (e.g., the atmosphere, which comprises a wide range of atmospheric processes) the complexity and range of processes has increased over time (illustrated by growing cylinders). Note that during the same time the horizontal and vertical resolution has increased considerably e.g., for spectral models from T21L9 (roughly 500 km horizontal resolu- tion and 9 vertical levels) in the 1970s to T95L95 (roughly 100 km horizontal resolution and 95 vertical levels) at present, and that now ensembles with at least three independent experiments can be considered as standard.\n\n\n\nFigure 1.14 | Horizontal resolutions considered in today’s higher resolution models and in the very high resolution models now being tested: (a) Illustration of the European topography at a resolution of 87.5 × 87.5 km; (b) same as (a) but for a resolution of 30.0 × 30.0 km.\n\n","type":"content","url":"/courseware/climate-system-models#evolving-complexity-of-gcms","position":53},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"A hierarchy of complexity for ocean models","lvl2":"4. Introducing the GCM"},"type":"lvl3","url":"/courseware/climate-system-models#a-hierarchy-of-complexity-for-ocean-models","position":54},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"A hierarchy of complexity for ocean models","lvl2":"4. Introducing the GCM"},"content":"\n\n\n\nOne goal of all this complexity is to do more simulation and less parameterization in order to get a more accurate prediction of climate change.\n\nIn terms of our simple view of planetary energy budget, we are trying to represent the net climate feedback parameter \\lambda correctly, and so get the correct climate sensitivity.\n\nIdeally this means basing the model on laws of physics and chemistry.\n\nHowever it doesn’t always work this way. In many cases we know that a feedback operates in nature, but we can’t represent it in terms of first principles.\n\nLand surface processes are a good example.\n\nExchanges of energy, water and carbon between the land and atmosphere are biologically mediated. We must (to a certain extent) rely on empirical relationships. A bit like economic modeling.\n\nWe also must deal with interaction across spatial scales.\n\nE.g. cumulus convection and vertical transport of heat and water vapor\n\n","type":"content","url":"/courseware/climate-system-models#a-hierarchy-of-complexity-for-ocean-models","position":55},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"5. What can we resolve with a 2º atmosphere?"},"type":"lvl2","url":"/courseware/climate-system-models#id-5-what-can-we-resolve-with-a-2-atmosphere","position":56},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"5. What can we resolve with a 2º atmosphere?"},"content":"\n\nThe following animation shows contours of sea level pressure in the control simulation. It is based on 6-hourly output from the numerical model.\n\nThe atmosphere is simulated with a 2º finite volume dynamical core.\n\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('As85L34fKYQ')\n\n","type":"content","url":"/courseware/climate-system-models#id-5-what-can-we-resolve-with-a-2-atmosphere","position":57},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Discussion point:","lvl2":"5. What can we resolve with a 2º atmosphere?"},"type":"lvl3","url":"/courseware/climate-system-models#discussion-point","position":58},{"hierarchy":{"lvl1":"The climate system and climate models","lvl3":"Discussion point:","lvl2":"5. What can we resolve with a 2º atmosphere?"},"content":"How well does this represent the true general circulation of the atmosphere?\n\n","type":"content","url":"/courseware/climate-system-models#discussion-point","position":59},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"Citation information"},"type":"lvl2","url":"/courseware/climate-system-models#citation-information","position":60},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"Citation information"},"content":"Several figures above are reproduced from Chapter 1 of the IPCC AR5 Working Group 1 report.\nThe report and images can be found online at \n\nhttps://​www​.ipcc​.ch​/report​/ar5​/wg1/\n\nThe full citation is:\n\nCubasch, U., D. Wuebbles, D. Chen, M.C. Facchini, D. Frame, N. Mahowald and J.-G. Winther, 2013: Introduction. In: Climate Change 2013: The Physical Science Basis. Contribution of Working Group I to the Fifth Assessment Report of the Intergovernmental Panel on Climate Change [Stocker, T.F., D. Qin, G.-K. Plattner, M. Tignor, S.K. Allen, J. Boschung, A. Nauels, Y. Xia, V. Bex and P.M. Midgley (eds.)]. Cambridge University Press, Cambridge, United Kingdom and New York, NY, USA, pp. 119–158, doi:10.1017/CBO9781107415324.007.\n\nSome other figures are reproduced from \n\nThe Climate Modelling Primer (4th ed)  by Kendal McGuffie and Ann Henderson-Sellers, Wiley-Blackwell 2014.\n\n","type":"content","url":"/courseware/climate-system-models#citation-information","position":61},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"Credits"},"type":"lvl2","url":"/courseware/climate-system-models#credits","position":62},{"hierarchy":{"lvl1":"The climate system and climate models","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/climate-system-models#credits","position":63},{"hierarchy":{"lvl1":"Building simple climate models using climlab"},"type":"lvl1","url":"/courseware/climlab-intro","position":0},{"hierarchy":{"lvl1":"Building simple climate models using climlab"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/climlab-intro","position":1},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"1. Introducing climlab"},"type":"lvl2","url":"/courseware/climlab-intro#id-1-introducing-climlab","position":2},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"1. Introducing climlab"},"content":"","type":"content","url":"/courseware/climlab-intro#id-1-introducing-climlab","position":3},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"About climlab"},"type":"lvl2","url":"/courseware/climlab-intro#about-climlab","position":4},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"About climlab"},"content":"climlab\n\nclimlab \n\nRose, 2018 is a specialized Python package for process-oriented climate modeling. The name is a contraction of CLIMate LABoratory.\n\nIt is based on a very general concept of a model as a collection of individual,\ninteracting processes. climlab defines a base class called Process, which\ncan contain an arbitrarily complex tree of sub-processes (each also some\nsub-class of Process). Every climate process (radiative, dynamical,\nphysical, turbulent, convective, chemical, etc.) can be simulated as a stand-alone\nprocess model given appropriate input, or as a sub-process of a more complex model.\nNew classes of model can easily be defined and run interactively by putting together an\nappropriate collection of sub-processes.\n\nclimlab is an open-source community project. The latest code can always be found on github:\n\nhttps://​github​.com​/climlab​/climlab","type":"content","url":"/courseware/climlab-intro#about-climlab","position":5},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"Installing climlab"},"type":"lvl2","url":"/courseware/climlab-intro#installing-climlab","position":6},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"Installing climlab"},"content":"If you’ve followed \n\nthese instructions from the Climate Laboratory book, then you should be all set -- climlab is automatically installed as part of the suite of tools used in \n\nThe Climate Laboratory.\n\nIf you are maintaining your own Python installation (e.g. on a personal laptop), you can always install climlab by doingconda install -c conda-forge climlab\n\n","type":"content","url":"/courseware/climlab-intro#installing-climlab","position":7},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl2","url":"/courseware/climlab-intro#id-2-using-climlab-to-implement-the-zero-dimensional-energy-balance-model","position":8},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"\n\n","type":"content","url":"/courseware/climlab-intro#id-2-using-climlab-to-implement-the-zero-dimensional-energy-balance-model","position":9},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"The model equation (recap)","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl3","url":"/courseware/climlab-intro#the-model-equation-recap","position":10},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"The model equation (recap)","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"Recall that we have worked with a zero-dimensional \n\nEnergy Balance ModelC \\frac{dT_s}{dt} = (1-\\alpha) Q - \\tau \\sigma T_s^4\n\nHere we are going to implement this exact model using climlab.\n\nYes, we have already written code to implement this model, but we are going to repeat this effort here as a way of learning how to use climlab.\n\nThere are tools within climlab to implement much more complicated models, but the basic interface will be the same.\n\n","type":"content","url":"/courseware/climlab-intro#the-model-equation-recap","position":11},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the state variables for the model","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl3","url":"/courseware/climlab-intro#create-the-state-variables-for-the-model","position":12},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the state variables for the model","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"\n\n#  As usual, we start with some import statements.\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport climlab  # import climlab just like any other package\n\n# create a zero-dimensional domain with a single surface temperature\nstate = climlab.surface_state(num_lat=1,  # a single point\n                              water_depth = 100.,  # 100 meters slab of water (sets the heat capacity)\n                             )\nprint(state)\n\nHere we have created a dictionary called state with a single item called Ts:\n\nprint(state['Ts'])\n\nThis dictionary holds the state variables for our model -- which is this case is a single number!  It is a temperature in degrees Celsius.\n\nFor convenience, we can access the same data as an attribute (which lets us use tab-autocomplete when doing interactive work):\n\nprint(state.Ts)\n\nIt is also possible to see this state dictionary as an xarray.Dataset object:\n\nclimlab.to_xarray(state)\n\n","type":"content","url":"/courseware/climlab-intro#create-the-state-variables-for-the-model","position":13},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the subcomponents of the model","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl3","url":"/courseware/climlab-intro#create-the-subcomponents-of-the-model","position":14},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the subcomponents of the model","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"\n\ndelta_t = 60. * 60. * 24. * 30.  # 30 days, or about 1 month!\n\n#  create the longwave radiation process\nolr = climlab.radiation.Boltzmann(name='OutgoingLongwave',\n                                  state=state, \n                                  tau = 0.612,\n                                  eps = 1.,\n                                  timestep = delta_t)\n#  Look at what we just created\nprint(olr)\n\n#  create the shortwave radiation process\nasr = climlab.radiation.SimpleAbsorbedShortwave(name='AbsorbedShortwave',\n                                                state=state, \n                                                insolation=341.3, \n                                                albedo=0.299,\n                                                timestep = delta_t)\n#  Look at what we just created\nprint(asr)\n\n","type":"content","url":"/courseware/climlab-intro#create-the-subcomponents-of-the-model","position":15},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the model by coupling the subcomponents","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl3","url":"/courseware/climlab-intro#create-the-model-by-coupling-the-subcomponents","position":16},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Create the model by coupling the subcomponents","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"\n\n#  couple them together into a single model\nebm = climlab.couple([olr,asr])\n#  Give the parent process name\nebm.name = 'EnergyBalanceModel'\n#  Examine the model object\nprint(ebm)\n\nThe object called ebm here is the entire model -- including its current state (the temperature Ts) as well as all the methods needed to integrated forward in time!\n\nThe current model state, accessed two ways:\n\nebm.state\n\nebm.Ts\n\n","type":"content","url":"/courseware/climlab-intro#create-the-model-by-coupling-the-subcomponents","position":17},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Take a single timestep forward","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"type":"lvl3","url":"/courseware/climlab-intro#take-a-single-timestep-forward","position":18},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Take a single timestep forward","lvl2":"2. Using climlab to implement the zero-dimensional energy balance model"},"content":"\n\nHere is some internal information about the timestep of the model:\n\nprint(ebm.time['timestep'])\nprint(ebm.time['steps'])\n\nThis says the timestep is 2592000 seconds (30 days!), and the model has taken 0 steps forward so far.\n\nTo take a single step forward:\n\nebm.step_forward()\n\nebm.step_forward()\n\nebm.Ts\n\nThe model got colder!\n\nTo see why, let’s look at some useful diagnostics computed by this model:\n\nebm.diagnostics\n\nThis is another dictionary, now with two items. They should make sense to you.\n\nJust like the state variables, we can access these diagnostics variables as attributes:\n\nebm.OLR\n\nebm.ASR\n\nSo why did the model get colder in the first timestep?\n\nWhat do you think will happen next?\n\n","type":"content","url":"/courseware/climlab-intro#take-a-single-timestep-forward","position":19},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"3. Run the zero-dimensional EBM out to equilibrium"},"type":"lvl2","url":"/courseware/climlab-intro#id-3-run-the-zero-dimensional-ebm-out-to-equilibrium","position":20},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"3. Run the zero-dimensional EBM out to equilibrium"},"content":"\n\nLet’s look at how the model adjusts toward its equilibrium temperature.","type":"content","url":"/courseware/climlab-intro#id-3-run-the-zero-dimensional-ebm-out-to-equilibrium","position":21},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Exercise","lvl2":"3. Run the zero-dimensional EBM out to equilibrium"},"type":"lvl3","url":"/courseware/climlab-intro#exercise","position":22},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Exercise","lvl2":"3. Run the zero-dimensional EBM out to equilibrium"},"content":"Using a for loop, take 500 steps forward with this model\n\nStore the current temperature at each step in an array\n\nMake a graph of the temperature as a function of time\n\n\n\n","type":"content","url":"/courseware/climlab-intro#exercise","position":23},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"4. A climate change scenario"},"type":"lvl2","url":"/courseware/climlab-intro#id-4-a-climate-change-scenario","position":24},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"4. A climate change scenario"},"content":"\n\n","type":"content","url":"/courseware/climlab-intro#id-4-a-climate-change-scenario","position":25},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Description of the scenario","lvl2":"4. A climate change scenario"},"type":"lvl3","url":"/courseware/climlab-intro#description-of-the-scenario","position":26},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Description of the scenario","lvl2":"4. A climate change scenario"},"content":"Suppose we want to investigate the effects of a small decrease in the transmissitivity of the atmosphere tau.\n\nPreviously we used the zero-dimensional model to investigate a hypothetical climate change scenario in which:\n\nthe transmissitivity of the atmosphere tau decreases to 0.57\n\nthe planetary albedo increases to 0.32\n\n","type":"content","url":"/courseware/climlab-intro#description-of-the-scenario","position":27},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Implement the scenario in climlab","lvl2":"4. A climate change scenario"},"type":"lvl3","url":"/courseware/climlab-intro#implement-the-scenario-in-climlab","position":28},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Implement the scenario in climlab","lvl2":"4. A climate change scenario"},"content":"How would we do that using climlab?\n\nRecall that the model is comprised of two sub-components:\n\nfor name, process in ebm.subprocess.items():\n    print(name)\n    print(process)\n\nThe parameter tau is a property of the OutgoingLongwave subprocess:\n\nebm.subprocess['OutgoingLongwave'].tau\n\nand the parameter albedo is a property of the AbsorbedShortwave subprocess:\n\nebm.subprocess['AbsorbedShortwave'].albedo\n\nLet’s make an exact clone of our model and then change these two parameters:\n\nebm2 = climlab.process_like(ebm)\nprint(ebm2)\n\nebm2.subprocess['OutgoingLongwave'].tau = 0.57\nebm2.subprocess['AbsorbedShortwave'].albedo = 0.32\n\nNow our model is out of equilibrium and the climate will change!\n\nTo see this without actually taking a step forward:\n\n#  Computes diagnostics based on current state but does not change the state\nebm2.compute_diagnostics()\nebm2.ASR - ebm2.OLR\n\nShoud the model warm up or cool down?\n\nWell, we can find out:\n\nebm2.Ts\n\nebm2.step_forward()\n\nebm2.Ts\n\n","type":"content","url":"/courseware/climlab-intro#implement-the-scenario-in-climlab","position":29},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Automatic timestepping","lvl2":"4. A climate change scenario"},"type":"lvl3","url":"/courseware/climlab-intro#automatic-timestepping","position":30},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl3":"Automatic timestepping","lvl2":"4. A climate change scenario"},"content":"\n\nOften we want to integrate a model forward in time to equilibrium without needing to store information about the transient state.\n\nclimlab offers convenience methods to do this easily:\n\nebm3 = climlab.process_like(ebm2)\n\nebm3.integrate_years(50)\n\n#  What is the current temperature?\nebm3.Ts\n\n#  How close are we to energy balance?\nebm3.ASR - ebm3.OLR\n\n#  We should be able to accomplish the exact same thing with explicit timestepping\n#  And we could make a time-dependent plot too!\nebm4 = climlab.process_like(ebm2)\n\nnum_steps = 608\nTarray = np.zeros(num_steps)\n\nfor n in range(num_steps):\n    ebm4.step_forward()\n    Tarray[n] = np.squeeze(ebm4.Ts)\n\nebm4.Ts\n\nebm4.ASR - ebm4.OLR\n\nLooks like the same temperature and energy imbalance as we got above using integrate_years for auomatic timestepping.\n\nBut since we save the temperature from each timestep in variable Tarray, now we can make a plot:\n\nplt.plot(Tarray)\nplt.xlabel('Months')\nplt.ylabel('Surface temperature (ºC)')\n\n","type":"content","url":"/courseware/climlab-intro#automatic-timestepping","position":31},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"5. Further climlab resources"},"type":"lvl2","url":"/courseware/climlab-intro#id-5-further-climlab-resources","position":32},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"5. Further climlab resources"},"content":"\n\nWe will be using climlab extensively throughout this course. Lots of examples of more advanced usage are found here in the course notes. Here are some links to other resources:\n\nThe documentation is hosted at \n\nhttps://​climlab​.readthedocs​.io​/en​/latest/\n\nSource code (for both software and docs) are at \n\nhttps://​github​.com​/climlab​/climlab\n\nA video of a talk I gave about climlab at the 2018 AMS Python symposium (January 2018)\n\nSlides from a talk and demonstration that I gave in Febrary 2018 (The Apple Keynote version contains some animations that will not show up in the pdf version)\n\n","type":"content","url":"/courseware/climlab-intro#id-5-further-climlab-resources","position":33},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"Credits"},"type":"lvl2","url":"/courseware/climlab-intro#credits","position":34},{"hierarchy":{"lvl1":"Building simple climate models using climlab","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/climlab-intro#credits","position":35},{"hierarchy":{"lvl1":"Clouds and cloud feedback"},"type":"lvl1","url":"/courseware/clouds","position":0},{"hierarchy":{"lvl1":"Clouds and cloud feedback"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/clouds","position":1},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"type":"lvl2","url":"/courseware/clouds#id-1-optical-properties-of-individual-clouds-depend-on-the-cloud-liquid-water-path","position":2},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"content":"\n\nLet w represent the liquid water content of a unit volume of cloudy air, in units of g m^{-3}.\n\nThen the Liquid Water Path of the cloud isLWP = w ~ \\Delta z\n\nwhere \\Delta z is the depth of the cloudy layer in meters.  LWP has units of g m^{-2}.\n\nLWP determines the key optical properties of the cloud, both in the longwave and shortwave \n\nWebster, 1994:\n\n\n\nA key point about the optical properties of water clouds:\n\nlongwave emissivity / absorptivity increases rapidly with LWP\n\ncloud albedo increases slowly with LWP\n\n","type":"content","url":"/courseware/clouds#id-1-optical-properties-of-individual-clouds-depend-on-the-cloud-liquid-water-path","position":3},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Longwave effects of clouds","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"type":"lvl3","url":"/courseware/clouds#longwave-effects-of-clouds","position":4},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Longwave effects of clouds","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"content":"Because the emissivity saturates for moderately thin clouds, thick clouds behave very much like blackbody absorbers at every level. Emissions from below and within the cloud will be absorbed by the upper part of the cloud.\n\nEmissions to space are therefore governed by the top of the cloud.\n\nThe longwave effects of a thick cloud thus depend strongly on the temperature at the top of the cloud. This temperature is determined primarily by the height of the cloud top.\n\nA high-top cloud will exert a strong greenhouse effect because it absorbs upwelling longwave radiation and re-emits radiation at its cold temperature.\n\nThe longwave effects of clouds tend to warm the surface.\n\n","type":"content","url":"/courseware/clouds#longwave-effects-of-clouds","position":5},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Shortwave effects of clouds","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"type":"lvl3","url":"/courseware/clouds#shortwave-effects-of-clouds","position":6},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Shortwave effects of clouds","lvl2":"1. Optical properties of individual clouds depend on the Cloud Liquid Water Path"},"content":"Because clouds increase the planetary albedo, the shortwave effects of clouds tend to cool the surface.\n\nThe same cloud therefore pushes the planetary energy budget in two directions simultaneously. Which effect dominates depends on\n\nthe temperature at the cloud top relative to the surface temperature\n\nthe cloud liquid water path (cloud depth)\n\nThin clouds are relatively transparent to solar radiation. Thick clouds are effective reflectors.\n\nA thin cirrus cloud, for example, has a negligible albedo but exerts a substantial greenhouse effect because it is near the cold tropopause. These clouds have a net warming effect.\n\nA relatively thick stratus cloud at the top of the planetary boundary layer reflects significant incoming solar radiation. But the temperature at cloud top is not much different from the surface temperature, so the greenhouse effect is negligible (even though the cloud is a very strong longwave absorber!)\n\n","type":"content","url":"/courseware/clouds#shortwave-effects-of-clouds","position":7},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"2. Cloudy sky versus clear sky radiation"},"type":"lvl2","url":"/courseware/clouds#id-2-cloudy-sky-versus-clear-sky-radiation","position":8},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"2. Cloudy sky versus clear sky radiation"},"content":"\n\nLet F = ASR - OLR be the net incoming radiation at TOA.\n\nSuppose that the average flux in the portion of the sky without clouds is F_{clear}.\n\nWe’ll call the flux in the cloudy portion of the sky F_{cloudy}.\n\nThen the total flux is a weighted sumF = (1-c) F_{clear} + c F_{cloudy}\n\nwhere 0 \\le c \\le 1 is the cloud fraction, i.e. the fraction of the sky covered by cloud.\n\nWe can of course break this up into long- and shortwave components:F = F_{LW} + F_{SW}F_{LW} = - \\big((1-c)~OLR_{clear} + c ~ OLR_{cloudy} \\big)F_{SW} = + \\big((1-c)~ASR_{clear} + c ~ ASR_{cloudy} \\big)\n\nThe clouds will act to warm this surface if F_{cloudy} > F_{clear}, in which case the net flux F will increase with the cloud fraction c.\n\nIn our examples above we surmised the following:\n\n","type":"content","url":"/courseware/clouds#id-2-cloudy-sky-versus-clear-sky-radiation","position":9},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"High thin cirrus","lvl2":"2. Cloudy sky versus clear sky radiation"},"type":"lvl4","url":"/courseware/clouds#high-thin-cirrus","position":10},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"High thin cirrus","lvl2":"2. Cloudy sky versus clear sky radiation"},"content":"ASR_{cloudy} \\approx ASR_{clear} \n\nOLR_{cloudy} < OLR_{clear}\n\nF increases with c (these clouds warm the surface)\n\n","type":"content","url":"/courseware/clouds#high-thin-cirrus","position":11},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"Low stratus","lvl2":"2. Cloudy sky versus clear sky radiation"},"type":"lvl4","url":"/courseware/clouds#low-stratus","position":12},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"Low stratus","lvl2":"2. Cloudy sky versus clear sky radiation"},"content":"ASR_{cloudy} < ASR_{clear} \n\nOLR_{cloudy} \\approx OLR_{clear}\n\nF decreases with c (these clouds cool the surface)\n\nMany other cloud types are ambiguous. For example:","type":"content","url":"/courseware/clouds#low-stratus","position":13},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"Deep convective cumulonimbus","lvl2":"2. Cloudy sky versus clear sky radiation"},"type":"lvl4","url":"/courseware/clouds#deep-convective-cumulonimbus","position":14},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"Deep convective cumulonimbus","lvl2":"2. Cloudy sky versus clear sky radiation"},"content":"ASR_{cloudy} < ASR_{clear} \n\nOLR_{cloudy} < OLR_{clear}\n\nF might either increase or decrease with c\n\nWe need a model to work out the details!\n\n","type":"content","url":"/courseware/clouds#deep-convective-cumulonimbus","position":15},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"3. Cloud Radiative Effect (CRE)"},"type":"lvl2","url":"/courseware/clouds#id-3-cloud-radiative-effect-cre","position":16},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"3. Cloud Radiative Effect (CRE)"},"content":"\n\nTypically there is not just one cloud type but many to deal with simultaneously, whether in nature (satellite observations) or in a GCM.\n\nIn practice we rarely calculate F_{cloudy} explicitly.\n\nInstead we define the Cloud Radiative Effect asCRE =  F - F_{clear}\n\nwhich we can write in terms of cloud fraction:CRE = c \\big( F_{cloudy} - F_{clear} \\big)\n\nIn our above examples, CRE is positive for cirrus, negative for low stratus, and unknown for cumulonimbus.\n\nWe calculated CRE (including both longwave and shortwave components) in the CESM simulations back in Assignment 4.\n\n","type":"content","url":"/courseware/clouds#id-3-cloud-radiative-effect-cre","position":17},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"4. Modeling the dependence of CRE on cloud height"},"type":"lvl2","url":"/courseware/clouds#id-4-modeling-the-dependence-of-cre-on-cloud-height","position":18},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"4. Modeling the dependence of CRE on cloud height"},"content":"\n\nWe are now going to use the RRTMG radiation model to compute the cloud radiative effect in a single column, and look at how the CRE depends on cloud properties and the height of the cloud layer.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport climlab\nfrom climlab.radiation import RRTMG\n\n","type":"content","url":"/courseware/clouds#id-4-modeling-the-dependence-of-cre-on-cloud-height","position":19},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Global average observed temperature and specific humidity","lvl2":"4. Modeling the dependence of CRE on cloud height"},"type":"lvl3","url":"/courseware/clouds#global-average-observed-temperature-and-specific-humidity","position":20},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Global average observed temperature and specific humidity","lvl2":"4. Modeling the dependence of CRE on cloud height"},"content":"\n\n#  Get temperature and humidity data from NCEP Reanalysis\nimport xarray as xr\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/\"\npath = ncep_url\nncep_air = xr.open_dataset(path + 'air.mon.1981-2010.ltm.nc', decode_times=False)\nncep_shum = xr.open_dataset(path + 'shum.mon.1981-2010.ltm.nc', decode_times=False)\n## The NOAA ESRL server is shutdown! January 2019\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/pressure/'\n#air = xr.open_dataset(url + 'air')\n#shum = xr.open_dataset(url + 'shum')\n#ncep_air = air.rename({'lev': 'level'})\n#ncep_shum = shum.rename({'lev': 'level'})\n\n#  Take global, annual average and convert to correct units (Kelvin and kg/kg)\nweight = np.cos(np.deg2rad(ncep_air.lat)) / np.cos(np.deg2rad(ncep_air.lat)).mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time')) + climlab.constants.tempCtoK\nSHglobal = (ncep_shum.shum * weight).mean(dim=('lat','lon','time')) * 1E-3  # kg/kg\n\nSince we will be creating a radiative model with a different set of pressure levels than the data, we will need to do some interpolating.\n\n#  Create a state dictionary with 50 levels\nstate = climlab.column_state(num_lev=50)\nlev = state.Tatm.domain.axes['lev'].points\n\n# interpolate to model pressure levels\nTinterp = np.interp(lev, np.flipud(Tglobal.level), np.flipud(Tglobal))\nSHinterp = np.interp(lev, np.flipud(SHglobal.level), np.flipud(SHglobal))\n#  Need to 'flipud' because the interpolation routine \n#  needs the pressure data to be in increasing order\n\n#  Plot the temperature and humidity profiles\nfig, ax1 = plt.subplots(figsize=(8,5))\nTcolor = 'r'\nSHcolor = 'b'\nax1.plot(Tinterp, lev, color=Tcolor)\nax1.invert_yaxis()\nax1.set_xlabel('Temperature (K)', color=Tcolor)\nax1.tick_params('x', colors=Tcolor)\nax1.grid()\nax1.set_ylabel('Pressure (hPa)')\nax2 = ax1.twiny()\nax2.plot(SHinterp*1E3, lev, color=SHcolor)\nax2.set_xlabel('Specific Humidity (g/kg)', color=SHcolor)\nax2.tick_params('x', colors=SHcolor)\nfig.suptitle('Global mean air temperature and specific humidity', y=1.03, fontsize=14)\n\n#  Set the temperature to the observed values\nstate.Tatm[:] = Tinterp\n\n#  Define some local cloud characteristics\n#  We are going to repeat the calculation \n#   for three different types of clouds:\n#   thin, medium, and thick\ncldfrac = 0.5  # layer cloud fraction\nr_liq = 14.  # Cloud water drop effective radius (microns)\n# in-cloud liquid water path (g/m2)\nclwp = {'thin': 20.,\n        'med': 60.,\n        'thick': 200.,}\n\n#  Loop through three types of cloud\n#  for each type, loop through all pressure levels\n#  Set up a radiation model with the cloud layer at the current pressure level\n#  Compute CRE and store the results\nCRE_LW = {}\nCRE_SW = {}\nfor thickness in clwp:\n    OLR = np.zeros_like(lev)\n    ASR = np.zeros_like(lev)\n    OLRclr = np.zeros_like(lev)\n    ASRclr = np.zeros_like(lev)\n    for i in range(lev.size):\n        # Whole-column cloud characteristics\n        #  The cloud fraction is a Gaussian bump centered at the current level        \n        mycloud = {'cldfrac': cldfrac*np.exp(-(lev-lev[i])**2/(2*25.)**2),\n                   'clwp': np.zeros_like(state.Tatm) + clwp[thickness],\n                   'r_liq': np.zeros_like(state.Tatm) + r_liq,}\n        rad = RRTMG(state=state, \n                    albedo=0.2,\n                    specific_humidity=SHinterp,\n                    verbose=False,\n                    **mycloud)\n        rad.compute_diagnostics()\n        OLR[i] = rad.OLR[0]\n        OLRclr[i] = rad.OLRclr[0]\n        ASR[i] = rad.ASR[0]\n        ASRclr[i] = rad.ASRclr[0]\n    CRE_LW[thickness] = -(OLR - OLRclr)\n    CRE_SW[thickness] = (ASR - ASRclr)\n\n#  Make some plots of the CRE dependence on cloud height\nfig, axes = plt.subplots(1,3, figsize=(16,6))\nax = axes[0]\nfor thickness in clwp:\n    ax.plot(CRE_LW[thickness], lev, label=thickness)\nax.set_ylabel('Pressure (hPa)')\nax.set_xlabel('LW cloud radiative effect (W/m2)')\n\nax = axes[1]\nfor thickness in clwp:\n    ax.plot(CRE_SW[thickness], lev, label=thickness)\nax.set_xlabel('SW cloud radiative effect (W/m2)')\n\nax = axes[2]\nfor thickness in clwp:\n    ax.plot(CRE_SW[thickness] + CRE_LW[thickness], lev, label=thickness)\nax.set_xlabel('Net cloud radiative effect (W/m2)')\n\nfor ax in axes:\n    ax.invert_yaxis()\n    ax.legend()\n    ax.grid()\nfig.suptitle('Cloud Radiative Effect as a function of the vertical height of the cloud layer', fontsize=16)\n\nWhat do you see here? Look carefully at how the LW and SW effects of the cloud depend on cloud properties and cloud height.\n\n","type":"content","url":"/courseware/clouds#global-average-observed-temperature-and-specific-humidity","position":21},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"5. Cloud Feedback"},"type":"lvl2","url":"/courseware/clouds#id-5-cloud-feedback","position":22},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"5. Cloud Feedback"},"content":"\n\nCRE (the radiative effects of clouds) depends on two cloud properties:\n\ncloud fraction c\n\ncloud LWP, which determines F_{cloudy}\n\nIf either or both of these things change as the climate changes and the surface warms, then there is an additional TOA energy source that will help determine the final equilibrium warming --  a feedback!\n\nThe cloud feedback thus depends on changes in the frequency of occurrence and the optical properties of all the different cloud types. It’s an enormously complex problem.\n\nFollowing the notation in \n\nthe lecture on climate sensitivity and feedback, we can write the change in the top-of-atmosphere energy budget after the response to a radiative forcing \\Delta R as\\Delta F = \\Delta R - \\Delta T \\left( \\lambda_0 - \\sum_{i=1}^N \\lambda_i \\right)\n\nwhere \\lambda_0 is the “Planck feedback”, or, more precisely, the no-feedback response parameter, while the \\lambda_i are all the additive feedback parameters.\n\nNow usingF = (1-c) F_{clear} + c F_{cloudy}\n\nwe can break up the change in F into components due to changes in cloud fraction, clear-sky flux, and cloud optical properties:\n\n\\Delta F = (1-c)\\Delta F_{clear}  + c \\Delta F_{cloudy}  +\\left( F_{cloudy} - F_{clear} \\right) \\Delta c\n\nwhere c, F_{cloudy}, F_{clear} here would be evaluated from the reference (control) climate, and we assume the changes are small so that the linearization is sensible.\n\n","type":"content","url":"/courseware/clouds#id-5-cloud-feedback","position":23},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Clear-sky and cloud feedbacks","lvl2":"5. Cloud Feedback"},"type":"lvl3","url":"/courseware/clouds#clear-sky-and-cloud-feedbacks","position":24},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Clear-sky and cloud feedbacks","lvl2":"5. Cloud Feedback"},"content":"Equating our two expressions for the TOA change \\Delta F gives(1-c)\\Delta F_{clear}  + c \\Delta F_{cloudy}  +\\left( F_{cloudy} - F_{clear} \\right) \\Delta c = \\Delta R - \\Delta T \\left( \\lambda_0 - \\sum_{i=1}^N \\lambda_i \\right)\n\nWe can break down the net feedback in many different ways, but here we will just conceptually separate clear-sky and cloud feedbacks:\\sum_{i=1}^N \\lambda_i = \\lambda_{clear} + \\lambda_{cloud}\n\nA sensible definition of \\lambda_{cloud} would be involve only changes in cloud fraction and properties. We thus formally define\\lambda_{cloud} = c \\frac{\\Delta F_{cloudy}}{\\Delta T}  +\\left( F_{cloudy} - F_{clear} \\right) \\frac{\\Delta c}{\\Delta T}\n\nwhich we subtract from the net top-of-atmosphere budget to get(1-c)\\Delta F_{clear}  = \\Delta R - \\Delta T \\left( \\lambda_0 - \\lambda_{clear} \\right)\n\nwhich suggests that we can estimate the clear-sky feedback from\\lambda_{clear} = \\lambda_0 - \\frac{\\Delta R}{\\Delta T} + (1-c) \\frac{\\Delta F_{clear}}{\\Delta T}\n\nThis includes processes such as lapse rate feedback, water vapor feedback, and surface albedo feedback.\n\nRemember that all of these expressions can be (and frequently are) decomposed into longwave and shortwave components.\n\n","type":"content","url":"/courseware/clouds#clear-sky-and-cloud-feedbacks","position":25},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Cloud feedback vs. CRE","lvl2":"5. Cloud Feedback"},"type":"lvl3","url":"/courseware/clouds#cloud-feedback-vs-cre","position":26},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl3":"Cloud feedback vs. CRE","lvl2":"5. Cloud Feedback"},"content":"GCM diagnostics usually provide CRE (which are computed by making second passes through the radiation code with the cloud fractions set to zero).\n\nAs we did in Assignment 4, we can compute the change in CRE between a control and perturbation climate.\n\nOne key point here is that the change in CRE is not equivalent to a cloud feedback.\n\nTo see this, first note that\\Delta CRE = \\Delta F - \\Delta F_{clear}\n\nUsing the above definitions we can write this as\\Delta CRE = -c \\Delta F_{clear}  + \\Delta T \\lambda_{cloud}\n\nThe clear sky feedback affects the change in CRE we can measure in a GCM, or observations.\n\nSuppose there is no change in cloud fraction or cloud optical properties. By definition then \\lambda_{cloud} = 0. But we would still measure a non-zero change in CRE.\n\nWhy?\n\nBecause the flux in the clear-sky fraction is changing!\n\n","type":"content","url":"/courseware/clouds#cloud-feedback-vs-cre","position":27},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"So how do we compute \\lambda_{cloud}?","lvl3":"Cloud feedback vs. CRE","lvl2":"5. Cloud Feedback"},"type":"lvl4","url":"/courseware/clouds#so-how-do-we-compute-lambda-cloud","position":28},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl4":"So how do we compute \\lambda_{cloud}?","lvl3":"Cloud feedback vs. CRE","lvl2":"5. Cloud Feedback"},"content":"So long as \\lambda_{clear} is known, it’s easy:\n\nJust measure  \\frac{\\Delta CRE}{\\Delta T} and the cloud fraction c from the model, and solve the above formula to get\\lambda_{cloud}  = \\frac{\\Delta CRE}{\\Delta T} + \\frac{\\Delta F_{clear}}{\\Delta T} + \\lambda_{0} - \\lambda_{clear} - \\frac{\\Delta R}{\\Delta T}\n\nThis is how we can “correct” the change in CRE to get the actual cloud feedback.\n\n","type":"content","url":"/courseware/clouds#so-how-do-we-compute-lambda-cloud","position":29},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"6. Feedback measured in comprehensive GCMs"},"type":"lvl2","url":"/courseware/clouds#id-6-feedback-measured-in-comprehensive-gcms","position":30},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"6. Feedback measured in comprehensive GCMs"},"content":"\n\n\n\nFigure 9.43 | (a) Strengths of individual feedbacks for CMIP3 and CMIP5 models (left and right columns of symbols) for Planck (P), water vapour (WV), clouds (C), albedo (A), lapse rate (LR), combination of water vapour and lapse rate (WV+LR) and sum of all feedbacks except Planck (ALL), from Soden and Held (2006) and Vial et al. (2013), following Soden et al. (2008). CMIP5 feedbacks are derived from CMIP5 simulations for abrupt fourfold increases in CO2 concentrations (4 × CO2). (b) ECS obtained using regression techniques by Andrews et al. (2012) against ECS estimated from the ratio of CO2 ERF to the sum of all feedbacks. The CO2 ERF is one-half the 4 × CO2 forcings from Andrews et al. (2012), and the total feedback (ALL + Planck) is from Vial et al. (2013).\n\nFigure caption reproduced from the AR5 WG1 report \n\nFlato et al., 2013\n\n","type":"content","url":"/courseware/clouds#id-6-feedback-measured-in-comprehensive-gcms","position":31},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"7. Measuring \\lambda_{clear} with radiative kernels"},"type":"lvl2","url":"/courseware/clouds#id-7-measuring-lambda-clear-with-radiative-kernels","position":32},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"7. Measuring \\lambda_{clear} with radiative kernels"},"content":"\n\nSo how are the clear-sky feedbacks (P, WV, LR, A) actually calculated?\n\nPresently, the most popular technique the method of radiative kernels.\n\nYou have been building a (primitive) kernel for the water vapor feedback in the last homework.\n\nSome plots from \n\nHeld & Soden (2000):\n\n\n\nHeld, I. M. and Soden, B. J. (2000). Water vapor feedback and global warming. Ann. Rev. Energy Environ., 25:441–475.\n\nNote\n\nThese notes are unfinished.\n\n","type":"content","url":"/courseware/clouds#id-7-measuring-lambda-clear-with-radiative-kernels","position":33},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"Credits"},"type":"lvl2","url":"/courseware/clouds#credits","position":34},{"hierarchy":{"lvl1":"Clouds and cloud feedback","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/clouds#credits","position":35},{"hierarchy":{"lvl1":"Elementary greenhouse models"},"type":"lvl1","url":"/courseware/elementary-greenhouse","position":0},{"hierarchy":{"lvl1":"Elementary greenhouse models"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/elementary-greenhouse","position":1},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"1. A single layer atmosphere"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-1-a-single-layer-atmosphere","position":2},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"1. A single layer atmosphere"},"content":"\n\nWe will make our first attempt at quantifying the greenhouse effect in the simplest possible greenhouse model: a single layer of atmosphere that is able to absorb and emit longwave radiation.\n\n\n\n","type":"content","url":"/courseware/elementary-greenhouse#id-1-a-single-layer-atmosphere","position":3},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Assumptions","lvl2":"1. A single layer atmosphere"},"type":"lvl3","url":"/courseware/elementary-greenhouse#assumptions","position":4},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Assumptions","lvl2":"1. A single layer atmosphere"},"content":"Atmosphere is a single layer of air at temperature T_a\n\nAtmosphere is completely transparent to shortwave solar radiation.\n\nThe surface absorbs shortwave radiation (1-\\alpha) Q\n\nAtmosphere is completely opaque to infrared radiation\n\nBoth surface and atmosphere emit radiation as blackbodies (\\sigma T_s^4, \\sigma T_a^4)\n\nAtmosphere radiates equally up and down (\\sigma T_a^4)\n\nThere are no other heat transfer mechanisms\n\nWe can now use the concept of energy balance to ask what the temperature need to be in order to balance the energy budgets at the surface and the atmosphere, i.e. the radiative equilibrium temperatures.\n\n","type":"content","url":"/courseware/elementary-greenhouse#assumptions","position":5},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Energy balance at the surface","lvl2":"1. A single layer atmosphere"},"type":"lvl3","url":"/courseware/elementary-greenhouse#energy-balance-at-the-surface","position":6},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Energy balance at the surface","lvl2":"1. A single layer atmosphere"},"content":"\\begin{align*}\n\\text{energy in} &= \\text{energy out} \\\\\n(1-\\alpha) Q + \\sigma T_a^4 &= \\sigma T_s^4 \\\\\n\\end{align*}\n\nThe presence of the atmosphere above means there is an additional source term: downwelling infrared radiation from the atmosphere.\n\nWe call this the back radiation.\n\n","type":"content","url":"/courseware/elementary-greenhouse#energy-balance-at-the-surface","position":7},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Energy balance for the atmosphere","lvl2":"1. A single layer atmosphere"},"type":"lvl3","url":"/courseware/elementary-greenhouse#energy-balance-for-the-atmosphere","position":8},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Energy balance for the atmosphere","lvl2":"1. A single layer atmosphere"},"content":"\\begin{align}\n\\text{energy in} &= \\text{energy out} \\\\\n\\sigma T_s^4 &= A\\uparrow + A\\downarrow = 2 \\sigma T_a^4 \\\\\n\\end{align}\n\nwhich means thatT_s = 2^\\frac{1}{4} T_a \\approx 1.2 T_a\n\nSo we have just determined that, in order to have a purely radiative equilibrium, we must have T_s > T_a.\n\nThe surface must be warmer than the atmosphere.\n\n","type":"content","url":"/courseware/elementary-greenhouse#energy-balance-for-the-atmosphere","position":9},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Solve for the radiative equilibrium surface temperature","lvl2":"1. A single layer atmosphere"},"type":"lvl3","url":"/courseware/elementary-greenhouse#solve-for-the-radiative-equilibrium-surface-temperature","position":10},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Solve for the radiative equilibrium surface temperature","lvl2":"1. A single layer atmosphere"},"content":"Now plug this into the surface equation to find\\frac{1}{2} \\sigma T_s^4 = (1-\\alpha) Q\n\nand use the definition of the emission temperature T_e to write(1-\\alpha) Q = \\sigma T_e^4\n\nIn fact, in this model, T_e is identical to the atmospheric temperature T_a, since all the OLR originates from this layer.\n\nSolve for the surface temperature:T_s = 2^\\frac{1}{4} T_e\n\nPutting in observed numbers, T_e = 255 K gives a surface temperature ofT_s = 303 ~\\text{K}\n\nThis model is one small step closer to reality: surface is warmer than atmosphere, emissions to space generated in the atmosphere, atmosphere heated from below and helping to keep surface warm.\n\n","type":"content","url":"/courseware/elementary-greenhouse#solve-for-the-radiative-equilibrium-surface-temperature","position":11},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Why does this model overpredict the surface temperature","lvl2":"1. A single layer atmosphere"},"type":"lvl3","url":"/courseware/elementary-greenhouse#why-does-this-model-overpredict-the-surface-temperature","position":12},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Why does this model overpredict the surface temperature","lvl2":"1. A single layer atmosphere"},"content":"Our model now overpredicts the surface temperature by about 15ºC (303 K versus the observed 288 K).\n\nIdeas about why?\n\nBasically we just need to read our list of assumptions above and realize that none of them are very good approximations:\n\nAtmosphere absorbs some solar radiation.\n\nAtmosphere is NOT a perfect absorber of longwave radiation\n\nAbsorption and emission varies strongly with wavelength (atmosphere does not behave like a blackbody).\n\nEmissions are not determined by a single temperature T_a but by the detailed vertical profile of air temperture.\n\nEnergy is redistributed in the vertical by a variety of dynamical transport mechanisms (e.g. convection and boundary layer turbulence).\n\n","type":"content","url":"/courseware/elementary-greenhouse#why-does-this-model-overpredict-the-surface-temperature","position":13},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"2. Introducing the two-layer grey gas model"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-2-introducing-the-two-layer-grey-gas-model","position":14},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"2. Introducing the two-layer grey gas model"},"content":"\n\nLet’s generalize the above model just a little bit to build a slighly more realistic model of longwave radiative transfer.\n\nWe will address two shortcomings of our single-layer model:\n\nNo vertical structure\n\n100% longwave opacity\n\nRelaxing these two assumptions gives us what turns out to be a very useful prototype model for understanding how the greenhouse effect works.\n\n","type":"content","url":"/courseware/elementary-greenhouse#id-2-introducing-the-two-layer-grey-gas-model","position":15},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Assumptions","lvl2":"2. Introducing the two-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#assumptions-1","position":16},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Assumptions","lvl2":"2. Introducing the two-layer grey gas model"},"content":"The atmosphere is transparent to shortwave radiation (still)\n\nDivide the atmosphere up into two layers of equal mass (the dividing line is thus at 500 hPa pressure level)\n\nEach layer absorbs only a fraction \\epsilon of whatever longwave radiation is incident upon it.\n\nWe will call the fraction \\epsilon the absorptivity of the layer.\n\nAssume \\epsilon is the same in each layer\n\nThis is called the grey gas model, where grey here means the emission and absorption have no spectral dependence (same at every wavelength).\n\nWe can think of this model informally as a “leaky greenhouse”.\n\nNote that the assumption that \\epsilon is the same in each layer is appropriate if the absorption is actually carried out by a gas that is well-mixed in the atmosphere.\n\nOut of our two most important absorbers:\n\nCO_2 is well mixed\n\nH_2O is not (mostly confined to lower troposphere due to strong temperature dependence of the saturation vapor pressure).\n\nBut we will ignore this aspect of reality for now.\n\n","type":"content","url":"/courseware/elementary-greenhouse#assumptions-1","position":17},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Kirchoff’s Law","lvl2":"2. Introducing the two-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#kirchoffs-law","position":18},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Kirchoff’s Law","lvl2":"2. Introducing the two-layer grey gas model"},"content":"In order to build our model, we need to introduce one additional piece of physics known as Kirchoff’s Law:\\text{absorptivity} = \\text{emissivity}\n\nSo if a layer of atmosphere at temperature T absorbs a fraction \\epsilon of incident longwave radiation, it must emit\\epsilon ~\\sigma ~T^4\n\nboth up and down.\n\n","type":"content","url":"/courseware/elementary-greenhouse#kirchoffs-law","position":19},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"A sketch of the radiative fluxes in the 2-layer atmosphere","lvl2":"2. Introducing the two-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#a-sketch-of-the-radiative-fluxes-in-the-2-layer-atmosphere","position":20},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"A sketch of the radiative fluxes in the 2-layer atmosphere","lvl2":"2. Introducing the two-layer grey gas model"},"content":"\n\n\n\nSurface temperature is T_s\n\nAtm. temperatures are T_0, T_1 where T_0 is closest to the surface.\n\nabsorptivity of atm layers is \\epsilon\n\nSurface emission is \\sigma T_s^4\n\nAtm emission is \\epsilon \\sigma T_0^4, \\epsilon \\sigma T_1^4 (up and down)\n\nAbsorptivity = emissivity for atmospheric layers\n\na fraction (1-\\epsilon) of the longwave beam is transmitted through each layer\n\n","type":"content","url":"/courseware/elementary-greenhouse#a-sketch-of-the-radiative-fluxes-in-the-2-layer-atmosphere","position":21},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-3-tracing-the-upwelling-beam-of-longwave-radiation","position":22},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"\n\nLet’s think about the upwelling beam of longwave radiation, which we denote U.","type":"content","url":"/courseware/elementary-greenhouse#id-3-tracing-the-upwelling-beam-of-longwave-radiation","position":23},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Surface to layer 0","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl3","url":"/courseware/elementary-greenhouse#surface-to-layer-0","position":24},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Surface to layer 0","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"We start at the surface. The upward flux from the surface to layer 0 isU_0 = \\sigma T_s^4\n\n(just the emission from the suface).\n\n","type":"content","url":"/courseware/elementary-greenhouse#surface-to-layer-0","position":25},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Layer 0 to layer 1","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl3","url":"/courseware/elementary-greenhouse#layer-0-to-layer-1","position":26},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Layer 0 to layer 1","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"Now following this beam upward, we first recognize that a fraction \\epsilon of this beam is absorbed in layer 0.\n\nThe upward flux from layer 0 to layer 1 consists of the sum of two parts:\n\nThe transmitted part of whatever is incident from below (i.e. the part that is not absorbed)\n\nNew upward emissions from layer 0\n\nWe can write this upward flux from layer 0 to layer 1 as:U_1 = (1-\\epsilon) \\sigma T_s^4 + \\epsilon \\sigma T_0^4\n\n","type":"content","url":"/courseware/elementary-greenhouse#layer-0-to-layer-1","position":27},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Beyond layer 1","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl3","url":"/courseware/elementary-greenhouse#beyond-layer-1","position":28},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Beyond layer 1","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"Continuing to follow the same beam, we follow the same logic! A fraction \\epsilon of U_1 is absorbed in layer 1, and therefore the transmitted part is (1-\\epsilon) U_1.\n\nIncluding new emissions from layer 1, the upwelling flux above layer 1 isU_2 = (1-\\epsilon) U_1 + \\epsilon \\sigma T_1^4\n\n","type":"content","url":"/courseware/elementary-greenhouse#beyond-layer-1","position":29},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Outgoing Longwave Radiation","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl3","url":"/courseware/elementary-greenhouse#outgoing-longwave-radiation","position":30},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Outgoing Longwave Radiation","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"Since there is no more atmosphere above layer 1, this upwelling beam is our OLR for this model:\\text{OLR} = U_2 = (1-\\epsilon) U_1 + \\epsilon \\sigma T_1^4\n\nwhich, plugging in the above expression for U_1, works out to\\text{OLR} = (1-\\epsilon)^2 \\sigma T_s^4 + \\epsilon(1-\\epsilon)\\sigma T_0^4 + \\epsilon \\sigma T_1^4\n\nHere the three terms represent contributions to the total OLR that originate from each of the three levels\n\n","type":"content","url":"/courseware/elementary-greenhouse#outgoing-longwave-radiation","position":31},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Limits of large and small absorptivity/emissivity","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"type":"lvl3","url":"/courseware/elementary-greenhouse#limits-of-large-and-small-absorptivity-emissivity","position":32},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Limits of large and small absorptivity/emissivity","lvl2":"3. Tracing the upwelling beam of longwave radiation"},"content":"Think about the following two questions:\n\nWhat happens to this expression if \\epsilon=1? What does this represent physically?\n\nWhat about \\epsilon=0?\n\nBy allowing the atmosphere to partially absorb emissions from other levels, we now see that the Outgoing Longwave Radiation to space includes emissions from every level - and therefore affected by temperature at every level!\n\n","type":"content","url":"/courseware/elementary-greenhouse#limits-of-large-and-small-absorptivity-emissivity","position":33},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-4-tuning-the-grey-gas-model-to-observations","position":34},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"4. Tuning the grey gas model to observations"},"content":"\n\nIn building our new model we have introduced exactly one parameter, the absorptivity \\epsilon. We need to choose a value for \\epsilon.\n\nWe will tune our model so that it reproduces the observed global mean OLR given observed global mean temperatures.","type":"content","url":"/courseware/elementary-greenhouse#id-4-tuning-the-grey-gas-model-to-observations","position":35},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Global mean air temperature observations","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/elementary-greenhouse#global-mean-air-temperature-observations","position":36},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Global mean air temperature observations","lvl2":"4. Tuning the grey gas model to observations"},"content":"To get appropriate temperatures for T_s, T_0, T_1, let’s revisit the global, annual mean lapse rate plot from NCEP Reanalysis data we first encountered in the \n\nRadiation notes.\n\n#  This code is used just to create the skew-T plot of global, annual mean air temperature\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom metpy.plots import SkewT\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", use_cftime=True)\n#  Take global, annual average and convert to Kelvin\ncoslat = np.cos(np.deg2rad(ncep_air.lat))\nweight = coslat / coslat.mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\nfig = plt.figure(figsize=(9, 9))\nskew = SkewT(fig, rotation=30)\nskew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')\nskew.ax.set_ylim(1050, 10)\nskew.ax.set_xlim(-75, 45)\n# Add the relevant special lines\nskew.plot_dry_adiabats(linewidth=0.5)\nskew.plot_moist_adiabats(linewidth=0.5)\n#skew.plot_mixing_lines()\nskew.ax.legend()\nskew.ax.set_title('Global, annual mean sounding from NCEP Reanalysis', fontsize = 16);\n\n","type":"content","url":"/courseware/elementary-greenhouse#global-mean-air-temperature-observations","position":37},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Target temperatures for our model tuning","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/elementary-greenhouse#target-temperatures-for-our-model-tuning","position":38},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Target temperatures for our model tuning","lvl2":"4. Tuning the grey gas model to observations"},"content":"First, we setT_s = 288 \\text{ K}\n\nFrom the lapse rate plot, an average temperature for the layer between 1000 and 500 hPa isT_0 = 275 \\text{ K}\n\nDefining an average temperature for the layer between 500 and 0 hPa is more ambiguous because of the lapse rate reversal at the tropopause. We will chooseT_1 = 230 \\text{ K}\n\nFrom the graph, this is approximately the observed global mean temperature at 275 hPa or about 10 km.\n\n","type":"content","url":"/courseware/elementary-greenhouse#target-temperatures-for-our-model-tuning","position":39},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"OLR","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/elementary-greenhouse#olr","position":40},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"OLR","lvl2":"4. Tuning the grey gas model to observations"},"content":"From the \n\nobserved global energy budget we set\\text{OLR} = 238.5 \\text{ W m}^{-2}\n\n","type":"content","url":"/courseware/elementary-greenhouse#olr","position":41},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Solving for \\epsilon","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/elementary-greenhouse#solving-for-epsilon","position":42},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Solving for \\epsilon","lvl2":"4. Tuning the grey gas model to observations"},"content":"We wrote down the expression for OLR as a function of temperatures and absorptivity in our model above.\n\nAll we need to do is plug the observed values into the above expression for OLR, and solve for \\epsilon.\n\nIt is a quadratic equation for the unknown \\epsilon. We could work out the exact solution using the quadratic formula.\n\nBut let’s do it graphically, using Python!\n\n","type":"content","url":"/courseware/elementary-greenhouse#solving-for-epsilon","position":43},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Exercise: graphical solution to find the best fit value of \\epsilon","lvl2":"4. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/elementary-greenhouse#exercise-graphical-solution-to-find-the-best-fit-value-of-epsilon","position":44},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Exercise: graphical solution to find the best fit value of \\epsilon","lvl2":"4. Tuning the grey gas model to observations"},"content":"The OLR formula for the leaky greenhouse that we derived above is\\text{OLR} = (1-\\epsilon)^2 \\sigma T_s^4 + \\epsilon(1-\\epsilon)\\sigma T_0^4 + \\epsilon \\sigma T_1^4\n\nDo the following:\n\nWrite a Python function that implements this formula\n\nThe function should accept four input parameters:\n\nThe three temperatures T_s, T_0, T_1\n\nThe emissivity \\epsilon\n\nUsing this function, make a graph of OLR vs. \\epsilon for the observed temperature values T_s = 288, T_0 = 275, T_1 = 230\n\nFor the graph, \\epsilon should range between 0 and 1.\n\nFrom your graph, find the approximate value of \\epsilon that gives OLR = 238.5\n\n# Some partial code to get you started\ndef OLR(Ts, T0, T1, epsilon):\n    return ... # fill in this line, implementing the formula for OLR above\n\neps_array = ... # make an array of values ranging from 0 to 1\n\n#  uncomment this line to make the plot, after you have created the OLR function\n#plt.plot(eps_array, OLR(288, 275, 230, eps_array))\n# add axis labels and units, e.g. using plt.xlabel() and plt.ylabel()\n#plt.grid()  # uncomment this line to add grid lines to your figure\n\nNote if you solve the quadratic equation algebraically you will get two solutions:\n\n\\epsilon \\approx 0.586\n\n\\epsilon \\approx 3.93\n\n(for details, see \n\nthe advanced notes here)\n\nWhy is the second solution not physically meaningful?\n\nHopefully your graph shows that \\epsilon = 0.586 gives the correct value of OLR.\n\nThis is the absorptivity that guarantees that our model reproduces the observed OLR given the observed temperatures.\n\n","type":"content","url":"/courseware/elementary-greenhouse#exercise-graphical-solution-to-find-the-best-fit-value-of-epsilon","position":45},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"5. Level of emission"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-5-level-of-emission","position":46},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"5. Level of emission"},"content":"\n\n","type":"content","url":"/courseware/elementary-greenhouse#id-5-level-of-emission","position":47},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Contributions from each level to the outgoing radiation","lvl2":"5. Level of emission"},"type":"lvl3","url":"/courseware/elementary-greenhouse#contributions-from-each-level-to-the-outgoing-radiation","position":48},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Contributions from each level to the outgoing radiation","lvl2":"5. Level of emission"},"content":"Now that we have tuned up our model, we can see exactly how strongly each level contributes to the OLR.\n\nThe three components of the OLR are\\begin{align*}\n\\text{OLR}_s &= (1-\\epsilon)^2 \\sigma T_s^4  \\\\\n\\text{OLR}_0 &= \\epsilon(1-\\epsilon)\\sigma T_0^4 \\\\\n\\text{OLR}_1 &= \\epsilon \\sigma T_1^4 \n\\end{align*}\n\nwhich of course add up to the total OLR we wrote down above.\n\n","type":"content","url":"/courseware/elementary-greenhouse#contributions-from-each-level-to-the-outgoing-radiation","position":49},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Exercise: calculate contributions to OLR","lvl2":"5. Level of emission"},"type":"lvl3","url":"/courseware/elementary-greenhouse#exercise-calculate-contributions-to-olr","position":50},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Exercise: calculate contributions to OLR","lvl2":"5. Level of emission"},"content":"Write some simple Python code to calculate each term in the OLR using the observed temperatures and the tuned value \\epsilon = 0.586. Fill out the list below using your calculated numbers.\n\n\n\nContributions to the OLR originating from each level, in W/m2:\n\nSurface:\n\nLevel 0:\n\nLevel 1:\n\n# now sum up the numbers to verify you get something very close to 238.5\n\n\nNotice that the largest single contribution is coming from the top layer.\n\nThis is in spite of the fact that the emissions from this layer are weak, because it is so cold.\n\n","type":"content","url":"/courseware/elementary-greenhouse#exercise-calculate-contributions-to-olr","position":51},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Changing the level of emission by adding absorbers","lvl2":"5. Level of emission"},"type":"lvl3","url":"/courseware/elementary-greenhouse#changing-the-level-of-emission-by-adding-absorbers","position":52},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Changing the level of emission by adding absorbers","lvl2":"5. Level of emission"},"content":"\n\nAdding some extra greenhouse absorbers will mean that a greater fraction of incident longwave radiation is absorbed in each layer.\n\nThus \\epsilon must increase as we add greenhouse gases.\n\nSuppose we have \\epsilon initially, and the absorptivity increases to \\epsilon_2 = \\epsilon + \\Delta \\epsilon.\n\nSuppose further that this increase happens abruptly so that there is no time for the temperatures to respond to this change. We hold the temperatures fixed in the column and ask how the radiative fluxes change.\n\nQuestion: Do you expect the OLR to increase or decrease?\n\n","type":"content","url":"/courseware/elementary-greenhouse#changing-the-level-of-emission-by-adding-absorbers","position":53},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Calculating the change in level of emission","lvl2":"5. Level of emission"},"type":"lvl3","url":"/courseware/elementary-greenhouse#calculating-the-change-in-level-of-emission","position":54},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Calculating the change in level of emission","lvl2":"5. Level of emission"},"content":"Let’s use our two-layer leaky greenhouse model to investigate the answer.\n\nThe components of the OLR before the perturbation are\\begin{align*}\n\\text{OLR}_s &= (1-\\epsilon)^2 \\sigma T_s^4  \\\\\n\\text{OLR}_0 &= \\epsilon(1-\\epsilon)\\sigma T_0^4 \\\\\n\\text{OLR}_1 &= \\epsilon \\sigma T_1^4 \n\\end{align*}\n\nand after the perturbation we have\\begin{align*}\n\\text{OLR}_s &= (1-\\epsilon - \\Delta \\epsilon)^2 \\sigma T_s^4  \\\\\n\\text{OLR}_0 &= (\\epsilon + \\Delta \\epsilon)(1-\\epsilon - \\Delta \\epsilon)\\sigma T_0^4 \\\\\n\\text{OLR}_1 &= (\\epsilon + \\Delta \\epsilon) \\sigma T_1^4 \n\\end{align*}\n\nLet’s subtract off the original components to get the contributions to the change in OLR from each layer:\n\n\\begin{align*}\n\\Delta \\text{OLR}_s &= \\left[(1-\\epsilon - \\Delta \\epsilon)^2 - (1-\\epsilon)^2\\right]\\sigma T_s^4  \\\\\n\\Delta \\text{OLR}_0 &= \\left[(\\epsilon + \\Delta \\epsilon)(1-\\epsilon - \\Delta \\epsilon) - \\epsilon(1-\\epsilon)  \\right] \\sigma T_0^4 \\\\\n\\Delta \\text{OLR}_1 &= \\left[(\\epsilon + \\Delta \\epsilon) - \\epsilon \\right] \\sigma T_1^4 \n\\end{align*}\n\nNow expand this out, but to make things easier to deal with, neglect term in \\Delta \\epsilon^2 (very small - we will be considering changes of less than 10% in \\epsilon):\\begin{align*}\n\\Delta \\text{OLR}_s &\\approx (\\Delta \\epsilon) \\left[ -2(1-\\epsilon) \\right] \\sigma T_s^4  \\\\\n\\Delta \\text{OLR}_0 &\\approx (\\Delta \\epsilon) (1 - 2 \\epsilon) \\sigma T_0^4 \\\\\n\\Delta \\text{OLR}_1 &\\approx (\\Delta \\epsilon) \\sigma T_1^4 \n\\end{align*}\n\nNow look at the sign of each term. Recall that 0 < \\epsilon < 1. Which terms in the OLR go up and which go down?\n\nTHIS IS VERY IMPORTANT, SO STOP AND THINK ABOUT IT.\n\nThe contribution from the surface must decrease, while the contribution from the top layer must increase.\n\nWhen we add absorbers, the average level of emission goes up!\n\n","type":"content","url":"/courseware/elementary-greenhouse#calculating-the-change-in-level-of-emission","position":55},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-6-radiative-forcing-in-the-2-layer-grey-gas-model","position":56},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"\n\n","type":"content","url":"/courseware/elementary-greenhouse#id-6-radiative-forcing-in-the-2-layer-grey-gas-model","position":57},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Definition of Radiative Forcing","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#definition-of-radiative-forcing","position":58},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Definition of Radiative Forcing","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"We now define a very important quantity:\n\n“Radiative forcing” is the change in total radiative flux at TOA after adding absorbers\n\nIn this model, only the longwave flux can change, so we calculate the radiative forcing asR = - \\Delta \\text{OLR}\n\n(with the minus sign so that R is positive when the climate system is gaining extra energy).\n\n","type":"content","url":"/courseware/elementary-greenhouse#definition-of-radiative-forcing","position":59},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Connection between radiative forcing and level of emission","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#connection-between-radiative-forcing-and-level-of-emission","position":60},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Connection between radiative forcing and level of emission","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"We just worked out that whenever we add some extra absorbers, the emissions to space (on average) will originate from higher levels in the atmosphere.\n\nWhat does this mean for OLR? Will it increase or decrease?\n\nTo get the answer, we just have to sum up the three contributions we wrote above:\n\n\\begin{align*}\nR &= -\\Delta \\text{OLR}_s - \\Delta \\text{OLR}_0 - \\Delta \\text{OLR}_1  \\\\\n  &= -\\Delta \\epsilon \\left[  -2(1-\\epsilon) \\sigma T_s^4 + (1 - 2 \\epsilon) \\sigma T_0^4  + \\sigma T_1^4 \\right]\n\\end{align*}\n\nIs this a positive or negative number? The key point is this:\n\nIt depends on the temperatures, i.e. on the lapse rate.\n\n","type":"content","url":"/courseware/elementary-greenhouse#connection-between-radiative-forcing-and-level-of-emission","position":61},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#greenhouse-effect-for-an-isothermal-atmosphere","position":62},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"Stop and think about this question:\n\nIf the surface and atmosphere are all at the same temperature, does the OLR go up or down when \\epsilon increases (i.e. we add more absorbers)?\n\nUnderstanding this question is key to understanding how the greenhouse effect works.\n\n","type":"content","url":"/courseware/elementary-greenhouse#greenhouse-effect-for-an-isothermal-atmosphere","position":63},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl4":"Let’s solve the isothermal case","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/elementary-greenhouse#lets-solve-the-isothermal-case","position":64},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl4":"Let’s solve the isothermal case","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"We will just set T_s = T_0 = T_1 in the above expression for the radiative forcing.\n\nWhat do you get?\n\n\n\n","type":"content","url":"/courseware/elementary-greenhouse#lets-solve-the-isothermal-case","position":65},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl4":"The answer is R=0","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/elementary-greenhouse#the-answer-is-r-0","position":66},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl4":"The answer is R=0","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"For an isothermal atmosphere, there is no change in OLR when we add extra greenhouse absorbers. Hence, no radiative forcing and no greenhouse effect.\n\nWhy?\n\nThe level of emission still must go up. But since the temperature at the upper level is the same as everywhere else, the emissions are exactly the same.\n\n","type":"content","url":"/courseware/elementary-greenhouse#the-answer-is-r-0","position":67},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"The radiative forcing (change in OLR) depends on the lapse rate!","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/elementary-greenhouse#the-radiative-forcing-change-in-olr-depends-on-the-lapse-rate","position":68},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"The radiative forcing (change in OLR) depends on the lapse rate!","lvl2":"6. Radiative forcing in the 2-layer grey gas model"},"content":"\n\nFor a more realistic example of radiative forcing due to an increase in greenhouse absorbers, we use our observed temperatures and the tuned value for \\epsilon.\n\nWe’ll express the answer in W m^{-2} for a 2% increase in \\epsilon:\\Delta \\epsilon = 0.02 \\times 0.58\n\nepsilon = 0.586041150248834\ndelta_epsilon = 0.02 * epsilon\ndelta_epsilon\n\nCalculate the three components of the radiative forcing:\n\nsigma = 5.67E-8\nTs = 288.\nT0 = 275.\nT1 = 230.\n\n#  Component originating from the surface\nRs = -delta_epsilon * (-2*(1-epsilon)*sigma * Ts**4)\nRs\n\n#  Component originating from level 0\nR0 = -delta_epsilon * (1-2*epsilon) * sigma * T0**4\nR0\n\n#  Component originating from level 1\nR1 = -delta_epsilon * sigma * T1**4\nR1\n\nSo just add them up to get the total radiative forcing:\n\nR = Rs + R0 + R1 \nR\n\nSo in our example, the OLR decreases by 2.6 W m^{-2}, or equivalently, the radiative forcing is +2.6 W m^{-2}.\n\nWhat we have just calculated is this:\n\nGiven the observed lapse rates, a small increase in absorbers will cause a small decrease in OLR.\n\nThe greenhouse effect thus gets stronger, and energy will begin to accumulate in the system -- which will eventually cause temperatures to increase as the system adjusts to a new equilibrium.\n\n","type":"content","url":"/courseware/elementary-greenhouse#the-radiative-forcing-change-in-olr-depends-on-the-lapse-rate","position":69},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"7. Summary"},"type":"lvl2","url":"/courseware/elementary-greenhouse#id-7-summary","position":70},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"7. Summary"},"content":"\n\n","type":"content","url":"/courseware/elementary-greenhouse#id-7-summary","position":71},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Key physical lessons","lvl2":"7. Summary"},"type":"lvl3","url":"/courseware/elementary-greenhouse#key-physical-lessons","position":72},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl3":"Key physical lessons","lvl2":"7. Summary"},"content":"Putting a layer of longwave absorbers above the surface keeps the surface substantially warmer, because of the backradiation from the atmosphere (greenhouse effect).\n\nThe grey gas model assumes that each layer absorbs and emits a fraction \\epsilon of its blackbody value, independent of wavelength.\n\nWith incomplete absorption (\\epsilon < 1), there are contributions to the OLR from every level and the surface (there is no single level of emission)\n\nAdding more absorbers means that contributions to the OLR from upper levels go up, while contributions from the surface go down.\n\nThis upward shift in the weighting of different levels is what we mean when we say the level of emission goes up.\n\nThe radiative forcing caused by an increase in absorbers depends on the lapse rate.\n\nFor an isothermal atmosphere the radiative forcing is zero and there is no greenhouse effect\n\nThe radiative forcing is positive for our atmosphere because tropospheric temperatures tend to decrease with height.\n\n","type":"content","url":"/courseware/elementary-greenhouse#key-physical-lessons","position":73},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"Credits"},"type":"lvl2","url":"/courseware/elementary-greenhouse#credits","position":74},{"hierarchy":{"lvl1":"Elementary greenhouse models","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/elementary-greenhouse#credits","position":75},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab"},"type":"lvl1","url":"/courseware/grey-radiation-climlab","position":0},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/grey-radiation-climlab","position":1},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"1. Introducing climlab"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-1-introducing-climlab","position":2},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"1. Introducing climlab"},"content":"","type":"content","url":"/courseware/grey-radiation-climlab#id-1-introducing-climlab","position":3},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"About climlab"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#about-climlab","position":4},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"About climlab"},"content":"climlab is a specialized python package for process-oriented climate modeling.\n\nIt is based on a very general concept of a model as a collection of individual,\ninteracting processes. climlab defines a base class called Process, which\ncan contain an arbitrarily complex tree of sub-processes (each also some\nsub-class of Process). Every climate process (radiative, dynamical,\nphysical, turbulent, convective, chemical, etc.) can be simulated as a stand-alone\nprocess model given appropriate input, or as a sub-process of a more complex model.\nNew classes of model can easily be defined and run interactively by putting together an\nappropriate collection of sub-processes.\n\nclimlab is an open-source community project. The latest code can always be found on github:\n\nhttps://​github​.com​/climlab​/climlab","type":"content","url":"/courseware/grey-radiation-climlab#about-climlab","position":5},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"Installing climlab"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#installing-climlab","position":6},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"Installing climlab"},"content":"If you’ve followed \n\nthese instructions from the Climate Laboratory book, then you should be all set -- climlab is automatically installed as part of the suite of tools used in \n\nThe Climate Laboratory.\n\nIf you are maintaining your own Python installation (e.g. on a personal laptop), you can always install climlab by doingconda install -c conda-forge climlab\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom numpy import cos, deg2rad, log\nimport climlab\n\n","type":"content","url":"/courseware/grey-radiation-climlab#installing-climlab","position":7},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-2-using-climlab-to-implement-the-two-layer-leaky-greenhouse-model","position":8},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"content":"\n\nOne of the things that climlab is set up to do is the grey-radiation modeling we have already been discussing.\n\nSince we already derived a \n\ncomplete analytical solution to the two-layer leaky greenhouse model, we will use this to validate the climlab code.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-2-using-climlab-to-implement-the-two-layer-leaky-greenhouse-model","position":9},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Validation","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#validation","position":10},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Validation","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"content":"We want to verify that the model reproduces the observed OLR given observed temperatures, and the absorptivity that we tuned in the analytical model. The target numbers are:\\begin{align}\nT_s &= 288 \\text{ K} \\\\\nT_0 &= 275 \\text{ K} \\\\\nT_1 &= 230 \\text{ K} \\\\\n\\end{align}\\epsilon = 0.586OLR = 238.5 \\text{ W m}^{-2}\n\n","type":"content","url":"/courseware/grey-radiation-climlab#validation","position":11},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Initialize a model in climlab","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#initialize-a-model-in-climlab","position":12},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Initialize a model in climlab","lvl2":"2. Using climlab to implement the two-layer leaky greenhouse model"},"content":"The first thing we do is create a new model.\n\nThe following example code is sparsely commented but will hopefully orient you on the basics of defining and working with a climlab Process object.\n\n#  Test in a 2-layer atmosphere\ncol = climlab.GreyRadiationModel(num_lev=2)\nprint( col)\n\ncol.subprocess\n\nEvery item in the above dictionary is itself an instance of the climlab.Process object:\n\nprint( col.subprocess['LW'])\n\nThe state dictionary holds the state variables of the model. In this case, temperatures:\n\nclimlab.to_xarray(col.state)\n\nAccess these either through dictionary methods or as attributes of the model object:\n\nprint( col.state['Ts'])\nprint( col.Ts)\ncol.Ts is col.state['Ts']\n\nNow we are assigning the “observed” temperatures to our model state:\n\ncol.Ts[:] = 288.\ncol.Tatm[:] = np.array([230., 275.])\nclimlab.to_xarray(col.state)\n\nLW = col.subprocess['LW']\nprint(LW)\n\nLW.absorptivity\n\n#  copying the tuned value of epsilon from Lecture 6 notes\nLW.absorptivity = 0.586\nLW.absorptivity\n\n#  This does all the calculations that would be performed at each time step, \n#  but doesn't actually update the temperatures\ncol.compute_diagnostics()\n#  Print out the dictionary\ncol.diagnostics\n\n#  Check OLR against our analytical solution\ncol.OLR\n\n# Like the state variables, the diagnostics can also be accessed in two different ways\ncol.diagnostics['OLR']\n\ncol.state\n\n# perform a single time step\ncol.step_forward()\n\ncol.state\n\nWe just stepped forward one discreet unit in time. Because we didn’t specify a timestep when we created the model, it is set to a default value:\n\ncol.timestep\n\nwhich is 1 day (expressed in seconds).\n\nNow we will integrate the model out to equilibrium.\n\nWe could easily write a loop to call the step_forward() method many times.\n\nOr use a handy shortcut that allows us to specify the integration length in physical time units:\n\n# integrate out to radiative equilibrium\ncol.integrate_years(2.)\n\n# Check for equilibrium\ncol.ASR - col.OLR\n\n#  The temperatures at radiative equilibrium\ncol.state\n\nCompare these to the analytical solutions for radiative equilibrium with \\epsilon = 0.58:\\begin{align}\nT_s &= 296.4 \\text{ K} \\\\\nT_0 &= 262.3 \\text{ K} \\\\\nT_1 &= 233.8 \\text{ K} \\\\\n\\end{align}\n\nSo it looks like climlab agrees with our analytical results to within 0.1 K. That’s good.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#initialize-a-model-in-climlab","position":13},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"3. The observed annual, global mean temperature profile"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-3-the-observed-annual-global-mean-temperature-profile","position":14},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"3. The observed annual, global mean temperature profile"},"content":"\n\nWe want to model the OLR in a column whose temperatures match observations. As we’ve done before, we’ll calculate the global, annual mean air temperature from the NCEP Reanalysis data.\n\n## The NOAA ESRL server is shutdown! January 2019\n## This will try to read the data over the internet.\nncep_filename = 'air.mon.1981-2010.ltm.nc'\n##  to read over internet\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/\"\npath = ncep_url\n##  Open handle to data\nncep_air = xr.open_dataset( path + ncep_filename, decode_times=False )\n\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/pressure/air'\n#air = xr.open_dataset(url)\n# The name of the vertical axis is different than the NOAA ESRL version..\n#ncep_air = air.rename({'lev': 'level'})\nncep_air\n\n#  Take global, annual average and convert to Kelvin\nweight = cos(deg2rad(ncep_air.lat)) / cos(deg2rad(ncep_air.lat)).mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\nTglobal\n\nWe’re going to convert this to degrees Kelvin, using a handy list of pre-defined constants in climlab.constants\n\nclimlab.constants.tempCtoK\n\nTglobal += climlab.constants.tempCtoK\nTglobal\n\n#  A handy re-usable routine for making a plot of the temperature profiles\n#  We will plot temperatures with respect to log(pressure) to get a height-like coordinate\n\ndef zstar(lev):\n    return -np.log(lev / climlab.constants.ps)\n\ndef plot_soundings(result_list, name_list, plot_obs=True, fixed_range=True):\n    color_cycle=['r', 'g', 'b', 'y']\n    # col is either a column model object or a list of column model objects\n    #if isinstance(state_list, climlab.Process):\n    #    # make a list with a single item\n    #    collist = [collist]\n    fig, ax = plt.subplots(figsize=(9,9))\n    if plot_obs:\n        ax.plot(Tglobal, zstar(Tglobal.level), color='k', label='Observed')    \n    for i, state in enumerate(result_list):\n        Tatm = state['Tatm']\n        lev = Tatm.domain.axes['lev'].points\n        Ts = state['Ts']\n        ax.plot(Tatm, zstar(lev), color=color_cycle[i], label=name_list[i])\n        ax.plot(Ts, 0, 'o', markersize=12, color=color_cycle[i])\n    #ax.invert_yaxis()\n    yticks = np.array([1000., 750., 500., 250., 100., 50., 20., 10., 5.])\n    ax.set_yticks(-np.log(yticks/1000.))\n    ax.set_yticklabels(yticks)\n    ax.set_xlabel('Temperature (K)', fontsize=14)\n    ax.set_ylabel('Pressure (hPa)', fontsize=14)\n    ax.grid()\n    ax.legend()\n    if fixed_range:\n        ax.set_xlim([200, 300])\n        ax.set_ylim(zstar(np.array([1000., 5.])))\n    #ax2 = ax.twinx()\n    \n    return ax\n\nplot_soundings([],[] );\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-3-the-observed-annual-global-mean-temperature-profile","position":15},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"4. A 30-layer model using the observed temperatures"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-4-a-30-layer-model-using-the-observed-temperatures","position":16},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"4. A 30-layer model using the observed temperatures"},"content":"\n\n#  initialize a grey radiation model with 30 levels\ncol = climlab.GreyRadiationModel()\nprint(col)\n\ncol.lev\n\ncol.lev_bounds\n\n# interpolate to 30 evenly spaced pressure levels\nlev = col.lev\nTinterp = np.interp(lev, np.flipud(Tglobal.level), np.flipud(Tglobal))\nTinterp\n#  Need to 'flipud' because the interpolation routine \n#  needs the pressure data to be in increasing order\n\n# Initialize model with observed temperatures\ncol.Ts[:] = Tglobal[0]\ncol.Tatm[:] = Tinterp\n\n# This should look just like the observations\nresult_list = [col.state]\nname_list = ['Observed, interpolated']\nplot_soundings(result_list, name_list);\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-4-a-30-layer-model-using-the-observed-temperatures","position":17},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Tune absorptivity to get observed OLR","lvl2":"4. A 30-layer model using the observed temperatures"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#tune-absorptivity-to-get-observed-olr","position":18},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Tune absorptivity to get observed OLR","lvl2":"4. A 30-layer model using the observed temperatures"},"content":"\n\ncol.compute_diagnostics()\ncol.OLR\n\n# Need to tune absorptivity to get OLR = 238.5\nepsarray = np.linspace(0.01, 0.1, 100)\nOLRarray = np.zeros_like(epsarray)\n\nfor i in range(epsarray.size):\n    col.subprocess['LW'].absorptivity = epsarray[i]\n    col.compute_diagnostics()\n    OLRarray[i] = col.OLR\n\nplt.plot(epsarray, OLRarray)\nplt.grid()\nplt.xlabel('epsilon')\nplt.ylabel('OLR')\n\nThe necessary value seems to lie near 0.055 or so.\n\nWe can be more precise with a numerical root-finder.\n\ndef OLRanom(eps):\n    col.subprocess['LW'].absorptivity = eps\n    col.compute_diagnostics()\n    return col.OLR - 238.5\n\n# Use numerical root-finding to get the equilibria\nfrom scipy.optimize import brentq\n# brentq is a root-finding function\n#  Need to give it a function and two end-points\n#  It will look for a zero of the function between those end-points\neps = brentq(OLRanom, 0.01, 0.1)\nprint( eps)\n\ncol.subprocess.LW.absorptivity = eps\ncol.subprocess.LW.absorptivity\n\ncol.compute_diagnostics()\ncol.OLR\n\n","type":"content","url":"/courseware/grey-radiation-climlab#tune-absorptivity-to-get-observed-olr","position":19},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"5. Radiative forcing in the 30-layer model"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-5-radiative-forcing-in-the-30-layer-model","position":20},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"5. Radiative forcing in the 30-layer model"},"content":"\n\nLet’s compute radiative forcing for a 2% increase in absorptivity.\n\n#  clone our model using a built-in climlab function\ncol2 = climlab.process_like(col)\nprint(col2)\n\ncol2.subprocess['LW'].absorptivity *= 1.02\ncol2.subprocess['LW'].absorptivity\n\n#  Radiative forcing by definition is the change in TOA radiative flux,\n# HOLDING THE TEMPERATURES FIXED.\ncol2.Ts - col.Ts\n\ncol2.Tatm - col.Tatm\n\ncol2.compute_diagnostics()\ncol2.OLR\n\nThe OLR decreased after we added the extra absorbers, as we expect. Now we can calculate the Radiative Forcing:\n\nRF = -(col2.OLR - col.OLR)\nprint( 'The radiative forcing is %.2f W/m2.' %RF)\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-5-radiative-forcing-in-the-30-layer-model","position":21},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"6. Radiative equilibrium in the 30-layer model"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-6-radiative-equilibrium-in-the-30-layer-model","position":22},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"6. Radiative equilibrium in the 30-layer model"},"content":"\n\nre = climlab.process_like(col)\n\n#  To get to equilibrium, we just time-step the model forward long enough\nre.integrate_years(1.)\n\n#  Check for energy balance\nprint( 'The net downward radiative flux at TOA is %.4f W/m2.' %(re.ASR - re.OLR))\n\nresult_list.append(re.state)\nname_list.append('Radiative equilibrium (grey gas)')\nplot_soundings(result_list, name_list)\n\nSome properties of the radiative equilibrium temperature profile:\n\nThe surface is warmer than observed.\n\nThe lower troposphere is colder than observed.\n\nVery cold air is sitting immediately above the warm surface.\n\nThere is no tropopause, no stratosphere.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-6-radiative-equilibrium-in-the-30-layer-model","position":23},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"7. Radiative-Convective Equilibrium in the 30-layer model"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-7-radiative-convective-equilibrium-in-the-30-layer-model","position":24},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"7. Radiative-Convective Equilibrium in the 30-layer model"},"content":"\n\nWe recognize that the large drop in temperature just above the surface is unphysical. Parcels of air in direct contact with the ground will be warmed by mechansisms other than radiative transfer.\n\nThese warm air parcels will then become buoyant, and will convect upward, mixing their heat content with the environment.\n\nWe parameterize the statistical effects of this mixing through a convective adjustment.\n\nAt each timestep, our model checks for any locations at which the lapse rate exceeds some threshold. Unstable layers are removed through an energy-conserving mixing formula.\n\nThis process is assumed to be fast relative to radiative heating. In the model, it is instantaneous.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-7-radiative-convective-equilibrium-in-the-30-layer-model","position":25},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Add the convective adjustment as an additional subprocess","lvl2":"7. Radiative-Convective Equilibrium in the 30-layer model"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#add-the-convective-adjustment-as-an-additional-subprocess","position":26},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Add the convective adjustment as an additional subprocess","lvl2":"7. Radiative-Convective Equilibrium in the 30-layer model"},"content":"\n\n#  Here is the existing model\nprint(re)\n\n#  First we make a new clone\nrce = climlab.process_like(re)\n#  Then create a new ConvectiveAdjustment process\nconv = climlab.convection.ConvectiveAdjustment(state=rce.state, \n                                               adj_lapse_rate=6.)\n#  And add it to our model\nrce.add_subprocess('Convective Adjustment', conv)\nprint(rce)\n\nThis model is exactly like our previous models, except for one additional subprocess called Convective Adjustment.\n\nWe passed a parameter adj_lapse_rate (in K / km) that sets the neutrally stable lapse rate -- in this case, 6 K / km.\n\nThis number is chosed to very loosely represent the net effect of moist convection.\n\n#  Run out to equilibrium\nrce.integrate_years(1.)\n\n#  Check for energy balance\nrce.ASR - rce.OLR\n\nresult_list.append(rce.state)\nname_list.append('Radiatve-Convective equilibrium (grey gas)')\n\nplot_soundings(result_list, name_list)\n\nIntroducing convective adjustment into the model cools the surface quite a bit (compared to Radiative Equilibrium, in green here) -- and warms the lower troposphere. It gives us a MUCH better fit to observations.\n\nBut of course we still have no stratosphere.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#add-the-convective-adjustment-as-an-additional-subprocess","position":27},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#id-8-putting-stratospheric-ozone-in-the-grey-gas-model","position":28},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"content":"\n\nOur model has no equivalent of the stratosphere, where temperature increases with height. That’s because our model has been completely transparent to shortwave radiation up until now.\n\nWe can load the observed ozone climatology from the input files for the CESM model:\n\ndatapath = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\nozone = xr.open_dataset( datapath + \"som_input/ozone_1.9x2.5_L26_2000clim_c091112.nc\")\n\nozone\n\nThe pressure levels in this dataset are:\n\nozone.lev\n\n","type":"content","url":"/courseware/grey-radiation-climlab#id-8-putting-stratospheric-ozone-in-the-grey-gas-model","position":29},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Take the global average of the ozone climatology, and plot it as a function of pressure (or height)","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#take-the-global-average-of-the-ozone-climatology-and-plot-it-as-a-function-of-pressure-or-height","position":30},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"Take the global average of the ozone climatology, and plot it as a function of pressure (or height)","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"content":"\n\n#  Take global, annual average and convert to Kelvin\nweight_ozone = cos(deg2rad(ozone.lat)) / cos(deg2rad(ozone.lat)).mean(dim='lat')\nO3_global = (ozone.O3 * weight_ozone).mean(dim=('lat','lon','time'))\nO3_global\n\nax = plt.figure(figsize=(10,8)).add_subplot(111)\nax.plot( O3_global * 1.E6, -np.log(ozone.lev/climlab.constants.ps) )\nax.set_xlabel('Ozone (ppm)', fontsize=16)\nax.set_ylabel('Pressure (hPa)', fontsize=16 )\nyticks = np.array([1000., 750., 500., 250., 100., 50., 20., 10., 5.])\nax.set_yticks(-np.log(yticks/1000.))\nax.set_yticklabels(yticks)\nax.grid()\nax.set_title('Global, annual mean ozone concentration', fontsize = 24);\n\nThis shows that most of the ozone is indeed in the stratosphere, and peaks near the top of the stratosphere.\n\nNow create a new column model object on the same pressure levels as the ozone data.  We are also going set an adjusted lapse rate of 6 K / km.\n\n# the RadiativeConvectiveModel is pre-defined in climlab\n#  It contains the same components are our previous model\n#   But here we are specifying a different set of vertical levels.\noz_col = climlab.RadiativeConvectiveModel(lev = ozone.lev, adj_lapse_rate=6)\nprint(oz_col)\n\nNow we will do something new: let the column absorb some shortwave radiation. We will assume that the shortwave absorptivity is proportional to the ozone concentration we plotted above.\n\nNow we need to weight the absorptivity by the pressure (mass) of each layer.\n\n# This number is an arbitrary parameter that scales how absorptive we are making the ozone\n# in our grey gas model\nozonefactor = 75\ndp = oz_col.Tatm.domain.lev.delta\nepsSW = O3_global.values * dp * ozonefactor\n\nWe want to use the field epsSW as the absorptivity for our SW radiation model.\n\nLet’s see what the absorptivity is current set to:\n\nprint(oz_col.subprocess['SW'].absorptivity)\n\nIt defaults to zero.\n\nBefore changing this (putting in the ozone), let’s take a look at the shortwave absorption in the column:\n\noz_col.compute_diagnostics()\n\noz_col.diagnostics['SW_absorbed_atm']\n\nLet’s now put in the ozone:\n\noz_col.subprocess['SW'].absorptivity = epsSW\nprint(oz_col.subprocess['SW'].absorptivity)\n\nLet’s check how this changes the SW absorption:\n\noz_col.compute_diagnostics()\noz_col.SW_absorbed_atm\n\nIt is now non-zero, and largest near the top of the column (also top of the array) where the ozone concentration is highest.\n\nNow it’s time to run the model out to radiative-convective equilibrium\n\noz_col.integrate_years(1.)\n\nprint(oz_col.ASR - oz_col.OLR)\n\nAnd let’s now see what we got!\n\nresult_list.append(oz_col.state)\nname_list.append('Radiative-Convective equilibrium with O3')\n\n#  Make a plot to compare observations, Radiative Equilibrium, Radiative-Convective Equilibrium, and RCE with ozone!\nplot_soundings(result_list, name_list)\n\nAnd we finally have something that looks looks like the tropopause, with temperature increasing above at approximately the correct rate.\n\nThere are still plenty of discrepancies between this model solution and the observations, including:\n\nTropopause temperature is too warm, by about 15 degrees.\n\nSurface temperature is too cold\n\nThere are a number of parameters we might adjust if we wanted to improve the fit, including:\n\nLongwave absorptivity\n\nSurface albedo\n\nFeel free to experiment! (That’s what models are for, after all).\n\n","type":"content","url":"/courseware/grey-radiation-climlab#take-the-global-average-of-the-ozone-climatology-and-plot-it-as-a-function-of-pressure-or-height","position":31},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"The take home message","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"type":"lvl3","url":"/courseware/grey-radiation-climlab#the-take-home-message","position":32},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl3":"The take home message","lvl2":"8. Putting stratospheric ozone in the grey-gas model"},"content":"The dominant effect of stratospheric ozone is to vastly increase the radiative equilibrium temperature in the ozone layer. The temperature needs to be higher so that the longwave emission can balance the shortwave absorption.\n\nWithout ozone to absorb incoming solar radiation, the temperature does not increase with height.\n\nThis simple grey-gas model illustrates this principle very clearly.\n\n","type":"content","url":"/courseware/grey-radiation-climlab#the-take-home-message","position":33},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"Credits"},"type":"lvl2","url":"/courseware/grey-radiation-climlab#credits","position":34},{"hierarchy":{"lvl1":"Grey radiation modeling with climlab","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/grey-radiation-climlab#credits","position":35},{"hierarchy":{"lvl1":"Heat transport"},"type":"lvl1","url":"/courseware/heat-transport","position":0},{"hierarchy":{"lvl1":"Heat transport"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/heat-transport","position":1},{"hierarchy":{"lvl1":"Heat transport","lvl2":"1. Spatial patterns of insolation and surface temperature"},"type":"lvl2","url":"/courseware/heat-transport#id-1-spatial-patterns-of-insolation-and-surface-temperature","position":2},{"hierarchy":{"lvl1":"Heat transport","lvl2":"1. Spatial patterns of insolation and surface temperature"},"content":"\n\nLet’s take a look at seasonal and spatial pattern of insolation and compare this to the zonal average surface temperatures.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport climlab\nfrom climlab import constants as const\n\n#  Calculate daily average insolation as function of latitude and time of year\nlat = np.linspace( -90., 90., 500 )\ndays = np.linspace(0, const.days_per_year, 365 )\nQ = climlab.solar.insolation.daily_insolation( lat, days )\n\n##  daily surface temperature from  NCEP reanalysis\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\nncep_temp = xr.open_dataset( ncep_url + \"surface_gauss/skt.sfc.day.1981-2010.ltm.nc\", decode_times=False)\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/'\n#skt_path = 'surface_gauss/skt'\n#ncep_temp = xr.open_dataset(url+skt_path)\nncep_temp_zon = ncep_temp.skt.mean(dim='lon')\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nCS = ax1.contour( days, lat, Q , levels = np.arange(0., 600., 50.) )\nax1.clabel(CS, CS.levels, inline=True, fmt='%1.0f', fontsize=10)\nax1.set_title('Daily average insolation', fontsize=18 )\nax1.contourf ( days, lat, Q, levels=[-100., 0.], colors='k' )\n\nax2 = fig.add_subplot(122)\nCS = ax2.contour( (ncep_temp.time - ncep_temp.time[0])/const.hours_per_day, ncep_temp.lat, \n                 ncep_temp_zon.T, levels=np.arange(210., 310., 10. ) )\nax2.clabel(CS, CS.levels, inline=True, fmt='%1.0f', fontsize=10)\nax2.set_title('Observed zonal average surface temperature', fontsize=18 )\n\nfor ax in [ax1,ax2]:\n    ax.set_xlabel('Days since January 1', fontsize=16 )\n    ax.set_ylabel('Latitude', fontsize=16 )\n    ax.set_yticks([-90,-60,-30,0,30,60,90])\n    ax.grid()\n\nThis figure reveals something fairly obvious, but still worth thinking about:\n\nWarm temperatures are correlated with high insolation. It’s warm where the sun shines.\n\nMore specifically, we can see a few interesting details here:\n\nThe seasonal cycle is weakest in the tropics and strongest in the high latitudes.\n\nThe warmest temperatures occur slighly NORTH of the equator\n\nThe highest insolation occurs at the poles at summer solstice.\n\nThe local surface temperature does not correlate perfectly with local insolation for two reasons:\n\nthe climate system has heat capacity, which buffers some of the seasonal variations\n\nthe climate system moves energy around in space!\n\n","type":"content","url":"/courseware/heat-transport#id-1-spatial-patterns-of-insolation-and-surface-temperature","position":3},{"hierarchy":{"lvl1":"Heat transport","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl2","url":"/courseware/heat-transport#id-2-calculating-radiative-convective-equilibrium-as-a-function-of-latitude","position":4},{"hierarchy":{"lvl1":"Heat transport","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\nAs a first step to understanding the effects of heat transport by fluid motions in the atmosphere and ocean, we can calculate what the surface temperature would be without any motion.\n\nLet’s calculate a radiative-convective equilibrium state for every latitude band.\n\n","type":"content","url":"/courseware/heat-transport#id-2-calculating-radiative-convective-equilibrium-as-a-function-of-latitude","position":5},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Putting realistic insolation into an RCM","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/heat-transport#putting-realistic-insolation-into-an-rcm","position":6},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Putting realistic insolation into an RCM","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"This code demonstrates how to create a model with both latitude and vertical dimensions.\n\n# A two-dimensional domain\nstate = climlab.column_state(num_lev=30, num_lat=40, water_depth=10.)\n#  Specified relative humidity distribution\nh2o = climlab.radiation.ManabeWaterVapor(name='Fixed Relative Humidity', state=state)\n#  Hard convective adjustment\nconv = climlab.convection.ConvectiveAdjustment(name='Convective Adjustment', state=state, adj_lapse_rate=6.5)\n#  Daily insolation as a function of latitude and time of year\nsun = climlab.radiation.DailyInsolation(name='Insolation', domains=state['Ts'].domain)\n#  Couple the radiation to insolation and water vapor processes\nrad = climlab.radiation.RRTMG(name='Radiation',\n                             state=state, \n                             specific_humidity=h2o.q, \n                             albedo=0.125,\n                             coszen=sun.coszen,\n                             irradiance_factor=sun.irradiance_factor,)\nmodel = climlab.couple([rad,sun,h2o,conv], name='RCM')\nprint( model)\n\nmodel.compute_diagnostics()\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.insolation)\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)');\n\nThis new insolation process uses the same code we’ve already been working with to compute realistic distributions of insolation. Here we are usingclimlab.radiation.DailyInsolation\n\nbut there is alsoclimlab.radiation.AnnualMeanInsolation\n\nfor models in which you prefer to suppress the seasonal cycle and prescribe a time-invariant insolation.\n\nThe following code will just integrate the model forward in four steps in order to get snapshots of insolation at the solstices and equinoxes.\n\n#  model is initialized on Jan. 1\n\n#  integrate forward just under 1/4 year... should get about to the NH spring equinox\nmodel.integrate_days(31+28+22)\nQ_spring = model.insolation.copy()\n#  Then forward to NH summer solstice\nmodel.integrate_days(31+30+31)\nQ_summer = model.insolation.copy()\n#  and on to autumnal equinox\nmodel.integrate_days(30+31+33)\nQ_fall = model.insolation.copy()\n#  and finally to NH winter solstice\nmodel.integrate_days(30+31+30)\nQ_winter = model.insolation.copy()\n\nfig, ax = plt.subplots()\nax.plot(model.lat, Q_spring, label='Spring')\nax.plot(model.lat, Q_summer, label='Summer')\nax.plot(model.lat, Q_fall, label='Fall')\nax.plot(model.lat, Q_winter, label='Winter')\nax.legend()\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)');\n\nThis just serves to demonstrate that the DailyInsolation process is doing something sensible.\n\nNote that we could also pass different orbital parameters to this subprocess. They default to present-day values, which is what we are using here.\n\n","type":"content","url":"/courseware/heat-transport#putting-realistic-insolation-into-an-rcm","position":7},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Find the steady seasonal cycle of temperature in radiative-convective equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/heat-transport#find-the-steady-seasonal-cycle-of-temperature-in-radiative-convective-equilibrium","position":8},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Find the steady seasonal cycle of temperature in radiative-convective equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\nmodel.integrate_years(4.)\n\nmodel.integrate_years(1.)\n\nAll climlab Process objects have an attribute called timeave.\n\nThis is a dictionary of time-averaged diagnostics, which are automatically calculated during the most recent call to integrate_years() or integrate_days().\n\nmodel.timeave.keys()\n\nHere we use the timeave['insolation'] to plot the annual mean insolation.\n\n(We know it is the annual average because the last call to model.integrate_years was for exactly 1 year)\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['insolation'])\nax.set_xlabel('Latitude')\nax.set_ylabel('Insolation (W/m2)')\n\n","type":"content","url":"/courseware/heat-transport#find-the-steady-seasonal-cycle-of-temperature-in-radiative-convective-equilibrium","position":9},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Compare annual average temperature in RCE to the zonal-, annual mean observations.","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/heat-transport#compare-annual-average-temperature-in-rce-to-the-zonal-annual-mean-observations","position":10},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Compare annual average temperature in RCE to the zonal-, annual mean observations.","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\n# Plot annual mean surface temperature in the model,\n#   compare to observed annual mean surface temperatures\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['Ts'], label='RCE')\nax.plot(ncep_temp_zon.lat, ncep_temp_zon.mean(dim='time'), label='obs')\nax.set_xticks(range(-90,100,30))\nax.grid(); ax.legend();\n\nOur modeled RCE state is far too warm in the tropics, and too cold in the mid- to high latitudes.\n\n","type":"content","url":"/courseware/heat-transport#compare-annual-average-temperature-in-rce-to-the-zonal-annual-mean-observations","position":11},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Vertical structure of temperature: comparing RCE to observations","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/heat-transport#vertical-structure-of-temperature-comparing-rce-to-observations","position":12},{"hierarchy":{"lvl1":"Heat transport","lvl3":"Vertical structure of temperature: comparing RCE to observations","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"\n\n#  Observed air temperature from NCEP reanalysis\n## The NOAA ESRL server is shutdown! January 2019\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", decode_times=False)\n#air = xr.open_dataset(url+'pressure/air')\n#ncep_air = air.rename({'lev':'level'})\nlevel_ncep_air = ncep_air.level\nlat_ncep_air = ncep_air.lat\nTzon = ncep_air.air.mean(dim=('time','lon'))\n\n#  Compare temperature profiles in RCE and observations\ncontours = np.arange(180., 350., 15.)\n\nfig = plt.figure(figsize=(14,6))\nax1 = fig.add_subplot(1,2,1)\ncax1 = ax1.contourf(lat_ncep_air, level_ncep_air, Tzon+const.tempCtoK, levels=contours)\nfig.colorbar(cax1)\nax1.set_title('Observered temperature (K)')\n\nax2 = fig.add_subplot(1,2,2)\nfield = model.timeave['Tatm'].transpose()\ncax2 = ax2.contourf(model.lat, model.lev, field, levels=contours)\nfig.colorbar(cax2)\nax2.set_title('RCE temperature (K)')\n\nfor ax in [ax1, ax2]:\n    ax.invert_yaxis()\n    ax.set_xlim(-90,90)\n    ax.set_xticks([-90, -60, -30, 0, 30, 60, 90])\n\nAgain, this plot reveals temperatures that are too warm in the tropics, too cold at the poles throughout the troposphere.\n\nNote however that the vertical temperature gradients are largely dictated by the convective adjustment in our model. We have parameterized this gradient, and so we can change it by changing our parameter for the adjustment.\n\nWe have (as yet) no parameterization for the horizontal redistribution of energy in the climate system.\n\n","type":"content","url":"/courseware/heat-transport#vertical-structure-of-temperature-comparing-rce-to-observations","position":13},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA energy budget in RCE equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"type":"lvl3","url":"/courseware/heat-transport#toa-energy-budget-in-rce-equilibrium","position":14},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA energy budget in RCE equilibrium","lvl2":"2. Calculating Radiative-Convective Equilibrium as a function of latitude"},"content":"Because there is no horizontal energy transport in this model, the TOA radiation budget should be closed (net flux is zero) at all latitudes.\n\nLet’s check this by plotting time-averaged shortwave and longwave radiation:\n\nfig, ax = plt.subplots()\nax.plot(model.lat, model.timeave['ASR'], label='ASR')\nax.plot(model.lat, model.timeave['OLR'], label='OLR')\nax.set_xlabel('Latitude')\nax.set_ylabel('W/m2')\nax.legend(); ax.grid()\n\nIndeed, the budget is (very nearly) closed everywhere. Each latitude is in energy balance, independent of every other column.\n\n","type":"content","url":"/courseware/heat-transport#toa-energy-budget-in-rce-equilibrium","position":15},{"hierarchy":{"lvl1":"Heat transport","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl2","url":"/courseware/heat-transport#id-3-observed-and-modeled-toa-radiation-budget","position":16},{"hierarchy":{"lvl1":"Heat transport","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"\n\nWe are going to look at the (time average) TOA budget as a function of latitude to see how it differs from the RCE state we just plotted.\n\nIdeally we would look at actual satellite observations of SW and LW fluxes. Instead, here we will use the NCEP Reanalysis for convenience.\n\nBut bear in mind that the radiative fluxes in the reanalysis are a model-generated product, they are not really observations.\n\n","type":"content","url":"/courseware/heat-transport#id-3-observed-and-modeled-toa-radiation-budget","position":17},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA budget from NCEP Reanalysis","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl3","url":"/courseware/heat-transport#toa-budget-from-ncep-reanalysis","position":18},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA budget from NCEP Reanalysis","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"\n\n# Get TOA radiative flux data from NCEP reanalysis\n# downwelling SW\ndswrf = xr.open_dataset(ncep_url + '/other_gauss/dswrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#dswrf = xr.open_dataset(url + 'other_gauss/dswrf')\n#  upwelling SW\nuswrf = xr.open_dataset(ncep_url + '/other_gauss/uswrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#uswrf = xr.open_dataset(url + 'other_gauss/uswrf')\n#  upwelling LW\nulwrf = xr.open_dataset(ncep_url + '/other_gauss/ulwrf.ntat.mon.1981-2010.ltm.nc', decode_times=False)\n#ulwrf = xr.open_dataset(url + 'other_gauss/ulwrf')\n\nASR = dswrf.dswrf - uswrf.uswrf\nOLR = ulwrf.ulwrf\n\nASRzon = ASR.mean(dim=('time','lon'))\nOLRzon = OLR.mean(dim=('time','lon'))\n\nticks = [-90, -60, -30, 0, 30, 60, 90]\nfig, ax = plt.subplots()\nax.plot(ASRzon.lat, ASRzon, label='ASR')\nax.plot(OLRzon.lat, OLRzon, label='OLR')\nax.set_ylabel('W/m2')\nax.set_xlabel('Latitude')\nax.set_xlim(-90,90); ax.set_ylim(50,310)\nax.set_xticks(ticks);\nax.set_title('Observed annual mean radiation at TOA')\nax.legend(); ax.grid();\n\nWe find that ASR does NOT balance OLR in most locations.\n\nAcross the tropics the absorbed solar radiation exceeds the longwave emission to space.  The tropics have a net gain of energy by radiation.\n\nThe opposite is true in mid- to high latitudes: the Earth is losing energy by net radiation to space at these latitudes.\n\n","type":"content","url":"/courseware/heat-transport#toa-budget-from-ncep-reanalysis","position":19},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA budget from the control CESM simulation","lvl2":"3. Observed and modeled TOA radiation budget"},"type":"lvl3","url":"/courseware/heat-transport#toa-budget-from-the-control-cesm-simulation","position":20},{"hierarchy":{"lvl1":"Heat transport","lvl3":"TOA budget from the control CESM simulation","lvl2":"3. Observed and modeled TOA radiation budget"},"content":"Load data from the fully coupled CESM control simulation that we’ve used before.\n\ncasenames = {'cpl_control': 'cpl_1850_f19',\n             'cpl_CO2ramp': 'cpl_CO2ramp_f19',\n             'som_control': 'som_1850_f19',\n             'som_2xCO2':   'som_1850_2xCO2',\n            }\n# The path to the THREDDS server, should work from anywhere\nbasepath = 'http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/'\n# For better performance if you can access the roselab_rit filesystem (e.g. from JupyterHub)\n#basepath = '/roselab_rit/cesm_archive/'\ncasepaths = {}\nfor name in casenames:\n    casepaths[name] = basepath + casenames[name] + '/concatenated/'\n\n# make a dictionary of all the CAM atmosphere output\natm = {}\nfor name in casenames:\n    path = casepaths[name] + casenames[name] + '.cam.h0.nc'\n    print('Attempting to open the dataset ', path)\n    atm[name] = xr.open_dataset(path)\n\nlat_cesm = atm['cpl_control'].lat\nASR_cesm = atm['cpl_control'].FSNT\nOLR_cesm = atm['cpl_control'].FLNT\n\n# extract the last 10 years from the slab ocean control simulation\n# and the last 20 years from the coupled control\nnyears_slab = 10\nnyears_cpl = 20\nclim_slice_slab = slice(-(nyears_slab*12),None)\nclim_slice_cpl = slice(-(nyears_cpl*12),None)\n\n#  For now we're just working with the coupled control simulation\n#  Take the time and zonal average\nASR_cesm_zon = ASR_cesm.isel(time=clim_slice_slab).mean(dim=('lon','time'))\nOLR_cesm_zon = OLR_cesm.isel(time=clim_slice_slab).mean(dim=('lon','time'))\n\nNow we can make the same plot of ASR and OLR that we made for the observations above.\n\nfig, ax = plt.subplots()\nax.plot(lat_cesm, ASR_cesm_zon, label='ASR')\nax.plot(lat_cesm, OLR_cesm_zon, label='OLR')\nax.set_ylabel('W/m2')\nax.set_xlabel('Latitude')\nax.set_xlim(-90,90); ax.set_ylim(50,310)\nax.set_xticks(ticks);\nax.set_title('CESM control simulation: Annual mean radiation at TOA')\nax.legend(); ax.grid();\n\nEssentially the same story as the reanalysis data: there is a surplus of energy across the tropics and a net energy deficit in mid- to high latitudes.\n\nThere are two locations where ASR = OLR, near about 35º in both hemispheres.\n\n","type":"content","url":"/courseware/heat-transport#toa-budget-from-the-control-cesm-simulation","position":21},{"hierarchy":{"lvl1":"Heat transport","lvl2":"4. The energy budget for a zonal band"},"type":"lvl2","url":"/courseware/heat-transport#id-4-the-energy-budget-for-a-zonal-band","position":22},{"hierarchy":{"lvl1":"Heat transport","lvl2":"4. The energy budget for a zonal band"},"content":"\n\n","type":"content","url":"/courseware/heat-transport#id-4-the-energy-budget-for-a-zonal-band","position":23},{"hierarchy":{"lvl1":"Heat transport","lvl3":"The basic idea","lvl2":"4. The energy budget for a zonal band"},"type":"lvl3","url":"/courseware/heat-transport#the-basic-idea","position":24},{"hierarchy":{"lvl1":"Heat transport","lvl3":"The basic idea","lvl2":"4. The energy budget for a zonal band"},"content":"Through most of the previous notes we have been thinking about global averages.\n\nWe’ve been working with an energy budget that looks something like this:\n\nWhen we start thinking about regional climates, we need to modify our budget to account for the additional heating or cooling due to transport in and out of the column:\n\nConceptually, the additional energy source is the difference between what’s coming in and what’s going out:h = \\mathcal{H}_{in}  - \\mathcal{H}_{out}\n\nwhere h is a dynamic heating rate in W m^{-2}.\n\n","type":"content","url":"/courseware/heat-transport#the-basic-idea","position":25},{"hierarchy":{"lvl1":"Heat transport","lvl3":"A more careful budget","lvl2":"4. The energy budget for a zonal band"},"type":"lvl3","url":"/courseware/heat-transport#a-more-careful-budget","position":26},{"hierarchy":{"lvl1":"Heat transport","lvl3":"A more careful budget","lvl2":"4. The energy budget for a zonal band"},"content":"Let’s now consider a thin band of the climate system, of width \\delta \\phi , and write down a careful energy budget for it.\n\n\n\nLet \\mathcal{H}(\\phi) be the total rate of northward energy transport across the latitude line \\phi, measured in Watts (usually PW).\n\nSo the transport into the band is \\mathcal{H}(\\phi), and the transport out is just \\mathcal{H}(\\phi + \\delta \\phi)\n\nThe dynamic heating rate looks likeh = \\frac{\\text{transport in} - \\text{transport out}}{\\text{area of band}}\n\nThe surface area of the latitude band isA = \\text{Circumference} ~\\times ~ \\text{north-south width}A = 2 \\pi a \\cos \\phi  ~ \\times ~  a \\delta \\phiA = 2 \\pi a^2  \\cos⁡\\phi ~ \\delta\\phi\n\nSo we can write the heating rate as\\begin{align*}\nh &= \\frac{\\mathcal{H}(\\phi) - \\mathcal{H}(\\phi+\\delta\\phi)}{2 \\pi a^2  \\cos⁡\\phi ~ \\delta\\phi} \\\\\n &= -\\frac{1}{2 \\pi a^2  \\cos⁡\\phi} \\left( \\frac{\\mathcal{H}(\\phi+\\delta\\phi) - \\mathcal{H}(\\phi)}{\\delta\\phi} \\right)\n\\end{align*}\n\nWriting it this way, we can see that if the width of the band \\delta \\phi becomes very small, then the quantity in parentheses is simply the derivative d\\mathcal{H}/d\\phi.\n\nThe dynamical heating rate in W m^{-2} is thush = - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H}}{\\partial \\phi}\n\nwhich is the convergence of energy transport into this latitude band: the difference between what’s coming in and what’s going out.\n\n","type":"content","url":"/courseware/heat-transport#a-more-careful-budget","position":27},{"hierarchy":{"lvl1":"Heat transport","lvl2":"5. Calculating heat transport from the steady-state energy budget"},"type":"lvl2","url":"/courseware/heat-transport#id-5-calculating-heat-transport-from-the-steady-state-energy-budget","position":28},{"hierarchy":{"lvl1":"Heat transport","lvl2":"5. Calculating heat transport from the steady-state energy budget"},"content":"\n\nIf we can assume that the budget is balanced, i.e. assume that the system is at equilibrium and there is negligible heat storage, then we can use the energy budget to infer \\mathcal{H} from a measured (or modeled) TOA radiation imbalance:\n\nThe balanced budget isASR + h = OLR\n\n(i.e. the sources balance the sinks)\n\nwhich we can substitute in for h and rearrange to write as\\frac{\\partial \\mathcal{H}}{\\partial \\phi}  = 2 \\pi ~a^2  \\cos⁡\\phi ~ \\left( \\text{ASR} - \\text{OLR} \\right)  = 2 \\pi ~a^2  \\cos⁡\\phi ~ R_{TOA}\n\nwhere for convenience we write R_{TOA} = ASR - OLR, the net downward flux at the top of atmosphere.\n\nNow integrate from the South Pole (\\phi = -\\pi/2):\\int_{-\\pi/2}^{\\phi} \\frac{\\partial \\mathcal{H}}{\\partial \\phi^\\prime}  d\\phi^\\prime = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\\mathcal{H}(\\phi) - \\mathcal{H}(-\\pi/2) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nOur boundary condition is that the transport must go to zero at the pole. We therefore have a formula for calculating the heat transport at any latitude, by integrating the imbalance from the South Pole:\\mathcal{H}(\\phi) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\phi} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nWhat about the boundary condition at the other pole? We must have \\mathcal{H}(\\pi/2) = 0 as well, because a non-zero transport at the pole is not physically meaningful.\n\nNotice that if we apply the above formula and integrate all the way to the other pole, we then have\\mathcal{H}(\\pi/2) = 2 \\pi ~a^2 \\int_{-\\pi/2}^{\\pi/2} \\cos⁡\\phi^\\prime ~ R_{TOA} d\\phi^\\prime\n\nThis is an integral of the radiation imbalance weighted by cosine of latitude. In other words, this is proportional to the area-weighted global average energy imbalance.\n\nWe started by assuming that this imbalance is zero.\n\nIf the global budget is balanced, then the physical boundary condition of no-flux at the poles is satisfied.\n\n","type":"content","url":"/courseware/heat-transport#id-5-calculating-heat-transport-from-the-steady-state-energy-budget","position":29},{"hierarchy":{"lvl1":"Heat transport","lvl2":"6. Poleward heat transport in the CESM"},"type":"lvl2","url":"/courseware/heat-transport#id-6-poleward-heat-transport-in-the-cesm","position":30},{"hierarchy":{"lvl1":"Heat transport","lvl2":"6. Poleward heat transport in the CESM"},"content":"\n\nHere we will code up a function that performs the above integration.\n\ndef inferred_heat_transport(energy_in, lat=None, latax=None):\n    '''Compute heat transport as integral of local energy imbalance.\n    Required input:\n        energy_in: energy imbalance in W/m2, positive in to domain\n    As either numpy array or xarray.DataArray\n    If using plain numpy, need to supply these arguments:\n        lat: latitude in degrees\n        latax: axis number corresponding to latitude in the data\n            (axis over which to integrate)\n    returns the heat transport in PW.\n    Will attempt to return data in xarray.DataArray if possible.\n    '''\n    from scipy import integrate\n    from climlab import constants as const\n    if lat is None:\n        try: lat = energy_in.lat\n        except:\n            raise InputError('Need to supply latitude array if input data is not self-describing.')\n    lat_rad = np.deg2rad(lat)\n    coslat = np.cos(lat_rad)\n    field = coslat*energy_in\n    if latax is None:\n        try: latax = field.get_axis_num('lat')\n        except:\n            raise ValueError('Need to supply axis number for integral over latitude.')\n    #  result as plain numpy array\n    integral = integrate.cumulative_trapezoid(field, x=lat_rad, initial=0., axis=latax)\n    result = (1E-15 * 2 * np.pi * const.a**2 * integral)\n    if isinstance(field, xr.DataArray):\n        result_xarray = field.copy()\n        result_xarray.values = result\n        return result_xarray\n    else:\n        return result\n\nLet’s now use this to calculate the total northward heat transport from our control simulation with the CESM:\n\nfig, ax = plt.subplots()\nax.plot(lat_cesm, inferred_heat_transport(ASR_cesm_zon - OLR_cesm_zon))\nax.set_ylabel('PW')\nax.set_xticks(ticks)\nax.grid()\nax.set_title('Total northward heat transport inferred from CESM control simulation')\n\nThe total heat transport is very nearly symmetric about the equator, with poleward transport of about 5 to 6 PW in both hemispheres.\n\nThe transport peaks in magnitude near 35º latitude, the same latitude where we found that ASR = OLR. This is no coincidence!\n\nEquatorward of 35º (across the tropics) there is net heating by radiation and net cooling by dynamics. The opposite is true poleward of 35º.\n\n","type":"content","url":"/courseware/heat-transport#id-6-poleward-heat-transport-in-the-cesm","position":31},{"hierarchy":{"lvl1":"Heat transport","lvl3":"An example of a recently published observational estimate of meridional heat transport","lvl2":"6. Poleward heat transport in the CESM"},"type":"lvl3","url":"/courseware/heat-transport#an-example-of-a-recently-published-observational-estimate-of-meridional-heat-transport","position":32},{"hierarchy":{"lvl1":"Heat transport","lvl3":"An example of a recently published observational estimate of meridional heat transport","lvl2":"6. Poleward heat transport in the CESM"},"content":"\n\n\n\nThe ERBE period zonal mean annual cycle of the meridional energy transport in PW by (a) the atmosphere and ocean as inferred from ERBE R_T, NRA \\deltaA_E/\\deltat, and GODAS \\deltaO_E/\\deltat; (b) the atmosphere based on NRA; and (c) by the ocean as implied by ERBE + NRA F_S and GODAS \\deltaO_E/\\deltat. Stippling and hatching in (a)–(c) represent regions and times of year in which the standard deviation of the monthly mean values among estimates, some of which include the CERES period (see text), exceeds 0.5 and 1.0 PW, respectively. (d) The median annual mean transport by latitude for the total (gray), atmosphere (red), and ocean (blue) accompanied with the associated \\pm2\\sigma range (shaded).\n\nThis is a reproduction of Figure 7 from \n\nFasullo & Trenberth (2008).\n\nThis figure shows the breakdown of the heat transport by season as well as the partition between the atmosphere and ocean.\n\nFocussing just on the total, annual transport in panel (d) (black curve), we see that is quite consistent with what we computed from the CESM simulation.\n\n","type":"content","url":"/courseware/heat-transport#an-example-of-a-recently-published-observational-estimate-of-meridional-heat-transport","position":33},{"hierarchy":{"lvl1":"Heat transport","lvl2":"Credits"},"type":"lvl2","url":"/courseware/heat-transport#credits","position":34},{"hierarchy":{"lvl1":"Heat transport","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/heat-transport#credits","position":35},{"hierarchy":{"lvl1":"Insolation"},"type":"lvl1","url":"/courseware/insolation","position":0},{"hierarchy":{"lvl1":"Insolation"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/insolation","position":1},{"hierarchy":{"lvl1":"Insolation","lvl2":"1. Distribution of insolation"},"type":"lvl2","url":"/courseware/insolation#id-1-distribution-of-insolation","position":2},{"hierarchy":{"lvl1":"Insolation","lvl2":"1. Distribution of insolation"},"content":"\n\nNote\n\nThese notes closely follow section 2.7 of Global Physical Climatology by \n\nHartmann (1994).\n\nThe amount of solar radiation incident on the top of the atmosphere (what we call the “insolation”) depends on\n\nlatitude\n\nseason\n\ntime of day\n\nThis insolation is the primary driver of the climate system. Here we will examine the geometric factors that determine insolation, focussing primarily on the daily average values.\n\n","type":"content","url":"/courseware/insolation#id-1-distribution-of-insolation","position":3},{"hierarchy":{"lvl1":"Insolation","lvl3":"Solar zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl3","url":"/courseware/insolation#solar-zenith-angle","position":4},{"hierarchy":{"lvl1":"Insolation","lvl3":"Solar zenith angle","lvl2":"1. Distribution of insolation"},"content":"We define the solar zenith angle \\theta_s as the angle between the local normal to Earth’s surface and a line between a point on Earth’s surface and the sun.\n\n\n\nFrom the above figure (reproduced from \n\nHartmann (1994)), the ratio of the shadow area to the surface area is equal to the cosine of the solar zenith angle.\n\n","type":"content","url":"/courseware/insolation#solar-zenith-angle","position":5},{"hierarchy":{"lvl1":"Insolation","lvl3":"Instantaneous solar flux","lvl2":"1. Distribution of insolation"},"type":"lvl3","url":"/courseware/insolation#instantaneous-solar-flux","position":6},{"hierarchy":{"lvl1":"Insolation","lvl3":"Instantaneous solar flux","lvl2":"1. Distribution of insolation"},"content":"We can write the solar flux per unit surface area asQ = S_0 \\left( \\frac{\\overline{d}}{d} \\right)^2 \\cos \\theta_s\n\nwhere \\overline{d} is the mean distance for which the flux density S_0 (i.e. the solar constant) is measured, and d is the actual distance from the sun.\n\nQuestion:\n\nwhat factors determine \\left( \\frac{\\overline{d}}{d} \\right)^2 ?\n\nunder what circumstances would this ratio always equal 1?\n\n","type":"content","url":"/courseware/insolation#instantaneous-solar-flux","position":7},{"hierarchy":{"lvl1":"Insolation","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl3","url":"/courseware/insolation#calculating-the-zenith-angle","position":8},{"hierarchy":{"lvl1":"Insolation","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"Just like the flux itself, the solar zenith angle depends latitude, season, and time of day.\n\n","type":"content","url":"/courseware/insolation#calculating-the-zenith-angle","position":9},{"hierarchy":{"lvl1":"Insolation","lvl4":"Declination angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl4","url":"/courseware/insolation#declination-angle","position":10},{"hierarchy":{"lvl1":"Insolation","lvl4":"Declination angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"The seasonal dependence can be expressed in terms of the declination angle of the sun: the latitude of the point on the surface of Earth directly under the sun at noon (denoted by \\delta).\n\n\\delta currenly varies between +23.45º at northern summer solstice (June 21) to -23.45º at northern winter solstice (Dec. 21).\n\n","type":"content","url":"/courseware/insolation#declination-angle","position":11},{"hierarchy":{"lvl1":"Insolation","lvl4":"Hour angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl4","url":"/courseware/insolation#hour-angle","position":12},{"hierarchy":{"lvl1":"Insolation","lvl4":"Hour angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"The hour angle h is defined as the longitude of the subsolar point relative to its position at noon.\n\n","type":"content","url":"/courseware/insolation#hour-angle","position":13},{"hierarchy":{"lvl1":"Insolation","lvl4":"Formula for zenith angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl4","url":"/courseware/insolation#formula-for-zenith-angle","position":14},{"hierarchy":{"lvl1":"Insolation","lvl4":"Formula for zenith angle","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"With these definitions and some spherical geometry (see Appendix A of Hartmann’s book), we can express the solar zenith angle for any latitude \\phi, season, and time of day as\\cos \\theta_s = \\sin \\phi \\sin \\delta + \\cos\\phi \\cos\\delta \\cos h\n\n","type":"content","url":"/courseware/insolation#formula-for-zenith-angle","position":15},{"hierarchy":{"lvl1":"Insolation","lvl4":"Sunrise and sunset","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl4","url":"/courseware/insolation#sunrise-and-sunset","position":16},{"hierarchy":{"lvl1":"Insolation","lvl4":"Sunrise and sunset","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"If \\cos\\theta_s < 0 then the sun is below the horizon and the insolation is zero (i.e. it’s night time!)\n\nSunrise and sunset occur when the solar zenith angle is 90º and thus \\cos\\theta_s=0. The above formula then gives\\cos h_0 = - \\tan\\phi \\tan\\delta\n\nwhere h_0 is the hour angle at sunrise and sunset.\n\n","type":"content","url":"/courseware/insolation#sunrise-and-sunset","position":17},{"hierarchy":{"lvl1":"Insolation","lvl4":"Polar night","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl4","url":"/courseware/insolation#polar-night","position":18},{"hierarchy":{"lvl1":"Insolation","lvl4":"Polar night","lvl3":"Calculating the zenith angle","lvl2":"1. Distribution of insolation"},"content":"Near the poles special conditions prevail. Latitudes poleward of 90º-\\delta are constantly illuminated in summer, when \\phi and \\delta are of the same sign.  Right at the pole there is 6 months of perpetual daylight in which the sun moves around the compass at a constant angle \\delta above the horizon.\n\nIn the winter, \\phi and \\delta are of opposite sign, and latitudes poleward of 90º-|\\delta| are in perpetual darkness. At the poles, six months of daylight alternate with six months of daylight.\n\nAt the equator day and night are both 12 hours long throughout the year.\n\n","type":"content","url":"/courseware/insolation#polar-night","position":19},{"hierarchy":{"lvl1":"Insolation","lvl3":"Daily average insolation","lvl2":"1. Distribution of insolation"},"type":"lvl3","url":"/courseware/insolation#daily-average-insolation","position":20},{"hierarchy":{"lvl1":"Insolation","lvl3":"Daily average insolation","lvl2":"1. Distribution of insolation"},"content":"Substituting the expression for solar zenith angle into the insolation formula gives the instantaneous insolation as a function of latitude, season, and time of day:Q = S_0 \\left( \\frac{\\overline{d}}{d} \\right)^2 \\Big( \\sin \\phi \\sin \\delta + \\cos\\phi \\cos\\delta \\cos h  \\Big)\n\nwhich is valid only during daylight hours, |h| < h_0, and Q=0 otherwise (night).\n\nTo get the daily average insolation, we integrate this expression between sunrise and sunset and divide by 24 hours (or 2\\pi radians since we express the time of day in terms of hour angle):\\overline{Q}^{day} = \\frac{1}{2\\pi} \\int_{-h_0}^{h_0} Q ~dh= \\frac{S_0}{2\\pi} \\left( \\frac{\\overline{d}}{d} \\right)^2 \\int_{-h_0}^{h_0} \\Big( \\sin \\phi \\sin \\delta + \\cos\\phi \\cos\\delta \\cos h  \\Big) ~ dh\n\nwhich is easily integrated to get our formula for daily average insolation:\\overline{Q}^{day} = \\frac{S_0}{\\pi} \\left( \\frac{\\overline{d}}{d} \\right)^2 \\Big( h_0 \\sin\\phi \\sin\\delta + \\cos\\phi \\cos\\delta \\sin h_0 \\Big)\n\nwhere the hour angle at sunrise/sunset h_0 must be in radians.\n\n","type":"content","url":"/courseware/insolation#daily-average-insolation","position":21},{"hierarchy":{"lvl1":"Insolation","lvl3":"The daily average zenith angle","lvl2":"1. Distribution of insolation"},"type":"lvl3","url":"/courseware/insolation#the-daily-average-zenith-angle","position":22},{"hierarchy":{"lvl1":"Insolation","lvl3":"The daily average zenith angle","lvl2":"1. Distribution of insolation"},"content":"It turns out that, due to optical properties of the Earth’s surface (particularly bodies of water), the surface albedo depends on the solar zenith angle. It is therefore useful to consider the average solar zenith angle during daylight hours as a function of latidude and season.\n\nThe appropriate daily average here is weighted with respect to the insolation, rather than weighted by time. The formula is\\overline{\\cos\\theta_s}^{day} = \\frac{\\int_{-h_0}^{h_0} Q \\cos\\theta_s~dh}{\\int_{-h_0}^{h_0} Q ~dh}\n\nCronin (2014) also shows that the insolation-weighted value \\overline{\\cos\\theta_s}^{day} is a good choice for minimizing scattering bias under a variety of circumstances.\n\nTo calculate \\overline{\\cos\\theta_s}^{day}, we first note that the factor S_0 \\left(\\frac{\\overline{d}}{d}\\right)^2 cancels out of the top and bottom of the above expression, leaving\\overline{\\cos\\theta_s}^{Q} = \\frac{\\int_{-h_0}^{h_0} \\cos^2 \\theta_s ~dh}{\\int_{-h_0}^{h_0} \\cos\\theta_s ~dh}\n\nWith a bit of work, we can substitute in the expression for \\cos\\theta_s in terms of latitude \\phi, declination angle \\delta and hour angle h and integrate the numerator and denominator of the above expression. I implement the resulting formulas in the Python code below\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy import sin,cos,tan,arccos,arcsin,arctan,pi,abs\n\nlat = np.linspace(-90., 90, 500)\nphi = np.deg2rad(lat)\n\ndeclinations = {'21 December': -23.45,\n                'Equinox': 0.,\n                '21 June': 23.45}\n\ndef hour_angle_at_sunset(delta, phi):\n    return np.where( abs(delta)-pi/2+abs(phi) < 0., # there is sunset/sunrise\n              arccos(-tan(phi)*tan(delta)),\n              # otherwise figure out if it's all night or all day\n              np.where(phi*delta>0., pi, 0.) )\n\ndef insolation_weighted_coszen(delta, phi):\n    h0 = hour_angle_at_sunset(delta, phi)\n    denominator = h0*sin(phi)*sin(delta) + cos(phi)*cos(delta)*sin(h0)\n    numerator = (h0*(2* sin(phi)**2*sin(delta)**2 + cos(phi)**2*cos(delta)**2) + \n        cos(phi)*cos(delta)*sin(h0)*(4*sin(phi)*sin(delta) + cos(phi)*cos(delta)*cos(h0)))\n    return numerator / denominator / 2\n\nfor label, delta in declinations.items():\n    plt.plot(lat, np.rad2deg(arccos(insolation_weighted_coszen(np.deg2rad(delta), phi))), label=label)\nplt.legend()\nplt.grid()\nplt.title('Insolation-weighted daily average solar zenith angle as a function of latitude');\nplt.ylim(30,90);\nplt.xlim(-90,90);\n\nThe figure above reproduces Figure 2.8 from \n\nHartmann, 1994.\n\nThe average zenith angle is much higher at the poles than in the tropics. This contributes to the very high surface albedos observed at high latitudes.\n\n","type":"content","url":"/courseware/insolation#the-daily-average-zenith-angle","position":23},{"hierarchy":{"lvl1":"Insolation","lvl2":"2. Computing daily insolation with climlab"},"type":"lvl2","url":"/courseware/insolation#id-2-computing-daily-insolation-with-climlab","position":24},{"hierarchy":{"lvl1":"Insolation","lvl2":"2. Computing daily insolation with climlab"},"content":"\n\nHere are some examples calculating daily average insolation at different locations and times.\n\nThese all use a function calleddaily_insolation\n\nin the packageclimlab.solar.insolation\n\nto do the calculation. The code implements the above formulas to calculates daily average insolation anywhere on Earth at any time of year.\n\nThe code takes account of orbital parameters to calculate current Sun-Earth distance.\n\nWe can look up past orbital variations to compute their effects on insolation using the packageclimlab.solar.orbital\n\nSee the \n\nnext lecture!\n\n","type":"content","url":"/courseware/insolation#id-2-computing-daily-insolation-with-climlab","position":25},{"hierarchy":{"lvl1":"Insolation","lvl3":"Using the daily_insolation function","lvl2":"2. Computing daily insolation with climlab"},"type":"lvl3","url":"/courseware/insolation#using-the-daily-insolation-function","position":26},{"hierarchy":{"lvl1":"Insolation","lvl3":"Using the daily_insolation function","lvl2":"2. Computing daily insolation with climlab"},"content":"\n\nfrom climlab import constants as const\nfrom climlab.solar.insolation import daily_insolation\n\nFirst, get a little help on using the daily_insolation function:\n\nhelp(daily_insolation)\n\nHere are a few simple examples.\n\nFirst, compute the daily average insolation at 45ºN on January 1:\n\ndaily_insolation(45,1)\n\nSame location, July 1:\n\ndaily_insolation(45,181)\n\nWe could give an array of values. Let’s calculate and plot insolation at all latitudes on the spring equinox = March 21 = Day 80\n\nlat = np.linspace(-90., 90., 30)\nQ = daily_insolation(lat, 80)\nfig, ax = plt.subplots()\nax.plot(lat,Q)\nax.set_xlim(-90,90); ax.set_xticks([-90,-60,-30,-0,30,60,90])\nax.set_xlabel('Latitude')\nax.set_ylabel('W/m2')\nax.grid()\nax.set_title('Daily average insolation on March 21')\n\n","type":"content","url":"/courseware/insolation#using-the-daily-insolation-function","position":27},{"hierarchy":{"lvl1":"Insolation","lvl3":"In-class exercises","lvl2":"2. Computing daily insolation with climlab"},"type":"lvl3","url":"/courseware/insolation#in-class-exercises","position":28},{"hierarchy":{"lvl1":"Insolation","lvl3":"In-class exercises","lvl2":"2. Computing daily insolation with climlab"},"content":"Try to answer the following questions before reading the rest of these notes.\n\nWhat is the daily insolation today here at Albany (latitude 42.65ºN)?\n\nWhat is the annual mean insolation at the latitude of Albany?\n\nAt what latitude and at what time of year does the maximum daily insolation occur?\n\nWhat latitude is experiencing either polar sunrise or polar sunset today?\n\n","type":"content","url":"/courseware/insolation#in-class-exercises","position":29},{"hierarchy":{"lvl1":"Insolation","lvl2":"3. Global, seasonal distribution of insolation (present-day orbital parameters)"},"type":"lvl2","url":"/courseware/insolation#id-3-global-seasonal-distribution-of-insolation-present-day-orbital-parameters","position":30},{"hierarchy":{"lvl1":"Insolation","lvl2":"3. Global, seasonal distribution of insolation (present-day orbital parameters)"},"content":"\n\nCalculate an array of insolation over the year and all latitudes (for present-day orbital parameters). We’ll use a dense grid in order to make a nice contour plot\n\nlat = np.linspace( -90., 90., 500)\nnumpoints = 365.\ndays = np.linspace(1., numpoints, 365)/numpoints * const.days_per_year\n\nQ = daily_insolation( lat, days )\n\nAnd make a contour plot of Q as function of latitude and time of year.\n\nfig, ax = plt.subplots(figsize=(10,8))\nCS = ax.contour( days, lat, Q , levels = np.arange(0., 600., 50.) )\nax.clabel(CS, CS.levels, inline=True, fmt='%1.0f', fontsize=10)\nax.set_xlabel('Days since January 1', fontsize=16 )\nax.set_ylabel('Latitude', fontsize=16 )\nax.set_title('Daily average insolation', fontsize=24 )\nax.contourf ( days, lat, Q, levels=[-1000., 0.], colors='k' )\n\n","type":"content","url":"/courseware/insolation#id-3-global-seasonal-distribution-of-insolation-present-day-orbital-parameters","position":31},{"hierarchy":{"lvl1":"Insolation","lvl3":"Time and space averages","lvl2":"3. Global, seasonal distribution of insolation (present-day orbital parameters)"},"type":"lvl3","url":"/courseware/insolation#time-and-space-averages","position":32},{"hierarchy":{"lvl1":"Insolation","lvl3":"Time and space averages","lvl2":"3. Global, seasonal distribution of insolation (present-day orbital parameters)"},"content":"\n\nTake the area-weighted global, annual average of Q...\n\nQaverage = np.average(np.mean(Q, axis=1), weights=np.cos(np.deg2rad(lat)))\nprint( 'The annual, global average insolation is %.2f W/m2.' %Qaverage)\n\nAlso plot the zonally averaged insolation at a few different times of the year:\n\nsummer_solstice = 170\nwinter_solstice = 353\nfig, ax = plt.subplots(figsize=(10,8))\nax.plot( lat, Q[:,(summer_solstice, winter_solstice)] );\nax.plot( lat, np.mean(Q, axis=1), linewidth=2 )\nax.set_xbound(-90, 90)\nax.set_xticks( range(-90,100,30) )\nax.set_xlabel('Latitude', fontsize=16 );\nax.set_ylabel('Insolation (W m$^{-2}$)', fontsize=16 );\nax.grid()\n\n","type":"content","url":"/courseware/insolation#time-and-space-averages","position":33},{"hierarchy":{"lvl1":"Insolation","lvl2":"Credits"},"type":"lvl2","url":"/courseware/insolation#credits","position":34},{"hierarchy":{"lvl1":"Insolation","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/insolation#credits","position":35},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)"},"type":"lvl1","url":"/courseware/introducing-cesm","position":0},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/introducing-cesm","position":1},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"About the CESM"},"type":"lvl2","url":"/courseware/introducing-cesm#about-the-cesm","position":2},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"About the CESM"},"content":"\n\n","type":"content","url":"/courseware/introducing-cesm#about-the-cesm","position":3},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"What is it?","lvl2":"About the CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#what-is-it","position":4},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"What is it?","lvl2":"About the CESM"},"content":"CESM is one of a handful of complex coupled GCMs that are used as part of the IPCC process.\n\nDeveloped and maintained at NCAR (Boulder CO) by a group of climate scientists and software engineers.\n\n“Community” refers to the fact that the code is open-source, with new pieces contributed by a wide variety of users.\n\nI use CESM in my own research. We are going to be using CESM in this course. For lots more information about CESM:\n\nhttps://​www​.cesm​.ucar​.edu​/models/\n\n","type":"content","url":"/courseware/introducing-cesm#what-is-it","position":5},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Key components of CESM:","lvl2":"About the CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#key-components-of-cesm","position":6},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Key components of CESM:","lvl2":"About the CESM"},"content":"We will be working with output generated from CESM version 1.2, which includes the following components:\n\nAtmospheric model (AGCM)\n\nCommunity Atmosphere Model (CAM)\n\nOcean model (OGCM)\n\nParallel Ocean Program (POP)\n\nLand surface model\n\nCommunity Land Model (CLM)\n\nSea ice model\n\nCommunity Ice CodE (CICE)\n\nThe software is somewhat modular, so different submodels can be combined together depending on the nature of the scientific problem at hand and the available computer power.\n\nRecall that we saw this schematic of different ways to represent the ocean in climate models:\n\n","type":"content","url":"/courseware/introducing-cesm#key-components-of-cesm","position":7},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Our numerical experiments with CESM"},"type":"lvl2","url":"/courseware/introducing-cesm#our-numerical-experiments-with-cesm","position":8},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Our numerical experiments with CESM"},"content":"\n\n","type":"content","url":"/courseware/introducing-cesm#our-numerical-experiments-with-cesm","position":9},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Atmosphere","lvl2":"Our numerical experiments with CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#atmosphere","position":10},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Atmosphere","lvl2":"Our numerical experiments with CESM"},"content":"Horizontal resolution about 2º lat/lon\n\nAGCM solves the fundamental equations:\n\nConservation of momentum, mass, energy, water, equation of state\n\nAt 2º we resolve the synoptic-scale dynamics\n\nstorm tracks and cyclones.\n\nWe do NOT resolve the mesoscale and smaller\n\nthunderstorms, individual convective events, clouds\n\nThese all must be parameterized.\n\nModel also solves equations of radiative transfer. This takes account of\n\ncomposition of the atmosphere and the absorption properties of different gases\n\nradiative effects of clouds.\n\n","type":"content","url":"/courseware/introducing-cesm#atmosphere","position":11},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Sea ice","lvl2":"Our numerical experiments with CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#sea-ice","position":12},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Sea ice","lvl2":"Our numerical experiments with CESM"},"content":"Resolution of 1º.\n\nThermodynamics (conservation of energy, water and salt)\n\ndetermines freezing and melting\n\nDynamics (momentum equations)\n\ndetermine ice motion and deformation.\n\nComplex! Sea ice is sort of a mixture of a fluid and a solid.\n\n","type":"content","url":"/courseware/introducing-cesm#sea-ice","position":13},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Land surface model","lvl2":"Our numerical experiments with CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#land-surface-model","position":14},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Land surface model","lvl2":"Our numerical experiments with CESM"},"content":"Same resolution as atmosphere.\n\nDetermines surface fluxes of heat, water, momentum (friction) based on prescribed vegetation types.\n\nDon’t actually know much about how it works!\n\nGreat topic for someone to dig in to for their term project.\n\n","type":"content","url":"/courseware/introducing-cesm#land-surface-model","position":15},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Ocean","lvl2":"Our numerical experiments with CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#ocean","position":16},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Ocean","lvl2":"Our numerical experiments with CESM"},"content":"Same grid as sea ice, 1º.\n\nExchanges heat, water, and momentum with the atmosphere and sea ice\n\nReceives runoff from the land surface (rivers)\n\nFull 3D simulation of the currents.\n\n","type":"content","url":"/courseware/introducing-cesm#ocean","position":17},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Experimental setup","lvl2":"Our numerical experiments with CESM"},"type":"lvl3","url":"/courseware/introducing-cesm#experimental-setup","position":18},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Experimental setup","lvl2":"Our numerical experiments with CESM"},"content":"Model is given realistic atmospheric composition, realistic solar radiation, etc.\n\nWe perform a preindustrial control run to get a baseline simulation, and take averages of several years (because the model has internal variability – every year is a little bit different)\n\nWe then (later) we will change something, e.g. double the atmospheric CO_2!\n\nAnd allow the model to adjust toward a new equilibrium, just as we did with the toy energy balance model.\n\n","type":"content","url":"/courseware/introducing-cesm#experimental-setup","position":19},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Browsing input data with xarray"},"type":"lvl2","url":"/courseware/introducing-cesm#browsing-input-data-with-xarray","position":20},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Browsing input data with xarray"},"content":"First, let’s take a look at some of the ingredients that go into the control run. All of the necessary data will be served up by a special data server sitting in the department, so you should be able to run this code to interact with the data on any computer that is connected to the internet.\n\n","type":"content","url":"/courseware/introducing-cesm#browsing-input-data-with-xarray","position":21},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"You need to be connected to the internet to run the code in this notebook","lvl2":"Browsing input data with xarray"},"type":"lvl3","url":"/courseware/introducing-cesm#you-need-to-be-connected-to-the-internet-to-run-the-code-in-this-notebook","position":22},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"You need to be connected to the internet to run the code in this notebook","lvl2":"Browsing input data with xarray"},"content":"You can browse the available data through a web interface here:\n\nhttp://​thredds​.atmos​.albany​.edu:8080​/thredds​/catalog​.html\n\nWithin this folder called CESM archive, you will find another folder called som_input which contains all the input files.\n\nThe data are all stored in NetCDF files, a standard file format for self-describing gridded data.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\n\nWe are going to use a package called \n\nxarray (abbreviated here as xr) to work with the datasets.\n\n","type":"content","url":"/courseware/introducing-cesm#you-need-to-be-connected-to-the-internet-to-run-the-code-in-this-notebook","position":23},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Boundary conditions: continents and topography","lvl2":"Browsing input data with xarray"},"type":"lvl3","url":"/courseware/introducing-cesm#boundary-conditions-continents-and-topography","position":24},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Boundary conditions: continents and topography","lvl2":"Browsing input data with xarray"},"content":"Here we are going to load the input topography file and take a look at what’s inside.\n\nIn this case we are passing it a URL to our online dataserver. We’ll put the URL in a string variable called datapath to simplify things later on.\n\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\ncesm_input_path = cesm_data_path + \"som_input/\"\n#  Notice that in Python we can easily concatenate strings together just by `adding` them\nfullURL = cesm_input_path + \"USGS-gtopo30_1.9x2.5_remap_c050602.nc\"\nprint( fullURL)\n\n#  Now we actually open the dataset\ntopo = xr.open_dataset( fullURL )\ntopo\n\nThe Dataset object has several important attributes. Much of this should look familiar if you have worked with netCDF data before. The xarray package gives a very powerful and easy to use interface to the data.\n\nWe can access individual variables within the xarray.Dataset object as follows:\n\ntopo.PHIS\n\n","type":"content","url":"/courseware/introducing-cesm#boundary-conditions-continents-and-topography","position":25},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Plotting the topography","lvl2":"Browsing input data with xarray"},"type":"lvl3","url":"/courseware/introducing-cesm#plotting-the-topography","position":26},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Plotting the topography","lvl2":"Browsing input data with xarray"},"content":"We will now read the geopotential and make a plot of the topography of the Earth’s surface as represented on the 2º grid. The code below makes a colorful plot of the topography. We also use the land-sea mask in order to plot nothing at grid points that are entirely ocean-covered.\n\nExecute this code exactly as written first, and then play around with it to see how you might customize the graph.\n\ng = 9.8  # gravity in m/s2\nmeters_per_kilometer = 1E3 \nheight = topo.PHIS / g / meters_per_kilometer  # in kilometers\n#  Note that we have just created a new xarray.DataArray object that preserves the axis labels\n#  Let's go ahead and give it some useful metadata:\nheight.attrs['units'] = 'km'\nheight.name = 'height'\nheight\n\nLet’s make a plot! xarray is able to automatically generate labeled plots. This is very handy for “quick and dirty” investigation of the data:\n\nheight.plot()\n\nIf we want more control over the appearance of the plot, we can use features of matplotlib\n\n#  A filled contour plot of topography with contours every 500 m\nlev = np.arange(0., 6., 0.5)\nfig1, ax1 = plt.subplots(figsize=(8,4))\n# Here we are masking the data to exclude points where the land fraction is zero (water only)\ncax1 = ax1.contourf( height.lon, height.lat, \n                    height.where(topo.LANDFRAC>0), levels=lev)\nax1.set_title('Topography (km) and land-sea mask in CESM')\nax1.set_xlabel('Longitude')\nax1.set_ylabel('Latitude')\ncbar1 = fig1.colorbar(cax1)\n\nNote that at 2º resolution we can see many smaller features (e.g. Pacific islands). The model is given a fractional land cover for each grid point.\n\nHere let’s plot the land-sea mask itself so we can see where there is at least “some” water:\n\nfig2, ax2 = plt.subplots()\ncax2 = ax2.pcolormesh( topo.lon, topo.lat, topo.LANDFRAC )\nax2.set_title('Ocean mask in CESM')\nax2.set_xlabel('Longitude'); ax2.set_ylabel('Latitude')\ncbar2 = fig2.colorbar(cax2);\n\n","type":"content","url":"/courseware/introducing-cesm#plotting-the-topography","position":27},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Making nicer maps","lvl2":"Browsing input data with xarray"},"type":"lvl3","url":"/courseware/introducing-cesm#making-nicer-maps","position":28},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Making nicer maps","lvl2":"Browsing input data with xarray"},"content":"Notice that to make these plots we’ve just plotted the lat-lon array without using any map projection.\n\nThere are nice tools available to make better maps. We’ll leave that as a topic for another day. But if you’re keen to read ahead, check out:\n\nhttp://​scitools​.org​.uk​/cartopy/\n\n","type":"content","url":"/courseware/introducing-cesm#making-nicer-maps","position":29},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Ocean boundary conditions"},"type":"lvl2","url":"/courseware/introducing-cesm#ocean-boundary-conditions","position":30},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Ocean boundary conditions"},"content":"Let’s load another file that contains some information about the ocean and its interaction with the atmosphere.\n\nsom_input = xr.open_dataset( cesm_input_path + \"pop_frc.1x1d.090130.nc\")\nsom_input\n\nThe ocean / sea ice models exist on different grids than the atmosphere (1º instead of 2º resolution).\n\nNow we are going to look at the annual mean heat flux out of the ocean.\n\nIt is stored in the field qdp in the dataset we just opened.\n\nThe sign convention in CESM is that qdp > 0 where heat is going IN to the ocean. We will change the sign to plot heat going OUT of the ocean INTO the atmosphere (a more atmosphere-centric viewpoint).\n\nsom_input.qdp\n\nUnfortunately, here is a case in which the metadata are not very useful. There is no text description of what variable qdp actually is, or what its units are.  (It is actually in units of W m^{-2})\n\nWe can see that there are 12 x 180 x 360 data points. One 180 x 360 grid for each calendar month!\n\nNow we are going to take the average over the year at each point.\n\nWe will use the power of xarray here to take the average over the time dimension, leaving us with a single grid on 180 latitude points by 360 longitude points:\n\n(-som_input.qdp.mean(dim='time')).plot()\n\nNow make a nice plot of the annual mean q-flux.\n\n#  We can always set a non-standard size for our figure window\nfig3, ax3 = plt.subplots(figsize=(10, 6))\nlev = np.arange(-700., 750., 50.)\ncax3 = ax3.contourf(som_input.xc, som_input.yc, \n                    -som_input.qdp.mean(dim='time'), \n                    levels=lev, cmap=plt.cm.bwr)\ncbar3 = fig3.colorbar(cax3)\nax3.set_title( 'CESM: Prescribed heat flux out of ocean (W m$^{-2}$), annual mean', \n              fontsize=14 )\nax3.set_xlabel('Longitude', fontsize=14)\nax3.set_ylabel('Latitude', fontsize=14)\nax3.text(65, 50, 'Annual', fontsize=16 )\nax3.contour(topo.lon, topo.lat, topo.LANDFRAC, levels=[0.5], colors='k');\n\nNotice all the spatial structure here:\n\nLots of heat is going in to the oceans at the equator, particularly in the eastern Pacific Ocean.\n\nThe red hot spots show where lots of heat is coming out of the ocean.\n\nHot spots include the mid-latitudes off the eastern coasts of Asia and North America\n\nAnd also the northern North Atlantic.\n\nAll this structure is determined by ocean circulation, which we are not modeling here. Instead, we are prescribing these heat flux patterns as an input to the atmosphere.\n\nThis pattern changes throughout the year. Recall that we just averaged over all months to make this plot. We might want to look at just one month:\n\n# select by month index (0 through 11)\nsom_input.qdp.isel(time=0)\n\n#  select by array slicing (but for this you have to know the axis order!)\nsom_input.qdp[0,:,:]\n\nHere we got just the first month (January) by specifying [0,:,:] after the variable name. This is called slicing or indexing an array. We are saying “give me everything for month number 0”. Now make the plot:\n\nfig4, ax4 = plt.subplots(figsize=(10,4)) \ncax4 = ax4.contourf( som_input.xc, som_input.yc, \n                    -som_input.qdp.isel(time=0), \n                      levels=lev, cmap=plt.cm.bwr)\ncbar4 = plt.colorbar(cax4)\nax4.set_title( 'CESM: Prescribed heat flux out of ocean (W m$^{-2}$)', \n              fontsize=14 )\nax3.set_xlabel('Longitude', fontsize=14)\nax3.set_ylabel('Latitude', fontsize=14)\nax4.text(65, 50, 'January', fontsize=12 );\nax4.contour(topo.lon, topo.lat, topo.LANDFRAC, levels=[0.5], colors='k');\n\nFor lots more help with using xarray to slice and dice your dataset, look at the online documentation:\n\nhttp://​xarray​.pydata​.org\n\n","type":"content","url":"/courseware/introducing-cesm#ocean-boundary-conditions","position":31},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"The “pre-industrial” control run"},"type":"lvl2","url":"/courseware/introducing-cesm#the-pre-industrial-control-run","position":32},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"The “pre-industrial” control run"},"content":"Our control run is set up to simulate the climate of the “pre-industrial era”, meaning before significant human-induced changes to the composition of the atmosphere, nominally the year 1850.\n\nOutput from the control run is available on the same data server as above. Look in the folder called cpl_1850_f19 (Here cpl stands for “coupled model” with interactive ocean, 1850 indicated pre-industrial conditions, and f19 is a code for 2º the horizontal grid resolution).\n\nThere are output files for each active model component:\n\natmosphere\n\nocean\n\nsea ice\n\nland surface\n\nThe model produces monthly average output files for each component. We can load datasets from individual months, but there are also large concatenated files available that contain the entire output.\n\nLet’s take a look at the atmosphere file. The file is called\n\ncpl_1850_f19.cam.h0.nc\n\n(the file extension .nc is used to indicate NetCDF format).\n\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\natm_control\n\nLots of different stuff! These are all the different quantities that are calculated as part of the model simulation. Every quantity represents a monthly average.\n\nWant to get more information about a particular variable?\n\natm_control.co2vmr\n\nThis is the amount of CO_2 in the atmosphere (about 285 parts per million by volume). It is prescribed in these simulations and does not change.\n\nOne nice thing about xarray.DataArray objects is that we can do simple arithmetic with them (already seen several examples of this in the notes above). For example, change the units of CO_2 amount to ppm:\n\natm_control.co2vmr * 1E6\n\nHere’s another variable:\n\natm_control.SOLIN\n\nApparently this is the incoming solar radiation or insolation, with shape (240,96,144) meaning it’s got 240 months, 96 latitude points and 144 longitude points.\n\n","type":"content","url":"/courseware/introducing-cesm#the-pre-industrial-control-run","position":33},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Taking a time average"},"type":"lvl2","url":"/courseware/introducing-cesm#exercise-taking-a-time-average","position":34},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Taking a time average"},"content":"\n\nTake the time average of the SOLIN field. Store the result as a new variable.\n\nWhat are the dimensions of the resulting data array? What would be a good way to visualize this quantity?\n\natm_control.SOLIN.mean(dim='time')\n\n","type":"content","url":"/courseware/introducing-cesm#exercise-taking-a-time-average","position":35},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Plotting the time average insolation"},"type":"lvl2","url":"/courseware/introducing-cesm#exercise-plotting-the-time-average-insolation","position":36},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Plotting the time average insolation"},"content":"\n\nMake a well-labeled plot of the time-averaged insolation (using the variable you stored above).\n\nIs there a way to further reduce the dimensionality of the data, and plot the information in a different way?\n\nRemember that you can apply the .mean() operation across any number of named dimensions in a data array.\n\n\n\n","type":"content","url":"/courseware/introducing-cesm#exercise-plotting-the-time-average-insolation","position":37},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Comparing the control run with the observed energy budget"},"type":"lvl2","url":"/courseware/introducing-cesm#comparing-the-control-run-with-the-observed-energy-budget","position":38},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Comparing the control run with the observed energy budget"},"content":"Recall that our investigations so far have been guided by this figure of the observed annual, global mean energy budget:\n\n\n\n","type":"content","url":"/courseware/introducing-cesm#comparing-the-control-run-with-the-observed-energy-budget","position":39},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Thinking about how to compute a global average"},"type":"lvl2","url":"/courseware/introducing-cesm#exercise-thinking-about-how-to-compute-a-global-average","position":40},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: Thinking about how to compute a global average"},"content":"\n\nIn order to compare these numbers with the control run, we need to take global averages of the data. What do we mean by global average?\n\nBefore proceeding with these notes, try to answer the following question:\n\nWhy does it not make sense to simply average over each data point on a latitude-longitude grid?\n\n\n\n","type":"content","url":"/courseware/introducing-cesm#exercise-thinking-about-how-to-compute-a-global-average","position":41},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Weighting for global average"},"type":"lvl2","url":"/courseware/introducing-cesm#weighting-for-global-average","position":42},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Weighting for global average"},"content":"The global average needs to weighted by the area of each grid cell, which is proportional to the cosine of latitude (do you understand why?)\n\nWe can implement this in xarray as follows:\n\n#  Take the cosine of latitude (first converting to radians)\ncoslat = np.cos(np.deg2rad(atm_control.lat))\ncoslat\n\n#  And divide by its mean value\nweight_factor = coslat / coslat.mean(dim='lat') \n#  Want to see what we just created?\nweight_factor\n\n\n\n","type":"content","url":"/courseware/introducing-cesm#weighting-for-global-average","position":43},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"An alternative: use weights already provided in the dataset","lvl2":"Weighting for global average"},"type":"lvl3","url":"/courseware/introducing-cesm#an-alternative-use-weights-already-provided-in-the-dataset","position":44},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"An alternative: use weights already provided in the dataset","lvl2":"Weighting for global average"},"content":"You will find that many gridded datasets already provide a field that gives accurate area weighting.\n\nIn the case of the CESM output, the field is called gw\n\nweight_factor2 = atm_control.gw / atm_control.gw.mean(dim='lat')\n\nweight_factor2\n\n","type":"content","url":"/courseware/introducing-cesm#an-alternative-use-weights-already-provided-in-the-dataset","position":45},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Compute the global, time average insolation","lvl2":"Weighting for global average"},"type":"lvl3","url":"/courseware/introducing-cesm#compute-the-global-time-average-insolation","position":46},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Compute the global, time average insolation","lvl2":"Weighting for global average"},"content":"\n\n#  Compute the global, time average insolation using our two different weight factors\n#  Notice that we can apply the .mean() operation simultaneously over several dimensions!\n(atm_control.SOLIN * weight_factor).mean(dim=('time', 'lon', 'lat'))\n(atm_control.SOLIN * weight_factor2).mean(dim=('time', 'lon', 'lat'))\n\nThese numbers should both be very close to 340.3\n\nThis value is the global average insolation in units of W m^{-2}.\n\n","type":"content","url":"/courseware/introducing-cesm#compute-the-global-time-average-insolation","position":47},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: plotting a global average timeseries"},"type":"lvl2","url":"/courseware/introducing-cesm#exercise-plotting-a-global-average-timeseries","position":48},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: plotting a global average timeseries"},"content":"Plot a timeseries of the global average surface temperature in the control simulation.\n\nSurface temperature is called 'TS' in the dataset.\n\nMake a plot of the global average TS with time on the x axis. Make sure your global average is properly weighted as discussed above.\n\nTSglobal = (atm_control.TS * weight_factor).mean(dim=('lon','lat'))\nTSglobal\n\n# Note we could just do a TSglobal.plot() here!\n#  But this is an example of using matplotlib directly to get more control over the figure\n\nfig, ax = plt.subplots()\nax.plot(TSglobal)\nax.set_xlabel('Months')\nax.set_ylabel('Temperature (K)')\nax.grid()\nax.set_title('Global mean temperature in the CESM slab ocean control simulation');\n\n","type":"content","url":"/courseware/introducing-cesm#exercise-plotting-a-global-average-timeseries","position":49},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Discussion point","lvl2":"Exercise: plotting a global average timeseries"},"type":"lvl3","url":"/courseware/introducing-cesm#discussion-point","position":50},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Discussion point","lvl2":"Exercise: plotting a global average timeseries"},"content":"What do you see in this graph? Do you have any ideas about why the global average temperature looks like this?\n\nAlso, what is the time average global-average surface temperature in this simulation?\n\nTSglobal.mean(dim='time')\n\n","type":"content","url":"/courseware/introducing-cesm#discussion-point","position":51},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Finding the radiative fluxes in the model output","lvl2":"Exercise: plotting a global average timeseries"},"type":"lvl3","url":"/courseware/introducing-cesm#finding-the-radiative-fluxes-in-the-model-output","position":52},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl3":"Finding the radiative fluxes in the model output","lvl2":"Exercise: plotting a global average timeseries"},"content":"Now that you can take global averages and time averages, we can compare some energy budget values against observations.\n\nThe model output contains lots of diagnostics about the radiative fluxes. Here are some CESM naming conventions to help you find the appropriate output fields:\n\nAll variables whose names being with 'F' are an energy flux of some kind.\n\nMost have a four-letter code, e.g. 'FLNT'\n\n'FL' means longwave flux (i.e. terrestrial)\n\n'FS' means shortwave flux (i.e. solar)\n\nThe third letter indicates direction of the flux:\n\n'U' = up\n\n'D' = down\n\n'N' = net\n\nThe fourth letter indicates the location of the flux:\n\n'T' = top of atmosphere\n\n'S' = surface\n\nSo 'FLNT' means ‘net longwave flux at the top of atmosphere’, i.e. the outgoing longwave radiation or OLR.\n\nYou wil see that these are all 240 x 96 x 144 -- i.e. a two-dimensional grid for every month in the simulation.\n\natm_control.FLNT\n\n","type":"content","url":"/courseware/introducing-cesm#finding-the-radiative-fluxes-in-the-model-output","position":53},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: compute terms in the planetary energy budget"},"type":"lvl2","url":"/courseware/introducing-cesm#exercise-compute-terms-in-the-planetary-energy-budget","position":54},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Exercise: compute terms in the planetary energy budget"},"content":"Compute annual, global averages of the following four quantities.\n\nIncoming solar radiation (or insolation)\n\nAbsorbed solar radiation (ASR)\n\nPlanetary albedo (remember this is a ratio of outgoing to incoming solar radiation)\n\nOutgoing longwave radiation (OLR)\n\nCompare your results briefly to the observations.\n\n\n\n","type":"content","url":"/courseware/introducing-cesm#exercise-compute-terms-in-the-planetary-energy-budget","position":55},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"A few more tidbits"},"type":"lvl2","url":"/courseware/introducing-cesm#a-few-more-tidbits","position":56},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"A few more tidbits"},"content":"Feel free to keep exploring the data!\n\nMany other fields are four-dimensional (time, level, latitude, longitude).\n\nFor example, here the air temperature at every point and every month:\n\natm_control.T\n\nOften we want to sample the data at a particular place and time. xarray gives us simple ways to do that.\n\nFor example, we can interpolate to a particular location in latitude and longitude (here it’s the coordinates of Albany NY):\n\nTlocal = atm_control.T.interp(lat=42.75, lon=(360-73.8))\nTlocal\n\nWe can also use time indexing to pick out a particular year and month:\n\n#  The .sel notation mean \"select\" along the given coordinate\n#  The string that follows is year-month. Our simulation begins in year 0001.\nTlocal.sel(time='0020-01')  # a particular January\n\nNow, for example, we can plot the temperature as a function of pressure at this place and time:\n\nTlocal.sel(time='0020-01').plot()\n\n","type":"content","url":"/courseware/introducing-cesm#a-few-more-tidbits","position":57},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Credits"},"type":"lvl2","url":"/courseware/introducing-cesm#credits","position":58},{"hierarchy":{"lvl1":"Introducing the Community Earth System Model (CESM)","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/introducing-cesm#credits","position":59},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change"},"type":"lvl1","url":"/courseware/land-ocean-contrast","position":0},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/land-ocean-contrast","position":1},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"A recent tweet that caught my attention..."},"type":"lvl2","url":"/courseware/land-ocean-contrast#a-recent-tweet-that-caught-my-attention","position":2},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"A recent tweet that caught my attention..."},"content":"\n\n%%HTML\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">actual trends <a href=\"https://t.co/abnDJGeawr\">pic.twitter.com/abnDJGeawr</a></p>&mdash; Gavin Schmidt (@ClimateOfGavin) <a href=\"https://twitter.com/ClimateOfGavin/status/1117136233409536000?ref_src=twsrc%5Etfw\">April 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nStatistics such as the global average or zonal average temperature do not tell the whole story about climate change!\n\n","type":"content","url":"/courseware/land-ocean-contrast#a-recent-tweet-that-caught-my-attention","position":3},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Some observational results on land-ocean warming differences from a recent paper"},"type":"lvl2","url":"/courseware/land-ocean-contrast#some-observational-results-on-land-ocean-warming-differences-from-a-recent-paper","position":4},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Some observational results on land-ocean warming differences from a recent paper"},"content":"\n\nReproduced directly from \n\nByrne & O'Gorman (2018):\n\n\n\nA–C) Surface-air annual (A) temperature, (B) specific humidity, and (C) relative humidity anomalies averaged from 40∘S to 40∘N and best-fit trends (1979–2016) over land (red solid lines and asterisks) and ocean (blue lines and asterisks). The best-fit trends in the land–ocean contrasts in temperature and specific humidity (δTL−δTO and δqL−δqO, respectively) are also plotted (black asterisks). Land values are from the HadISDH dataset (13, 14) and ocean values are from the ERA-Interim reanalysis (15). Ocean specific humidity anomalies are calculated assuming fixed climatological relative humidity (Materials and Methods). Also shown are land anomalies and associated trends (dashed lines and circles) estimated using the simple theory (Eqs. 2–4) and subsampled to the months and gridboxes for which HadISDH observations are available. Error bars on the trends indicate the 90% confidence intervals corrected to account for serial correlation (Materials and Methods).\n\n","type":"content","url":"/courseware/land-ocean-contrast#some-observational-results-on-land-ocean-warming-differences-from-a-recent-paper","position":5},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Looking at land-ocean warming patterns in the CESM"},"type":"lvl2","url":"/courseware/land-ocean-contrast#looking-at-land-ocean-warming-patterns-in-the-cesm","position":6},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Looking at land-ocean warming patterns in the CESM"},"content":"\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport cartopy.crs as ccrs\nfrom cartopy.util import add_cyclic_point\n\nThe following repeats the calculation we already did of the Equilibrium Climate Sensitity (ECS) and Transient Climate Response (TCR):\n\ncasenames = {'cpl_control': 'cpl_1850_f19',\n             'cpl_CO2ramp': 'cpl_CO2ramp_f19',\n             'som_control': 'som_1850_f19',\n             'som_2xCO2':   'som_1850_2xCO2',\n            }\n# The path to the THREDDS server, should work from anywhere\nbasepath = 'http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/'\n# For better performance if you can access the roselab_rit filesystem (e.g. from JupyterHub)\n#basepath = '/roselab_rit/cesm_archive/'\ncasepaths = {}\nfor name in casenames:\n    casepaths[name] = basepath + casenames[name] + '/concatenated/'\n    \n# make a dictionary of all the CAM atmosphere output\natm = {}\nfor name in casenames:\n    path = casepaths[name] + casenames[name] + '.cam.h0.nc'\n    print('Attempting to open the dataset ', path)\n    atm[name] = xr.open_dataset(path, decode_times=False)\n\n# extract the last 10 years from the slab ocean control simulation\nnyears_som = 10\n# and the last 20 years from the coupled control\nnyears_cpl = 20\nclim_slice_som = slice(-(nyears_som*12),None)\nclim_slice_cpl = slice(-(nyears_cpl*12),None)\n\nTmap_cpl_2x = atm['cpl_CO2ramp'].TREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nTmap_cpl_control = atm['cpl_control'].TREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nDeltaTmap_cpl = Tmap_cpl_2x - Tmap_cpl_control\n\nTmap_som_2x = atm['som_2xCO2'].TREFHT.isel(time=clim_slice_som).mean(dim='time')\nTmap_som_control = atm['som_control'].TREFHT.isel(time=clim_slice_som).mean(dim='time')\nDeltaTmap_som = Tmap_som_2x - Tmap_som_control\n\ndef make_map(field, title=None):\n    '''input field should be a 2D xarray.DataArray on a lat/lon grid.\n        Make a filled contour plot of the field, and a line plot of the zonal mean\n    '''\n    fig = plt.figure(figsize=(14,6))\n    nrows = 10; ncols = 3\n    mapax = plt.subplot2grid((nrows,ncols), (0,0), colspan=ncols-1, rowspan=nrows-1, projection=ccrs.Robinson())\n    barax = plt.subplot2grid((nrows,ncols), (nrows-1,0), colspan=ncols-1)\n    plotax = plt.subplot2grid((nrows,ncols), (0,ncols-1), rowspan=nrows-1)\n    # add cyclic point so cartopy doesn't show a white strip at zero longitude\n    wrap_data, wrap_lon = add_cyclic_point(field.values, coord=field.lon, axis=field.dims.index('lon'))\n    cx = mapax.contourf(wrap_lon, field.lat, wrap_data, transform=ccrs.PlateCarree())\n    mapax.set_global(); mapax.coastlines();\n    plt.colorbar(cx, cax=barax, orientation='horizontal')\n    plotax.plot(field.mean(dim='lon'), field.lat)\n    plotax.set_ylabel('Latitude')\n    plotax.grid()\n    fig.suptitle(title, fontsize=16);\n    return fig, (mapax, plotax, barax), cx\n\nfig, axes, cx = make_map(DeltaTmap_cpl, title='Surface air temperature anomaly (coupled transient)')\naxes[1].set_xlim(0,7)  # ensure the line plots have same axes\ncx.set_clim([0, 8])    # ensure the contour maps have the same color intervals\n\nfig, axes,cx  = make_map(DeltaTmap_som, title='Surface air temperature anomaly (equilibrium SOM)')\naxes[1].set_xlim(0,7)\ncx.set_clim([0, 8])\n\ndef global_mean(field, weight=atm['som_control'].gw):\n    '''Return the area-weighted global average of the input field'''\n    return (field*weight).mean(dim=('lat','lon'))/weight.mean(dim='lat')\n\nECS = global_mean(DeltaTmap_som)\nTCR = global_mean(DeltaTmap_cpl)\n\nprint('The Equilibrium Climate Sensitivity is {:.3} K.'.format(float(ECS)))\nprint('The Transient Climate Response is {:.3} K.'.format(float(TCR)))\n\n# Make a map like Gavin's...  places where warming is > global average\nfig = plt.figure(figsize=(18,5))\n\nax1 = fig.add_subplot(1,2,1, projection=ccrs.Robinson())\n# add cyclic point so cartopy doesn't show a white strip at zero longitude\nfield = DeltaTmap_cpl.where(DeltaTmap_cpl>TCR)\nwrap_data, wrap_lon = add_cyclic_point(field.values, coord=field.lon, axis=field.dims.index('lon'))\nax1.contourf(wrap_lon, field.lat, wrap_data, \n             levels=[0, 100], colors='#81090A',\n             transform=ccrs.PlateCarree())\nax1.set_title('Coupled transient (TCR = {:.3} K)'.format(float(TCR)), fontsize=14)\nax2 = fig.add_subplot(1,2,2, projection=ccrs.Robinson())\nfield = DeltaTmap_som.where(DeltaTmap_som>ECS)\nwrap_data, wrap_lon = add_cyclic_point(field.values, coord=field.lon, axis=field.dims.index('lon'))\nax2.contourf(wrap_lon, field.lat, wrap_data, \n             levels=[0, 100], colors='#81090A',\n             transform=ccrs.PlateCarree())\nax2.set_title('Equilibrium SOM (ECS = {:.3} K)'.format(float(ECS)), fontsize=14)\n\nfor ax in [ax1, ax2]:\n    ax.set_global(); ax.coastlines();\n\nfig.suptitle('Places that warm more than the global mean in CESM simulations', fontsize=18)\n\n","type":"content","url":"/courseware/land-ocean-contrast#looking-at-land-ocean-warming-patterns-in-the-cesm","position":7},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Key Point"},"type":"lvl2","url":"/courseware/land-ocean-contrast#key-point","position":8},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Key Point"},"content":"The enhanced warming over land is not just a feature of the transient, but is also found in the equilibrium response!\n\nWe cannot understand this result solely in terms of heat capacity differences.\n\nThis motivates some detailed study of surface processes and the climatic coupling between land and ocean.\n\n","type":"content","url":"/courseware/land-ocean-contrast#key-point","position":9},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Plot the “land amplification factor”"},"type":"lvl2","url":"/courseware/land-ocean-contrast#plot-the-land-amplification-factor","position":10},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Plot the “land amplification factor”"},"content":"Plot the time average warming over land per unit zonally averaged warming of the surrounding oceansA \\equiv \\frac{\\delta T_L}{\\delta T_O}\n\nwhere \\delta T_L is the near-surface air temperature increase over land, and \\delta T_O is the zonally averaged near-surface air temperature increase over ocean.\n\n#  The land-ocean mask ... same for all simulations\nlandfrac = atm['cpl_control'].LANDFRAC.mean(dim='time')\n\n# Zonally averaged ocean warming\nDeltaTO_cpl = DeltaTmap_cpl.where(landfrac<0.5).mean(dim='lon')\nDeltaTO_som = DeltaTmap_som.where(landfrac<0.5).mean(dim='lon')\n\nland_amplification_cpl = DeltaTmap_cpl.where(landfrac>0.5) / DeltaTO_cpl\nland_amplification_som = DeltaTmap_som.where(landfrac>0.5) / DeltaTO_som\n\nfig, axes, cx = make_map(land_amplification_cpl, title='Land warming amplification factor (coupled transient)');\naxes[1].set_xlim(0,2)  # ensure the line plots have same axes\ncx.set_clim([0, 3])    # ensure the contour maps have the same color intervals\n\nfig, axes, cx = make_map(land_amplification_som, title='Land warming amplification factor (equilibrium SOM)');\naxes[1].set_xlim(0,2)  # ensure the line plots have same axes\ncx.set_clim([0, 3])    # ensure the contour maps have the same color intervals\n\n","type":"content","url":"/courseware/land-ocean-contrast#plot-the-land-amplification-factor","position":11},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl2","url":"/courseware/land-ocean-contrast#a-simple-theory-for-land-ocean-warming-contrast","position":12},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"A simple theory for land-ocean warming contrast"},"content":"This section is based on a series of papers by Michael Byrne and Paul O’Gorman \n\nByrne & O'Gorman, 2013\n\nByrne & O'Gorman, 2016\n\nByrne & O'Gorman, 2018.","type":"content","url":"/courseware/land-ocean-contrast#a-simple-theory-for-land-ocean-warming-contrast","position":13},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The atmospheric dynamics constraint","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl3","url":"/courseware/land-ocean-contrast#the-atmospheric-dynamics-constraint","position":14},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The atmospheric dynamics constraint","lvl2":"A simple theory for land-ocean warming contrast"},"content":"The dynamical argument has a few components:\n\nFrequent moist convection maintains a nearly moist-neutral lapse rate in the convectively active equatorial regions (“convective quasi-equilibrium”).\n\n“Weak Temperature Gradient” theory for the low-latitude atmosphere asserts that air temperatures in the free troposphere are nearly homogeneous.\n\nTherefore the free troposphere is moist adiabatic everywhere.\n\nThe differences between surface air temperature over land and ocean can be expressed in terms of different Lifting Condensation Levels (LCL) \n\nByrne & O'Gorman, 2013:\n\n\n\nFig. 1. Schematic diagram of potential temperature vs height for moist adiabats over land and ocean and equal temperatures at upper levels. A land–ocean surface air temperature contrast is implied by different LCLs over land and ocean.\n\nReproduced from \n\nByrne & O'Gorman (2013)\n\nA consequence of these constraints is that, under a climate change, the near-surface moist static energy content over land and ocean are equal:\\delta h_L = \\delta h_O\n\nwith the following standard notation:\n\nh = c_p T + L_v q + g z_g is the moist static energy per unit mass\n\nT is air temperature\n\nq is the specific humidity\n\nz_g is the geopotential height\n\nFrom this we can infer that the land warming amplification factor is related to differences in boundary layer moistening:A \\equiv \\frac{\\delta T_L}{\\delta T_O} = 1 + \\frac{L_v}{c_p} \\frac{\\delta q_O - \\delta q_L}{\\delta T_O}\n\nwhich implies that there will be greater warming over land than ocean so long as the moistening rate with warming over ocean is greater than over land, \\delta q_O > \\delta q_L.\n\n","type":"content","url":"/courseware/land-ocean-contrast#the-atmospheric-dynamics-constraint","position":15},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The surface moisture constraint","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl3","url":"/courseware/land-ocean-contrast#the-surface-moisture-constraint","position":16},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The surface moisture constraint","lvl2":"A simple theory for land-ocean warming contrast"},"content":"This section is drawn directly from \n\nByrne & O'Gorman (2016).\n\nConsider the following simple moisture budgets for the boundary layers over ocean and over land:\n\n\n\nFig. 2. Schematic diagram of processes involved in the moisture budget of the boundary layer above a land surface [see text and (1) for definitions of the various quantities].\n\nReproduced from \n\nByrne & O'Gorman (2016)\n\nThe budget over land isl h_L \\frac{d q_L}{dt} = h_O v_1 (q_O - q_L) + (h_L - h_O) v_1 (q_{FT,O} - q_L) + l v_2 (q_{FT,L} - q_L ) + \\frac{1}{\\rho_a} E_L\n\nwhere\n\nl is the horizontal length scale of the land\n\nh_L, h_O are the boundary layer depths\n\nv_1, v_2 are the horizontal and vertical mixing velocities\n\nq_{FT,L}, q_{FT,O} are the free-tropospheric specific humidities above the boundary layers\n\n\\rho_a is the density of air\n\nE_L is the evapotranspiration from the land surface\n\nThe source terms on the RHS are respectively horizontal mixing of boundary layer air, horizontal mixing of free-tropospheric air, vertical mixing, and surface fluxes.\n\nNow assume that free-tropospheric moisture is proportional to boundary layer moisture:\\begin{align*}\nq_{FT,L} &= \\lambda_L q_L  &  q_{FT,O} &= \\lambda_O q_O\n\\end{align*}\n\nSetting the LHS of the moisture budget to zero, we can solve the steady-state budget for land specific humidity q_L:q_L = \\frac{\\left[ h_O + \\lambda_O ( h_L - h_O)\\right] \\tau_2}{h_L\\left[\\tau_1(1-\\lambda_L) + \\tau_2 \\right]} q_O + \\frac{\\tau_1 \\tau_2 }{\\rho_a h_L \\left[ \\tau_1(1-\\lambda_L) + \\tau_2 \\right]} E_L\n\nwhere for convenience we have defined horizontal and vertical mixing timescales\\begin{align*}\n\\tau_1 &= \\frac{l}{v_1}  &  \\tau_2 &= \\frac{h_L}{v_2} \n\\end{align*}\n\nThe two terms above quantify the relative importance of remote ocean specific humidity and local evapotransipiration on land specific humidity. We can rewrite this asq_L = \\gamma q_O + q_E\n\n","type":"content","url":"/courseware/land-ocean-contrast#the-surface-moisture-constraint","position":17},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The “Ocean-influence” box model","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl3","url":"/courseware/land-ocean-contrast#the-ocean-influence-box-model","position":18},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"The “Ocean-influence” box model","lvl2":"A simple theory for land-ocean warming contrast"},"content":"The simplest form of the moisture constraint comes from assuming that the influence of evapotranspiration on boundary layer specific humidity over land is negligible.\n\nSetting E_L = 0 we get simplyq_L = \\gamma q_O\n\nwhere the proportionality is\\gamma = \\frac{\\left[ h_O + \\lambda_O ( h_L - h_O)\\right] \\tau_2}{h_L\\left[\\tau_1(1-\\lambda_L) + \\tau_2 \\right]}\n\nWe now make one more assumption: the proportionality \\gamma remains constant under climate change. Then changes in boundary specific humidity are related through\\delta q_L = \\gamma \\delta q_O\n\nwhere the constant can be evaluated from the reference climate:\\gamma = \\frac{\\overline{q_L}}{\\overline{q_O}}\n\n","type":"content","url":"/courseware/land-ocean-contrast#the-ocean-influence-box-model","position":19},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Combined theory: dynamic and moisture constraints","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl3","url":"/courseware/land-ocean-contrast#combined-theory-dynamic-and-moisture-constraints","position":20},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Combined theory: dynamic and moisture constraints","lvl2":"A simple theory for land-ocean warming contrast"},"content":"Combining the dynamic and moisture constraints gives the change in land warming amplification factor solely in terms of the ocean warming and moistening:A \\equiv \\frac{\\delta T_L}{\\delta T_O}  = 1 + \\frac{L_v}{c_p} (1-\\gamma) \\frac{\\delta q_O}{\\delta T_O}\n\nwhich implies that there will be greater warming over land than ocean so long as the land surface is drier than the ocean surface (\\gamma < 1) and the air gets moister with warming over the ocean (\\delta q_O > 0).\n\nNotice that with the combined constraints we are able to make this prediction without using an information about the land surface conditions other than the reference specific humidity (parameter \\gamma).\n\n","type":"content","url":"/courseware/land-ocean-contrast#combined-theory-dynamic-and-moisture-constraints","position":21},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Relative humidity changes over land","lvl2":"A simple theory for land-ocean warming contrast"},"type":"lvl3","url":"/courseware/land-ocean-contrast#relative-humidity-changes-over-land","position":22},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Relative humidity changes over land","lvl2":"A simple theory for land-ocean warming contrast"},"content":"The relative humidity is well approximated byr = \\frac{q}{q^*}\n\n(over land or ocean) where q^* is the relevant saturation specific humidity.\n\nFor small climate changes we can thus write fractional changes in relative humidity as\\frac{\\delta r}{r} \\approx \\frac{\\delta q}{q} - \\frac{\\delta q^*}{q^*}\n\nand the fractional change in saturation is governed by the Clausius-Clapeyron relation, which is well approximated by\\frac{\\delta q^*}{q^*} \\approx \\alpha \\delta T\n\nwith the CC rate\\alpha = \\frac{L_v}{R_v T^2} \\approx 6 \\% / K\n\nWe typically assume that relative humidity remains constant over the ocean, so \\frac{\\delta r_O}{r_O} = 0 and thus\\frac{\\delta q_O}{q_O} = \\alpha \\delta T_O\n\nwhile over land we find instead\\frac{\\delta r_L}{r_L} \\approx \\frac{\\delta q_L}{q_L} - \\alpha \\delta T_L\n\nAn implication of the moisture constraint above is that the fractional changes in specific humidity must be the same over land and ocean:\\frac{\\delta q_L}{q_L} = \\frac{\\delta q_O}{q_O} = \\alpha \\delta T_O\n\nCombining this with the dynamic constraint then gives\\frac{\\delta r_L}{r_L} \\approx - \\alpha (1-\\gamma) \\frac{L_v}{c_p} \\delta q_O\n\nThe conclusion is that the relative humidity over land must decrease along with the amplified warming over land.\n\nSee \n\nByrne & O'Gorman (2016) for discussion and caveats.\n\n","type":"content","url":"/courseware/land-ocean-contrast#relative-humidity-changes-over-land","position":23},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Evaluation of simple land amplification theory"},"type":"lvl2","url":"/courseware/land-ocean-contrast#evaluation-of-simple-land-amplification-theory","position":24},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Evaluation of simple land amplification theory"},"content":"To summarize the above derivations:\n\nThe dynamic constraint gives the amplification factor A asA \\equiv \\frac{\\delta T_L}{\\delta T_O} = 1 + \\frac{L_v}{c_p} \\frac{\\delta q_O - \\delta q_L}{\\delta T_O}\n\nthe moisture constraint (in its simplest form) gives\\begin{align*}\n\\delta q_L &= \\gamma \\delta q_O  \\\\\n\\gamma &= \\frac{\\overline{q_L}}{\\overline{q_O}}\n\\end{align*}\n\nso that the amplification factor is simplyA = 1 + \\frac{L_v}{c_p} (1-\\gamma) \\frac{\\delta q_O}{\\delta T_O}\n\nWe are going to evaluate this theory quantitatively against the CESM simulations.\n\nfrom climlab.utils.constants import Lhvap, cp, Rv\n\ndef land_amp(deltaQO, deltaQL, deltaTO):\n    return 1 + Lhvap/cp*(deltaQO - deltaQL)/deltaTO\n\n# Look at zonally averaged specific humidity over land and ocean\nqL = atm['cpl_control'].QREFHT.where(landfrac>0.5).isel(time=clim_slice_cpl).mean(dim=('time', 'lon'))\nqO = atm['cpl_control'].QREFHT.where(landfrac<0.5).isel(time=clim_slice_cpl).mean(dim=('time', 'lon'))\n\nqO.plot(label='Ocean')\nqL.plot(label='Land')\nplt.legend(); plt.grid();\nplt.ylabel('Specific humidity (kg/kg)');\n\n","type":"content","url":"/courseware/land-ocean-contrast#evaluation-of-simple-land-amplification-theory","position":25},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Amplification factors using dynamic constraint only","lvl2":"Evaluation of simple land amplification theory"},"type":"lvl3","url":"/courseware/land-ocean-contrast#amplification-factors-using-dynamic-constraint-only","position":26},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Amplification factors using dynamic constraint only","lvl2":"Evaluation of simple land amplification theory"},"content":"\n\n#  Compute changes in specific humidity\nQmap_cpl_2x = atm['cpl_CO2ramp'].QREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nQmap_cpl_control = atm['cpl_control'].QREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nDeltaQmap_cpl = Qmap_cpl_2x - Qmap_cpl_control\n\nQmap_som_2x = atm['som_2xCO2'].QREFHT.isel(time=clim_slice_som).mean(dim='time')\nQmap_som_control = atm['som_control'].QREFHT.isel(time=clim_slice_som).mean(dim='time')\nDeltaQmap_som = Qmap_som_2x - Qmap_som_control\n\n# Increase in specific humidity over oceans per degree warming\nDeltaQO_cpl = DeltaQmap_cpl.where(landfrac<0.5).mean(dim='lon')\nDeltaQO_som = DeltaQmap_som.where(landfrac<0.5).mean(dim='lon')\n\n(DeltaQO_cpl / DeltaTO_cpl).plot(label='coupled transient')\n(DeltaQO_som / DeltaTO_som).plot(label='equilibrium SOM')\n# Simple estimate of the moistening rate from Clausius-Clapeyron\nalpha = Lhvap/Rv/288**2\n(alpha * qO).plot(label='Clausius-Clapeyron moistening rate', linestyle='--', color='grey')\nplt.legend();\nplt.ylabel('kg/kg/K')\n\nNotice that the normalized humidity increase is nearly identical in the two models, and very well predicted by Clausius-Clapeyron.\n\n# Compute the land amplification factor based on dynamic constraint only\n#  Note that this requires knowledge of actual specific humidity changes over land\n\npredicted_land_amplification_cpl = land_amp(DeltaQO_cpl, DeltaQmap_cpl.where(landfrac>0.5), DeltaTO_cpl)\npredicted_land_amplification_som = land_amp(DeltaQO_som, DeltaQmap_som.where(landfrac>0.5), DeltaTO_som)\n\nmake_map(predicted_land_amplification_cpl, \n        title='PREDICTED land amplification factor (dynamic constraint only - coupled transient)');\nmake_map(predicted_land_amplification_som,\n        title='PREDICTED land amplification factor (dynamic constraint only - equilibrium SOM)');\n\n","type":"content","url":"/courseware/land-ocean-contrast#amplification-factors-using-dynamic-constraint-only","position":27},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Amplification factors using dynamic + moisture constraint","lvl2":"Evaluation of simple land amplification theory"},"type":"lvl3","url":"/courseware/land-ocean-contrast#amplification-factors-using-dynamic-moisture-constraint","position":28},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Amplification factors using dynamic + moisture constraint","lvl2":"Evaluation of simple land amplification theory"},"content":"\n\n# Make a map of the \"gamma\" factor, ratio of land specific humidity to surrounding oceans\nqL_map = atm['cpl_control'].QREFHT.where(landfrac>0.5).isel(time=clim_slice_cpl).mean(dim=('time'))\ngamma_map = qL_map / qO\nmake_map(gamma_map, 'Relative dryness of land surface compared to oceans, $\\gamma = q_L / q_O$');\n\npredicted_land_amplification_simple = land_amp(DeltaQO_cpl, gamma_map*DeltaQO_cpl, DeltaTO_cpl)\nmake_map(predicted_land_amplification_simple,\n        title='PREDICTED Land warming amplification factor (dynamic+moisture constraints)');\n\n# Summarize the zonal average results (Plot coupled model only)\nplt.figure(figsize=(10,6))\nland_amplification_cpl.mean(dim='lon').plot(label='Simulated', color='blue')\npredicted_land_amplification_cpl.mean(dim='lon').plot(label='Dynamic constraint theory', \n                                                      color='blue', linestyle='--')\npredicted_land_amplification_simple.mean(dim='lon').plot(label='Combined theory', linestyle='--', color='grey')\nplt.legend();\nplt.grid();\nplt.ylim(0.6, 2.2);\n\nCompare to CMIP5 multi-model mean \n\nByrne & O'Gorman, 2016:\n\n\n\nFig. B1. The CMIP5 multimodel mean (a) land–ocean warming contrast (expressed as an amplification factor) and (b) surface-air land pseudo relative humidity change normalized by the global-mean surface-air temperature change (solid lines) and as estimated by the combined moisture and dynamic constraints (dashed lines). The amplification factor and land relative humidity changes are estimated for each land grid point and for each month of the year before taking the zonal and annual means.\n\nOur results are consistent with Byrne and O’Gorman in that the simple theory captures the amplification signal in the southern subtropics quite well, but strongly overestimates the amplifcation in the northern subtropics.\n\nThe simple “ocean influence” theory works best in the hemisphere dominated by ocean!\n\nWe may get more insight into the weaknesses of the theory by looking more carefully at the relative humidity changes, and the role of land-surface evaporation changes (neglected under the “ocean-influence” theory).\n\n","type":"content","url":"/courseware/land-ocean-contrast#amplification-factors-using-dynamic-moisture-constraint","position":29},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Critical evaluation of assumptions"},"type":"lvl2","url":"/courseware/land-ocean-contrast#critical-evaluation-of-assumptions","position":30},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Critical evaluation of assumptions"},"content":"\n\n# Recompute gamma for the warmer climate.\n# We assumed it did not change with global warming\n\n# Look at zonally averaged specific humidity over land and ocean\nqL_2x = atm['cpl_CO2ramp'].QREFHT.where(landfrac>0.5).isel(time=clim_slice_cpl).mean(dim=('time', 'lon'))\nqO_2x = atm['cpl_CO2ramp'].QREFHT.where(landfrac<0.5).isel(time=clim_slice_cpl).mean(dim=('time', 'lon'))\n\n# Make a map of the \"gamma\" factor, ratio of land specific humidity to surrounding oceans\nqL_map_2x = atm['cpl_CO2ramp'].QREFHT.where(landfrac>0.5).isel(time=clim_slice_cpl).mean(dim=('time'))\ngamma_map_2x = qL_map_2x / qO_2x\nmake_map(gamma_map_2x, 'Relative dryness of land surface compared to oceans (2x CO2), $\\gamma = q_L / q_O$');\n\n# Plot the percentage change\nmake_map((gamma_map_2x-gamma_map)/gamma_map * 100, title='Percent change in gamma');\n\nThe error is pretty small.\n\n","type":"content","url":"/courseware/land-ocean-contrast#critical-evaluation-of-assumptions","position":31},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Relative humidity change","lvl2":"Critical evaluation of assumptions"},"type":"lvl3","url":"/courseware/land-ocean-contrast#relative-humidity-change","position":32},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl3":"Relative humidity change","lvl2":"Critical evaluation of assumptions"},"content":"\n\nRHmap = atm['cpl_control'].RELHUM.isel(lev=-1, time=clim_slice_cpl).mean(dim='time')\nRHmap_2x = atm['cpl_CO2ramp'].RELHUM.isel(lev=-1, time=clim_slice_cpl).mean(dim='time')\nDeltaRHmap = RHmap_2x - RHmap\n\nmake_map(RHmap, title='Control relative humidity');\n\nmake_map(DeltaRHmap, title='Relative humidity change (transient coupled)');\n\nLooks like a big source of error in the simple estimates of land amplification here is the unexpected relative moistening over the arid regions of North Africa and Arabia.\n\n","type":"content","url":"/courseware/land-ocean-contrast#relative-humidity-change","position":33},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Credits"},"type":"lvl2","url":"/courseware/land-ocean-contrast#credits","position":34},{"hierarchy":{"lvl1":"Land-Ocean contrasts under climate change","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/land-ocean-contrast#credits","position":35},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python"},"type":"lvl1","url":"/courseware/models-budgets-fun","position":0},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/models-budgets-fun","position":1},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"1. What is a Climate Model?"},"type":"lvl2","url":"/courseware/models-budgets-fun#id-1-what-is-a-climate-model","position":2},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"1. What is a Climate Model?"},"content":"\n\nFirst, some thoughts on modeling from \n\nxkcd\n\nLet’s be a little pedantic and decompose that question:\n\nwhat is Climate?\n\nwhat is a Model?\n\nClimate is\n\nstatistics of weather, e.g. space and time averages of temperature and precip.\n\n(statistics might also mean higher-order stats: variability etc)\n\nA model is\n\nnot easy to define!\n\nWikipedia: \n\nConceptual model\n\nIn the most general sense, a model is anything used in any way to represent anything else. Some models are physical objects, for instance, a toy model which may be assembled, and may even be made to work like the object it represents. Whereas, a conceptual model is a model made of the composition of concepts, that thus exists only in the mind. Conceptual models are used to help us know, understand, or simulate the subject matter they represent.\n\nGeorge E. P. Box (statistician):\n\nEssentially, all models are wrong, but some are useful.”\n\nFrom the Climate Modelling Primer, 4th ed \n\nMcGuffie & Henderson-Sellers, 2014\n\nIn the broadest sense, models are for learning about the world (in our case, the climate) and the learning takes place in the contruction and the manipulation of the model, as anyone who has watched a child build idealised houses or spaceships with Lego, or built with it themselves, will know.  Climate models are, likewise, idealised representations of a complicated and complex reality through which our understanding of the climate has significantly expanded. All models involve some ignoring, distoring and approximating, but gradually they allow us to build understanding of the system being modelled. A child’s Lego construction typically contains the essential elements of the real objects, improves with attention to detail, helps them understand the real world, but is never confused with the real thing.\n\n","type":"content","url":"/courseware/models-budgets-fun#id-1-what-is-a-climate-model","position":3},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"A minimal definition of a climate model","lvl2":"1. What is a Climate Model?"},"type":"lvl3","url":"/courseware/models-budgets-fun#a-minimal-definition-of-a-climate-model","position":4},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"A minimal definition of a climate model","lvl2":"1. What is a Climate Model?"},"content":"A representation of the exchange of energy between the Earth system and space, and its effects on average surface temperature.\n\n(what average?)\n\nNote the focus on planetary energy budget. That’s the key to all climate modeling.\n\n","type":"content","url":"/courseware/models-budgets-fun#a-minimal-definition-of-a-climate-model","position":5},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"2. The observed global energy budget"},"type":"lvl2","url":"/courseware/models-budgets-fun#id-2-the-observed-global-energy-budget","position":6},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"2. The observed global energy budget"},"content":"\n\nThe figure below shows current best estimates of the global, annual mean energy fluxes through the climate system \n\nTrenberth & Fasullo, 2012.\n\nWe will look at many of these processes in detail throughout the course.\n\n\n\n","type":"content","url":"/courseware/models-budgets-fun#id-2-the-observed-global-energy-budget","position":7},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"Things to note:"},"type":"lvl2","url":"/courseware/models-budgets-fun#things-to-note","position":8},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"Things to note:"},"content":"","type":"content","url":"/courseware/models-budgets-fun#things-to-note","position":9},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"On the shortwave side","lvl2":"Things to note:"},"type":"lvl3","url":"/courseware/models-budgets-fun#on-the-shortwave-side","position":10},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"On the shortwave side","lvl2":"Things to note:"},"content":"global mean albedo is 101.9 W m^{-2} / 341.3 W m^{-2} = 0.299\n\nReflection off clouds = 79 W m^{-2}\n\nOff surface = 23 W m^{-2}\n\n3 times as much reflection off clouds as off surface\n\nWhy??  Think about both areas of ice and snow, and the fact that sunlight has to travel through cloudy atmosphere to get to the ice and snow. Also there is some absorption of shortwave by the atmosphere.\n\nAtmospheric absorption = 78 W m^{-2}\n(so about the same as reflected by clouds)\n\nQUESTION: Which gases contribute to shortwave absorption?\n\nO_3 and H_2O mostly.\n\nWe will look at this later.\n\n","type":"content","url":"/courseware/models-budgets-fun#on-the-shortwave-side","position":11},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"On the longwave side","lvl2":"Things to note:"},"type":"lvl3","url":"/courseware/models-budgets-fun#on-the-longwave-side","position":12},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"On the longwave side","lvl2":"Things to note:"},"content":"First, let’s define a very important term:\n\nOutgoing Longwave Radiation\n\nThe energy emitted by the planet that escapes to space (often abbreviated as OLR).\n\nNote the following:\n\nObserved emission from the SURFACE is 396 W m^{-2}\n\nvery close to the blackbody emission \\sigma T^4 at T = 288 K (the global mean surface temperature).\n\nBUT emission to space (OLR) is much smaller = 239 W m^{-2}\n\nQUESTION: What do we call this?  (greenhouse effect)\n\n","type":"content","url":"/courseware/models-budgets-fun#on-the-longwave-side","position":13},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Look at net numbers…","lvl2":"Things to note:"},"type":"lvl3","url":"/courseware/models-budgets-fun#look-at-net-numbers","position":14},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Look at net numbers…","lvl2":"Things to note:"},"content":"Net absorbed = 0.9 W m^{-2}\n\nWhy?\n\nWhere is that heat going?\n\nNote, the exchanges of energy between the surface and the atmosphere are complicated, involve a number of different processes. We will look at these more carefully later.\n\n","type":"content","url":"/courseware/models-budgets-fun#look-at-net-numbers","position":15},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Additional points:","lvl2":"Things to note:"},"type":"lvl3","url":"/courseware/models-budgets-fun#additional-points","position":16},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Additional points:","lvl2":"Things to note:"},"content":"Notice that this is a budget of energy, not temperature.\n\nWe will need to discuss the connection between the two\n\nClouds affect both longwave and shortwave sides of the budget.\n\nWATER is involved in many of the terms:\n\nevaporation\n\nlatent heating (equal and opposite in the global mean)\n\nclouds\n\ngreenhouse effect\n\natmospheric SW absorption\n\nsurface reflectivity (ice and snow)\n\n","type":"content","url":"/courseware/models-budgets-fun#additional-points","position":17},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Discussion point","lvl2":"Things to note:"},"type":"lvl3","url":"/courseware/models-budgets-fun#discussion-point","position":18},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Discussion point","lvl2":"Things to note:"},"content":"How might we expect some of the terms in the global energy budget to vary under anthropogenic climate change?\n\n","type":"content","url":"/courseware/models-budgets-fun#discussion-point","position":19},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"3. Using Python to compute emission to space"},"type":"lvl2","url":"/courseware/models-budgets-fun#id-3-using-python-to-compute-emission-to-space","position":20},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"3. Using Python to compute emission to space"},"content":"\n\nMost of what follows is intended as a “fill in the blanks” exercise. We will practice writing some Python code while discussing the physical process of longwave emission to space.\n\nSuppose the Earth behaves like a blackbody radiator with effective global mean emission temperature T_e.\n\nThen we can calculate the \n\nOutgoing Longwave Radiation fromOLR = \\sigma T_e^4\n\nwhere \\sigma = 5.67 \\times 10{-8} W m^{-2} K^{-4} the Stefan-Boltzmann constant\n\nWe can just take this as a definition of the emission temperature T_e.\n\nLooking back at the observations, the global, annual mean value for OLR is 238.5 W m^{-2}.\n\n","type":"content","url":"/courseware/models-budgets-fun#id-3-using-python-to-compute-emission-to-space","position":21},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Calculate the emission temperature T_e","lvl2":"3. Using Python to compute emission to space"},"type":"lvl3","url":"/courseware/models-budgets-fun#calculate-the-emission-temperature-t-e","position":22},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Calculate the emission temperature T_e","lvl2":"3. Using Python to compute emission to space"},"content":"\n\nRerranging the Stefan-Boltzmann law we getT_e = \\left(\\frac{\\text{OLR}}{\\sigma} \\right)^{\\frac{1}{4}}\n\nFirst just use Python like a hand calculator to calculate T_e iteractively:\n\n\n\nTry typing a few different ways, with and without whitespace.\n\n\n\nPython fact 1\n\nExtra spaces are ignored!\n\nBut typing numbers interactively is tedious and error prone. Let’s define a variable called sigma\n\n\n\nPython fact 2\n\nWe can define new variables interactively.\n\nVariables let us give names to things. Names make our code easy to understand.\n\n","type":"content","url":"/courseware/models-budgets-fun#calculate-the-emission-temperature-t-e","position":23},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Thoughts on emission temperature","lvl2":"3. Using Python to compute emission to space"},"type":"lvl3","url":"/courseware/models-budgets-fun#thoughts-on-emission-temperature","position":24},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Thoughts on emission temperature","lvl2":"3. Using Python to compute emission to space"},"content":"What value did we find for the emission temperature T_e? How does it compare to the actual global mean surface temperature?\n\nIs the blackbody radiator a good model for the Earth’s emission to space?\n\n","type":"content","url":"/courseware/models-budgets-fun#thoughts-on-emission-temperature","position":25},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"A simple greenhouse model","lvl2":"3. Using Python to compute emission to space"},"type":"lvl3","url":"/courseware/models-budgets-fun#a-simple-greenhouse-model","position":26},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"A simple greenhouse model","lvl2":"3. Using Python to compute emission to space"},"content":"\n\nThe emission to space is lower because of the greenhouse effect, which we will study in detail later.\n\nFor now, just introduce a basic concept:\n\nOnly a fraction of the surface emission makes it out to space.\n\nWe will model the OLR as\\text{OLR} = \\tau \\sigma T_s^4\n\nwhere \\tau is a number we will call the transmissivity of the atmosphere.\n\nLet’s fit this model to observations:\\tau = \\frac{\\text{OLR}}{\\sigma T_s^4}\n\n#tau = 238.5 / sigma / 288**4\n\nTry calculating OLR for a warmer Earth at 292 K:\n\n\n\nNaturally the emission to space is higher. By how much has it increased for this 4 degree warming?\n\n\n\nAnswer: 13.5 W m^{-2}. Okay but this is tedious and prone to error.\nWhat we really want to do is define a reusable function\n\n\n\nNote a few things:\n\nThe colon at the end of the first line indicates that there is more coming.\n\nThe interpreter automatically indents the code for us (after the colon)\n\nThe interpreter automatically colors certain key words\n\nWe need to hit return one more time at the end to finish our function\n\nPython fact 3\n\nIndentations are not ignored!  They serve to group together several lines of code.\n\nwe will see plenty of examples of this – in this case, the indentation lets the interpreter know that the code is all part of the function definition.\n\nPython fact 4\n\ndef is a keyword that defines a function.\n\nJust like a mathematical function, a Python function takes one or more input arguments, performs some operations on those inputs, and gives back some resulting value.\n\nPython fact 5\n\nreturn is a keyword that defines what value will be returned by the function.\n\nOnce a function is defined, we can call it interactively:\n\n# print(OLR(288), OLR(292), OLR(292)-OLR(288))\n\nPython fact 6\n\nThe # symbol is used for comments in Python code.\n\nThe interpreter will ignore anything that follows # on a line of code.\n\nPython fact 7\n\nprint() is a function that causes the value of an expression (or a list of expressions) to be printed to the screen.\n\nDon’t always need it, because by default the interpreter prints the output of the last statement to the screen, as we have seen.\n\nNote also that we defined variables named sigma and tau inside our OLR function.\n\nWhat happens if you try to print(tau)?\n\n\n\nPython fact 8\n\nVariables defined in functions do not exist outside of that function.\n\nTry declaring sigma = 2, then print(sigma). And try computing OLR(288) again. Did anything change?\n\n\n\nNote that we didn’t really need to define those variables inside the function. We could have written the function in one line.\n\nBut sometimes using named variables makes our code much easier to read and understand!\n\n","type":"content","url":"/courseware/models-budgets-fun#a-simple-greenhouse-model","position":27},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Arrays with numpy","lvl2":"3. Using Python to compute emission to space"},"type":"lvl3","url":"/courseware/models-budgets-fun#arrays-with-numpy","position":28},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl3":"Arrays with numpy","lvl2":"3. Using Python to compute emission to space"},"content":"Now let’s try some array calculations:\n\n#import numpy as np\n#T = np.linspace(230, 300, 10)\n#print(T)\n\nWe have just created an array object.\n\nThe linspace function creates an array of numbers evenly spaced between the start and end points.\n\nThe third argument tells Python how many elements we want.\n\nWe will use the numpy package all the time. It is the basic workhorse of scientific computing with Python. We can’t do much with arrays of numbers.\n\nDoes our OLR function work on an array of temperature values?\n\n\n\nNow let’s assign these values to a new variable.\n\n#OLR = OLR(T)\n\nNow try again to compute OLR(288)\n\nWhat do you get?\n\n\n\nPython fact 9\n\nAssigning a value to a named variable overwrites whatever was already assigned to that name.\n\nPython is also case sensitive. If we had used olr to store the array, there would be no conflict.\n\nNow let’s re-enter our function. Start typing def and then hit the “up arrow” key. What happens?\n\n\n\nThe editor gives us lots of useful keyboard shortcuts.\n\nHere it’s looking up the last expression we entered that began with def. Saves a lot of time and typing!\n\nRe-enter the function.\n\n\n\nWhat happens if you use the up arrow without typing anything first?\n\n\n\nAlso, try typing history\n\n\n\nThis is very handy. The Python console is taking notes for you!\n\n\n\n","type":"content","url":"/courseware/models-budgets-fun#arrays-with-numpy","position":29},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"4. Summary"},"type":"lvl2","url":"/courseware/models-budgets-fun#id-4-summary","position":30},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"4. Summary"},"content":"\n\nClimate is essentially statistics of weather.\n\nThe planet warms up or cools down in response to differences between energy absorbed from the sun and energy emitted to space.\n\nA climate model represents (mathematically of numerically) these exchanges of energy between the Earth system and space.\n\nThe observed emission to space or \n\nOutgoing Longwave Radiation is consistent with an emission temperature T_e = 255 K -- much colder than Earth’s surface.\n\nThis is evidence of the greenhouse effect.\n\nWe adopted a very simple greenhouse model, assuming a fixed transmissivity \\tau for the atmosphere.\n\n\\tau conceptually represents the fraction of the emission from the surface that makes it all the way to space. It is a number less than 1.\n\nPython is fun and useful.\n\n","type":"content","url":"/courseware/models-budgets-fun#id-4-summary","position":31},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"Credits"},"type":"lvl2","url":"/courseware/models-budgets-fun#credits","position":32},{"hierarchy":{"lvl1":"Climate models, the global energy budget, and Fun with Python","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/models-budgets-fun#credits","position":33},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models"},"type":"lvl1","url":"/courseware/numerical-diffusion","position":0},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/numerical-diffusion","position":1},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"1. The one-dimensional diffusion equation"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-1-the-one-dimensional-diffusion-equation","position":2},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"1. The one-dimensional diffusion equation"},"content":"\n\nSuppose that a quantity u(x) is mixed down-gradient by a diffusive process.\n\nThe diffusive flux isF = - K \\frac{\\partial u}{\\partial x}\n\nThere will be local changes in u wherever this flux is convergent or divergent:\\frac{\\partial u}{\\partial t} = - \\frac{\\partial F}{\\partial x}\n\nPutting this together gives the classical diffusion equation in one dimension\\frac{\\partial u}{\\partial t} = \\frac{\\partial}{\\partial x} \\left( K \\frac{\\partial u}{\\partial x} \\right)\n\nFor simplicity, we are going to limit ourselves to Cartesian geometry rather than meridional diffusion on a sphere.\n\nWe will also assume here that K is a constant, so our governing equation is\\frac{\\partial u}{\\partial t} = K \\frac{\\partial^2 u}{\\partial x^2}\n\nThis equation represents a time-dependent diffusion process. It is an initial-boundary value problem. We want to integrate the model forward in time to model the changes in the field u(x).\n\n","type":"content","url":"/courseware/numerical-diffusion#id-1-the-one-dimensional-diffusion-equation","position":3},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-2-discretizing-the-diffusion-operator-in-space","position":4},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"2. Discretizing the diffusion operator in space"},"content":"\n\nSolving a differential equation on a computer always requires some approximation to represent the continuous function u(x,t) and its derivatives in terms of discrete quantities (arrays of numbers).\n\nWe have already dealt with simple discretization of the time derivative back in the first notes on \n\nsolving the simplest EBM. We used the forward Euler method to step all our of radiation models forward in time so far.\n\n","type":"content","url":"/courseware/numerical-diffusion#id-2-discretizing-the-diffusion-operator-in-space","position":5},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some notation for discretization of u(x,t)","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl3","url":"/courseware/numerical-diffusion#some-notation-for-discretization-of-u-x-t","position":6},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some notation for discretization of u(x,t)","lvl2":"2. Discretizing the diffusion operator in space"},"content":"We will discretize time and space on gridsx_j , ~~~ t^n\n\nso thatu_j^n = u(x_j, ~t^n)\n\n","type":"content","url":"/courseware/numerical-diffusion#some-notation-for-discretization-of-u-x-t","position":7},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Discretizing the diffusive flux","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl3","url":"/courseware/numerical-diffusion#discretizing-the-diffusive-flux","position":8},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Discretizing the diffusive flux","lvl2":"2. Discretizing the diffusion operator in space"},"content":"The governing equation can be written in terms of the convergence of the diffusive flux:\\frac{\\partial u}{\\partial t} = - \\frac{\\partial F}{\\partial x}\n\nIt is sensible to use a centered difference to approximate this derivative:\\frac{\\partial F}{\\partial x} \\bigg|_j \\approx  \\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{x_{j+\\frac{1}{2}} - x_{j-\\frac{1}{2}}}\n\nThe time tendency at point x_j can thus be written\\frac{\\partial u}{\\partial t} \\bigg|_j  \\approx - \\frac{F_{j+\\frac{1}{2}} - F_{j-\\frac{1}{2}}}{x_{j+\\frac{1}{2}} - x_{j-\\frac{1}{2}}}\n\nThe flux itself depends on a spatial derivative of u. We will apply the same centered difference approximation. At point x_j this would look like\\frac{\\partial u}{\\partial x} \\approx \\frac{u_{j+\\frac{1}{2}} - u_{j-\\frac{1}{2}}}{x_{j+\\frac{1}{2}} - x_{j-\\frac{1}{2}}}\n\nBut we actually want to approximate F_{j+\\frac{1}{2}} and F_{j-\\frac{1}{2}}, so we apply the centered difference formula at these intermediate points to getF_{j+\\frac{1}{2}} \\approx -K \\frac{u_{j+1} - u_{j}}{x_{j+1} - x_{j}}\n\nandF_{j-\\frac{1}{2}} \\approx -K \\frac{u_{j} - u_{j-1}}{x_{j} - x_{j-1}}\n\nPutting this all together, we can write the time tendency at x_j as\\frac{\\partial u}{\\partial t} \\bigg|_j  \\approx K \\frac{ \\frac{u_{j+1} - u_{j}}{x_{j+1} - x_{j}} - \\frac{u_{j} - u_{j-1}}{x_{j} - x_{j-1}}}{x_{j+\\frac{1}{2}} - x_{j-\\frac{1}{2}}}\n\nWe’ll make things easy on ourselves by using uniform grid spacing in x, sox_{j+1} - x_{j} = x_{j} - x_{j-1} = x_{j+\\frac{1}{2}} - x_{j-\\frac{1}{2}} = \\Delta x\n\nSo our final formula for the diffusive flux convergence is\\frac{\\partial u}{\\partial t} \\bigg|_j  \\approx K \\frac{ u_{j+1} - 2 u_{j} + u_{j-1}}{\\Delta x^2}\n\n","type":"content","url":"/courseware/numerical-diffusion#discretizing-the-diffusive-flux","position":9},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"No-flux boundary conditions","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl3","url":"/courseware/numerical-diffusion#no-flux-boundary-conditions","position":10},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"No-flux boundary conditions","lvl2":"2. Discretizing the diffusion operator in space"},"content":"\n\nSuppose the domain is 0 \\le x \\le 1, with solid walls at x=0, 1.\n\nThe physical boundary condition at the walls is that there can be no flux in or out of the walls:F(0) = F(1) = 0\n\nSo the boundary conditions on u are\\frac{\\partial u}{\\partial x} = 0 ~~~ \\text{at} ~~~ x=0,1\n\n","type":"content","url":"/courseware/numerical-diffusion#no-flux-boundary-conditions","position":11},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The staggered grid","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl3","url":"/courseware/numerical-diffusion#the-staggered-grid","position":12},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The staggered grid","lvl2":"2. Discretizing the diffusion operator in space"},"content":"Suppose we have a grid of J+1 total points between x=0 and x=1, including the boundaries:\n\nx^*_0 = 0 \n\nx^*_1 = \\Delta x\n\nx^*_2 = 2~\\Delta x\n\n...\n\nx^*_j = j~\\Delta x\n\n...\n\nx^*_{J-1} = (J-1)~\\Delta x = 1 - \\Delta x \n\nx^*_J = J ~ \\Delta x = 1 \n\nClearly then the grid spacing must be \\Delta x = 1/J.\n\nWe’ll define the fluxes on this grid. The boundary conditions can thus be writtenF_0 = F_J = 0\n\nSince our centered difference discretization defines F at points halfway between the u points, it is sensible to locate u on another grid that is offset by \\Delta x / 2.\n\nThe first grid point for u is thus a distance \\Delta x / 2 from the wall, and there are a total of J points:\n\nx_0 = \\Delta x / 2\n\nx_1 = \\Delta x / 2 + \\Delta x\n\nx_2 = \\Delta x / 2 + 2~\\Delta x\n\n...\n\nx_j = \\Delta x / 2 + j~\\Delta x\n\n...\n\nx_{J-1} = \\Delta x / 2 + (J-1)~\\Delta x = 1 - \\Delta x / 2 \n\n","type":"content","url":"/courseware/numerical-diffusion#the-staggered-grid","position":13},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Implementing the boundary condition on the staggered grid","lvl2":"2. Discretizing the diffusion operator in space"},"type":"lvl3","url":"/courseware/numerical-diffusion#implementing-the-boundary-condition-on-the-staggered-grid","position":14},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Implementing the boundary condition on the staggered grid","lvl2":"2. Discretizing the diffusion operator in space"},"content":"At x_0 we have\\frac{\\partial u}{\\partial t} \\bigg|_0  \\approx -\\frac{ F_1 - F_0}{\\Delta x}\n\nSubbing in F_0 = 0 and the normal discretization for F_1 gives\\frac{\\partial u}{\\partial t} \\bigg|_0  \\approx K \\frac{ u_1 - u_0 }{\\Delta x^2}\n\nThe same procedure at the other wall yields\\frac{\\partial u}{\\partial t} \\bigg|_{J-1}  \\approx - K \\frac{ u_{J-1} - u_{J-2} }{\\Delta x^2}\n\nPulling this all together we have a complete discretization of the diffusion operator including its boundary conditions:\\frac{\\partial u}{\\partial t} \\bigg|_0  \\approx K \\frac{ u_1 - u_0 }{\\Delta x^2}\\frac{\\partial u}{\\partial t} \\bigg|_j  \\approx K \\frac{ u_{j+1} - 2 u_{j} + u_{j-1}}{\\Delta x^2}, ~~~~~~ j=1,...,J-2\\frac{\\partial u}{\\partial t} \\bigg|_{J-1}  \\approx - K \\frac{ u_{J-1} - u_{J-2} }{\\Delta x^2}\n\n","type":"content","url":"/courseware/numerical-diffusion#implementing-the-boundary-condition-on-the-staggered-grid","position":15},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"3. Coding the discretized diffusion operator in numpy"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-3-coding-the-discretized-diffusion-operator-in-numpy","position":16},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"3. Coding the discretized diffusion operator in numpy"},"content":"\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, Math, Latex\n\nHere we will divide our domain up into 20 grid points.\n\nJ1 = 20\nJ = J1\ndeltax = 1./J\ndisplay(Math(r'J = %i' %J))\ndisplay(Math(r'\\Delta x = %0.3f' %deltax))\n\nThe fluxes will be solved on the staggered grid with 21 points.\n\nu will be solved on the 20 point grid.\n\nxstag = np.linspace(0., 1., J+1)\nx = xstag[:-1] + deltax/2\nprint( x)\n\nu = np.zeros_like(x)\n\nHere’s one way to implement the finite difference, using array indexing.\n\ndudx = (u[1:] - u[:-1]) / (x[1:] - x[:-1])\n\ndudx.shape\n\nWe can also use the function numpy.diff() to accomplish the same thing:\n\nhelp(np.diff)\n\nnp.diff(u).shape\n\nHere is a function that computes the diffusive flux F on the staggered grid, including the boundaries.\n\ndef diffusive_flux(u, deltax, K=1):\n    #  Take the finite difference\n    F = np.diff(u)/deltax\n    #  add a zero as the first element (no flux on boundary)\n    F = np.insert(F, 0, 0.)\n    #  add another zero as the last element (no flux on boundary)\n    F = np.append(F, 0.)\n    #  flux is DOWN gradient, proportional to D\n    return -K*F\n\ndiffusive_flux(u,deltax).shape\n\nThe time tendency of u is just the convergence of this flux, which requires one more finite difference:\n\ndef diffusion(u, deltax, K=1):\n    #  compute flux\n    F = diffusive_flux(u, deltax, K)\n    #  take convergence of flux\n    return -np.diff(F) / deltax\n\n","type":"content","url":"/courseware/numerical-diffusion#id-3-coding-the-discretized-diffusion-operator-in-numpy","position":17},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"A smooth example","lvl2":"3. Coding the discretized diffusion operator in numpy"},"type":"lvl3","url":"/courseware/numerical-diffusion#a-smooth-example","position":18},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"A smooth example","lvl2":"3. Coding the discretized diffusion operator in numpy"},"content":"Suppose we have an initial u field that has a local maximum in the interior.\n\nThe gaussian (bell curve) function is a convenient way to create such a field.\n\ndef gaussian(x, mean, std):\n    return np.exp(-(x-mean)**2/(2*std**2))/np.sqrt(2*np.pi*std**2)\n\nK = 0.01\nu = gaussian(x, 0.5, 0.08)\ndudt = diffusion(u, deltax, K=K)\nfig, ax = plt.subplots(1)\nax.plot(x, u, label='$u(x)$')\nax.plot(x, dudt, label='$du/dt$')\nax.legend()\n\nHopefully this makes sense. The diffusion is acting to smooth out u by reducing the peak and increasing u on the flanks of the gaussian bump.\n\n","type":"content","url":"/courseware/numerical-diffusion#a-smooth-example","position":19},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some non-smooth examples","lvl2":"3. Coding the discretized diffusion operator in numpy"},"type":"lvl3","url":"/courseware/numerical-diffusion#some-non-smooth-examples","position":20},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some non-smooth examples","lvl2":"3. Coding the discretized diffusion operator in numpy"},"content":"Use a random number generator to create some noisy initial conditions.\n\nfig = plt.figure(figsize=(10,8))\nfor n in range(4):\n    u = np.random.random(J)\n    dudt = diffusion(u, deltax, K)\n    ax = fig.add_subplot(2,2,n+1)\n    ax.plot(x, u)\n    ax.plot(x, dudt)\n\n","type":"content","url":"/courseware/numerical-diffusion#some-non-smooth-examples","position":21},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"4. Discretizing the time derivative"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-4-discretizing-the-time-derivative","position":22},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"4. Discretizing the time derivative"},"content":"\n\nThe simplest way to discretize the time derivative is the forward Euler method:\\frac{d u}{dt} \\bigg|^n \\approx \\frac{u^{n+1} - u^n}{\\Delta t}\n\nWe have already used this method to step our prognostic variables forward in time.\n\nSolving the above for the future value of u givesu^{n+1} = u^n + \\Delta t \\frac{d u}{dt} \\bigg|^n\n\nWe apply our discretization of the diffusion operator to the current value of the field u^n_j, to get our formula for the future values:u_j^{n+1} = u_j^n + \\frac{K \\Delta t}{\\Delta x^2} \\left( u^n_{j+1} - 2 u^n_{j} + u^n_{j-1} \\right)\n\n(except at the boundaries, where the diffusion operator is slightly different -- see above).\n\nTogether, this scheme is known as Forward Time, Centered Space or FTCS.\n\nIt is very simple to implement in numpy code.\n\ndef step_forward(u, deltax, deltat, K=1):\n    dudt = diffusion(u, deltax, K)\n    return u + deltat * dudt\n\nK = 0.01\ndeltat = 0.125\ndeltat1 = deltat\n\nu0 = gaussian(x, 0.5, 0.08)\nu1 = step_forward(u0, deltax, deltat1, K)\nfig, ax = plt.subplots(1)\nax.plot(x, u0, label='initial')\nax.plot(x, u1, label='next')\nax.legend()\n\nLet’s loop through a number of timesteps.\n\n#  regular resolution\nJ = 20\ndeltax = 1./J\nxstag = np.linspace(0., 1., J+1)\nx = xstag[:-1] + deltax/2\n\nu = gaussian(x, 0.5, 0.08)\nniter = 11\nfor n in range(niter):\n    u = step_forward(u, deltax, deltat1, K)\n    plt.plot(x, u, label=n)\nplt.legend()\n\nThe numerics were easy to implement, and the scheme seems to work very well! The results are physically sensible.\n\n","type":"content","url":"/courseware/numerical-diffusion#id-4-discretizing-the-time-derivative","position":23},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Now, suppose that you wanted to double the spatial resolution","lvl2":"4. Discretizing the time derivative"},"type":"lvl3","url":"/courseware/numerical-diffusion#now-suppose-that-you-wanted-to-double-the-spatial-resolution","position":24},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Now, suppose that you wanted to double the spatial resolution","lvl2":"4. Discretizing the time derivative"},"content":"Try setting J=40 and repeat the above procedure.\n\nWhat happens?\n\n#  double the resolution\nscaling_factor = 2\nJ = J1 * scaling_factor\ndeltax = 1./J\nxstag = np.linspace(0., 1., J+1)\nx = xstag[:-1] + deltax/2\n\nu = gaussian(x, 0.5, 0.08)\nfor n in range(niter):\n    u = step_forward(u, deltax, deltat1, K)\n    plt.plot(x, u, label=n)\nplt.legend()\n\nSuddenly our scheme is producing numerical noise that grows in time and overwhelms to smooth physical solution we are trying to model.\n\nThis is bad!\n\nWhat went wrong, and what can we do about it?\n\n","type":"content","url":"/courseware/numerical-diffusion#now-suppose-that-you-wanted-to-double-the-spatial-resolution","position":25},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"5. Stability analysis of the FTCS scheme"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-5-stability-analysis-of-the-ftcs-scheme","position":26},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"5. Stability analysis of the FTCS scheme"},"content":"\n\nFollowing \n\nPress et al. (1988), Numerical Recipes in C: The Art of Scientific Computing.\n\nThis is an example of the so-called von Neumann Stability Analysis. It is a form of normal mode analysis for a discrete system.\n\nWe look for normal mode solutions (i.e. wavy sines and cosines) of the finite difference equations of the formu_j^n = \\xi^n \\exp(i~k~j~ \\Delta x)\n\nwhere k is some real number that represents a spatial wavenumber (which can have any value), and \\xi = \\xi(k) is a complex number that depends on k.\n\nThe number \\xi is called the amplification factor at a given wavenumber k.\n\nThe question is, under what conditions do wavy solutions grow with time?  (This is bad, as it means small numerical noise will become large numerical noise and make our differencing scheme unusable)\n\nLet’s substitute the normal mode solution into our finite difference equation\\frac{u_j^{n+1} -  u_j^n}{\\Delta t} = \\frac{K}{\\Delta x^2} \\left( u^n_{j+1} - 2 u^n_{j} + u^n_{j-1} \\right)\n\n\\frac{\\xi^{n+1} \\exp(i~k~j~ \\Delta x) -  \\xi^n \\exp(i~k~j~ \\Delta x)}{\\Delta t} = \\frac{K}{\\Delta x^2} \\left( \\xi^n \\exp(i~k~(j+1)~ \\Delta x) - 2 \\xi^n \\exp(i~k~j~ \\Delta x) + \\xi^n \\exp(i~k~(j-1)~ \\Delta x) \\right)\n\nDivide through by \\xi^n \\exp(i~k~j~\\Delta x):\n\n\\frac{\\xi^{n+1}}{\\xi^n} -  1 = \\frac{K \\Delta t}{\\Delta x^2} \\left(\\exp(i~k~\\Delta x) - 2 + \\exp(-i~k~\\Delta x) \\right)\n\nThe exponentials simplify\n\n\\frac{\\xi^{n+1}}{\\xi^n} = 1 + \\frac{K \\Delta t}{\\Delta x^2} \\left(2 \\cos(k~\\Delta x) - 2 \\right)\n\nOr using a double angle identity,\n\n\\frac{\\xi^{n+1}}{\\xi^n} = 1 - \\frac{4 K \\Delta t}{\\Delta x^2} \\sin^2 \\left( \\frac{k~\\Delta x}{2} \\right)\n\n","type":"content","url":"/courseware/numerical-diffusion#id-5-stability-analysis-of-the-ftcs-scheme","position":27},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The wavy solution must not grow with time","lvl2":"5. Stability analysis of the FTCS scheme"},"type":"lvl3","url":"/courseware/numerical-diffusion#the-wavy-solution-must-not-grow-with-time","position":28},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The wavy solution must not grow with time","lvl2":"5. Stability analysis of the FTCS scheme"},"content":"\n\nWe need to prevent growing normal modes. So successive amplitudes should be\\bigg| \\frac{\\xi^{n+1}}{\\xi^n} \\bigg| \\le 1\n\nThe stability condition is thus\\bigg| 1 - \\frac{4 K \\Delta t}{\\Delta x^2} \\sin^2 \\left( \\frac{k~\\Delta x}{2} \\right) \\bigg| \\le 1\n\nand this condition must be met for EVERY possible wavenumber k.\n\nBecause 0 \\le \\sin^2(\\phi) \\le 1 for any \\phi, our condition can only be violated if\\frac{4 K \\Delta t}{\\Delta x^2} > 2\n\nWe conclude the the FTCS scheme is stable so long as this stability condition is met:\\Delta t \\le \\frac{\\Delta x^2}{2 K}\n\n","type":"content","url":"/courseware/numerical-diffusion#the-wavy-solution-must-not-grow-with-time","position":29},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"We have just discovered an important constraint on the allowable timestep","lvl2":"5. Stability analysis of the FTCS scheme"},"type":"lvl3","url":"/courseware/numerical-diffusion#we-have-just-discovered-an-important-constraint-on-the-allowable-timestep","position":30},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"We have just discovered an important constraint on the allowable timestep","lvl2":"5. Stability analysis of the FTCS scheme"},"content":"The maximum timestep we can use with the FTCS scheme for the diffusion equation is proportional to \\Delta x^2.\n\nA doubling of the spatial resolution would require a 4x shorter timestep to preserve numerical stability.\n\nPhysically, the restriction is that the maximum allowable timestep is approximately the diffusion time across a grid cell of width \\Delta x.\n\n","type":"content","url":"/courseware/numerical-diffusion#we-have-just-discovered-an-important-constraint-on-the-allowable-timestep","position":31},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"6. Numerical tests with a shorter timestep"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-6-numerical-tests-with-a-shorter-timestep","position":32},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"6. Numerical tests with a shorter timestep"},"content":"\n\nGoing back to our Gaussian example, let’s double the resolution but shorten the timestep by a factor of 4.\n\n#  double the resolution\nJ = J1 * scaling_factor\ndeltax = 1./J\nxstag = np.linspace(0., 1., J+1)\nx = xstag[:-1] + deltax/2\n\nK = 0.01\n#  The maximum stable timestep\ndeltat_max = deltax**2 / 2 / K\nprint( 'The maximum allowable timestep is %f' %deltat_max)\n\ndeltat = deltat1 / scaling_factor**2\nprint( '4x the previous timestep is %f' %deltat)\n\nu = gaussian(x, 0.5, 0.08)\nfor n in range(niter):\n    for t in range(scaling_factor**2):\n        u = step_forward(u, deltax, deltat, K)\n    plt.plot(x, u, label=n)\nplt.legend()\n\nSuccess! The graph now looks like a smoother (higher resolution) version of our first integration with the coarser grid.\n\nBut at a big cost:  our calculation required 4 times more timesteps to do the same integration.\n\nThe total increase in computational cost was actally a factor of 8 to get a factor of 2 increase in spatial resolution.\n\n","type":"content","url":"/courseware/numerical-diffusion#id-6-numerical-tests-with-a-shorter-timestep","position":33},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"7. The need for a more efficient method"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-7-the-need-for-a-more-efficient-method","position":34},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"7. The need for a more efficient method"},"content":"\n\nIn practice the condition\\Delta t \\le \\frac{\\Delta x^2}{2 K}\n\nis often too restrictive to be practical!\n\nConsider our diffusive EBM. Suppose we want a spatial resolution of 1º latitude. Then we have 180 grid points from pole to pole, and our physical length scale is\\Delta x \\approx 10^5 \\text{m}\n\nWe were using a diffusivity of D = 0.6 ~ \\text{W m}^{-2}~\\text{K}^{-1} and a heat capacity of C = 4 \\times 10^7 ~ \\text{J m}^{-2} ~\\text{K}^{-1} (for 10 m of water, \n\nsee Lecture 17).\n\nAccounting for the spherical geometry in our EBM, this translates toK = \\frac{2 \\pi a^2 D}{C} = \\frac{2 \\pi ~ (6.4 \\times 10^6 ~\\text{m})^2 ~(0.6 ~ \\text{W m}^{-2}~\\text{K}^{-1})}{4 \\times 10^7 ~ \\text{J m}^{-2} ~\\text{K}^{-1}} \\approx 4 \\times 10^{6} ~ \\text{m}^2 ~ \\text{s}^{-1}\n\nRecall that this is the diffusivity associated with the large-scale motion of the atmosphere (mostly). If we take a typical velocity scale for a mid-latitude eddy, V \\approx 20~\\text{m s}^{-1}, and a typical length scale for that eddy, L \\approx 2000~\\text{km}, the diffusivity then scales asK = V~ L = 4 \\times 10^{6} ~ \\text{m}^2 ~ \\text{s}^{-1}\n\nUsing these numbers the stability condition is roughly\\Delta t \\le 10^3 ~\\text{s}\n\nwhich is less than one hour!\n\nAnd if we wanted to double the resolution to 0.5º, we would need a timestep of just a few minutes.\n\nThis can be a very onerous requirement for a model that would like to integrate out for many years.  We can do better, but we need a different time discretization!\n\n","type":"content","url":"/courseware/numerical-diffusion#id-7-the-need-for-a-more-efficient-method","position":35},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"8. Implicit time method"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-8-implicit-time-method","position":36},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"8. Implicit time method"},"content":"\n\nWith numerical methods for partial differential equations, it often turns out that a small change in the discretization can make an enormous difference in the results.\n\nThe implicit time scheme applies exactly the same centered difference scheme to the spatial derivatives in the diffusion operator.\n\nBut instead of applying the operator to the field u^n at time n, we instead apply it to the field at the future time u^{n+1}.\n\nThe scheme looks like\\frac{u_j^{n+1} - u_j^n}{\\Delta t} =  \\frac{K}{\\Delta x^2} \\left( u^{n+1}_{j+1} - 2 u^{n+1}_{j} + u^{n+1}_{j-1} \\right)\n\nin the interior, and at the boundaries:\\frac{u_0^{n+1} - u_0^n}{\\Delta t} = \\frac{K}{\\Delta x^2} \\left( u^{n+1}_1 - u^{n+1}_0 \\right)\n\nand\\frac{u_{J-1}^{n+1} - u_{J-1}^n}{\\Delta t} = - \\frac{K}{\\Delta x^2} \\left( u_{J-1}^{n+1} - u_{J-2}^{n+1} \\right)\n\nThis might seem like a strange way to write the system, since we don’t know the future state of the system at t^{n+1}. That’s what we’re trying to solve for!\n\nLet’s move all terms evaluated at t^{n+1} to the left hand side:u_j^{n+1}  - \\frac{K \\Delta t}{\\Delta x^2} \\left( u^{n+1}_{j+1} - 2 u^{n+1}_{j} + u^{n+1}_{j-1} \\right) = u_j^n\n\nor-K^* u^{n+1}_{j+1} + \\left(1+2K^* \\right) u_j^{n+1} - K^* u_{j-1}^{n+1} = u_j^n\n\n(in the interior)\n\nwhere we have introduced a non-dimensional diffusivityK^* = \\frac{K \\Delta t}{\\Delta x^2}\n\n","type":"content","url":"/courseware/numerical-diffusion#id-8-implicit-time-method","position":37},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The implicit scheme as a matrix problem","lvl2":"8. Implicit time method"},"type":"lvl3","url":"/courseware/numerical-diffusion#the-implicit-scheme-as-a-matrix-problem","position":38},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"The implicit scheme as a matrix problem","lvl2":"8. Implicit time method"},"content":"We can write this as a matrix equation\\mathbf{A} ~ \\mathbf{U}^{n+1} = \\mathbf{U}^n\n\nwhere \\mathbf{U} is a J\\times1 column vector giving the field u(x) at a particular instant in time:\\mathbf{U}^n = \\left[ \\begin{array}{c} \nu^n_0 \\\\\nu^n_1  \\\\\nu^n_2 \\\\\n...  \\\\\nu^n_{J-2} \\\\\nu^n_{J-1} \\\\\n\\end{array}\n\\right]\n\nand \\mathbf{U}^{n+1} is the same vector at t^{n+1}.\n\n\\mathbf{A} is a J\\times J tridiagonal matrix:\\mathbf{A} = \\left[ \\begin{array}{cccccccc}\n 1+K^* & -K^* & 0 & 0 & ... & 0 & 0 & 0 \\\\\n -K^* & 1+2K^* & -K^* & 0 & ... & 0 & 0 & 0 \\\\\n 0 & -K^* & 1+2K^* & -K^* &... & 0 & 0 & 0 \\\\\n ... & ... & ... & ... & ... & ... & ... & ... \\\\\n 0 & 0 & 0 & 0 & ... & -K^* & 1+2K^* & -K^* \\\\\n 0 & 0 & 0 & 0 & ... & 0 & -K^* & 1+K^* \\\\\n\\end{array}\n\\right]\n\nSolving for the future state of the system \\mathbf{U}^{n+1} is then just the solution of the linear system\\mathbf{U}^{n+1} = \\mathbf{A}^{-1} \\mathbf{U}^{n}\n\nSolving a tridiagonal matrix problem like this is a very common operation in computer science, and efficient numerical routines are available in many languages (including Python / numpy!)\n\n","type":"content","url":"/courseware/numerical-diffusion#the-implicit-scheme-as-a-matrix-problem","position":39},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Stability analysis of the implicit scheme","lvl2":"8. Implicit time method"},"type":"lvl3","url":"/courseware/numerical-diffusion#stability-analysis-of-the-implicit-scheme","position":40},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Stability analysis of the implicit scheme","lvl2":"8. Implicit time method"},"content":"We’ll skip the details, but the amplification factor for this scheme is (see Numerical Recipes book or other text on numerical methods):\\frac{\\xi^{n+1}}{\\xi^n} = \\frac{1}{1+4 K^* \\sin^2 \\left( \\frac{k \\Delta x}{2} \\right) }\n\nso the stability criterion of \\bigg| \\frac{\\xi^{n+1}}{\\xi^n} \\bigg| \\le 1\n\nis met for any value of K^* and thus for any timestep \\Delta t.\n\nThe implicit method (also called backward time) is unconditionally stable for any choice of timestep.\n\n","type":"content","url":"/courseware/numerical-diffusion#stability-analysis-of-the-implicit-scheme","position":41},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"9. Your homework assignment"},"type":"lvl2","url":"/courseware/numerical-diffusion#id-9-your-homework-assignment","position":42},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"9. Your homework assignment"},"content":"\n\nWrite Python code to solve the diffusion equation using this implicit time method. Demonstrate that it is numerically stable for much larger timesteps than we were able to use with the forward-time method. One way to do this is to use a much higher spatial resolution.\n\n","type":"content","url":"/courseware/numerical-diffusion#id-9-your-homework-assignment","position":43},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some final thoughts:","lvl2":"9. Your homework assignment"},"type":"lvl3","url":"/courseware/numerical-diffusion#some-final-thoughts","position":44},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl3":"Some final thoughts:","lvl2":"9. Your homework assignment"},"content":"We have just scratched the surface of the wonders and sorrows of numerical methods here. The implicit method is very stable but is not the most accurate method for a diffusion problem, particularly when you are interested in some of the faster dynamics of the system (as opposed to just getting the system quickly to its equilibrium state).\n\nThere are always trade-offs in the choice of a numerical method.\n\nThe equations for most climate models are sufficiently complex that more than one numerical method is necessary. Even in the simple diffusive EBM, the radiation terms are handled by a forward-time method while the diffusion term is solved implicitly.\n\nOnce you have worked through the above problem (diffusion only), you might want to look in the climlab code to see how the diffusion solver is implemented there, and how it is used when you integrate the EBM.\n\n","type":"content","url":"/courseware/numerical-diffusion#some-final-thoughts","position":45},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"Credits"},"type":"lvl2","url":"/courseware/numerical-diffusion#credits","position":46},{"hierarchy":{"lvl1":"A peek at numerical methods for diffusion models","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/numerical-diffusion#credits","position":47},{"hierarchy":{"lvl1":"The one-dimensional energy balance model"},"type":"lvl1","url":"/courseware/one-dim-ebm","position":0},{"hierarchy":{"lvl1":"The one-dimensional energy balance model"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\nSubsections marked with the asterisk * are more detailed mathematical discussions which can be skipped by the first-time reader.\n\n","type":"content","url":"/courseware/one-dim-ebm","position":1},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"1. Simulation versus parameterization of heat transport"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-1-simulation-versus-parameterization-of-heat-transport","position":2},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"1. Simulation versus parameterization of heat transport"},"content":"\n\nIn the previous lectures we have seen how heat transport by winds and ocean currents acts to COOL the tropics and WARM the poles. The observed temperature gradient is a product of both the insolation and the heat transport!\n\nWe were able to ignore this issue in our models of the global mean temperature, because the transport just moves energy around between latitude bands – does not create or destroy energy.\n\nBut if want to move beyond the global mean and create models of the equator-to-pole temperature structure, we cannot ignore heat transport. Has to be included somehow!\n\nThis leads to us the old theme of simulation versus parameterization.\n\nComplex climate models like the CESM simulate the heat transport by solving the full equations of motion for the atmosphere (and ocean too, if coupled).\n\n","type":"content","url":"/courseware/one-dim-ebm#id-1-simulation-versus-parameterization-of-heat-transport","position":3},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Simulation of synoptic-scale variability in CESM","lvl2":"1. Simulation versus parameterization of heat transport"},"type":"lvl3","url":"/courseware/one-dim-ebm#simulation-of-synoptic-scale-variability-in-cesm","position":4},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Simulation of synoptic-scale variability in CESM","lvl2":"1. Simulation versus parameterization of heat transport"},"content":"Let’s revisit an animation of the global 6-hourly sea-level pressure field from our slab ocean simulation with CESM. (We first saw this back in the notes on \n\nClimate Systems and Climate Models)\n\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('As85L34fKYQ')\n\nAll these traveling weather systems tend to move warm, moist air poleward and cold, dry air equatorward. There is thus a net poleward energy transport.\n\nA model like this needs to simulate the weather in order to model the heat transport.\n\n","type":"content","url":"/courseware/one-dim-ebm#simulation-of-synoptic-scale-variability-in-cesm","position":5},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A simpler statistical approach","lvl2":"1. Simulation versus parameterization of heat transport"},"type":"lvl3","url":"/courseware/one-dim-ebm#a-simpler-statistical-approach","position":6},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A simpler statistical approach","lvl2":"1. Simulation versus parameterization of heat transport"},"content":"Let’s emphasize: the most important role for heat transport by winds and ocean currents is to more energy from where it’s WARM to where it’s COLD, thereby reducing the temperature gradient (equator to pole) from what it would be if the planet were in radiative-convective equilibrium everywhere with no north-south motion.\n\nThis is the basis for the parameterization of heat transport often used in simple climate models.\n\nDiscuss analogy with molecular heat conduction: metal rod with one end in the fire.\n\nDefine carefully temperature gradient dTs / dy\nMeasures how quickly the temperature  decreases as we move northward\n(negative in NH, positive in SH)\n\nIn any conduction or diffusion process, the flux (transport) of a quantity is always DOWN-gradient  (from WARM to COLD).\n\nSo our parameterization will look like\\mathcal{H} = -K ~ dT / dy\n\nWhere K is some positive number “diffusivity of the climate system”.\n\n","type":"content","url":"/courseware/one-dim-ebm#a-simpler-statistical-approach","position":7},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-2-the-temperature-diffusion-parameterization","position":8},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"2. The temperature diffusion parameterization"},"content":"\n\n","type":"content","url":"/courseware/one-dim-ebm#id-2-the-temperature-diffusion-parameterization","position":9},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Definition","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl3","url":"/courseware/one-dim-ebm#definition","position":10},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Definition","lvl2":"2. The temperature diffusion parameterization"},"content":"Last time we wrote down an energy budget for a thin zonal band centered at latitude \\phi:\\frac{\\partial E(\\phi)}{\\partial t} = \\text{ASR}(\\phi) - \\text{OLR}(\\phi) - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial \\mathcal{H}}{\\partial \\phi}\n\nwhere we have written every term as an explicit function of latitude to remind ourselves that this is a local budget, unlike the zero-dimensional global budget we considered at the start of the course.\n\nLet’s now formally introduce a parameterization that approximates the heat transport as a down-gradient diffusion process:\\mathcal{H}(\\phi) \\approx -2 \\pi a^2  \\cos⁡\\phi ~ D ~ \\frac{\\partial T_s}{\\partial \\phi}\n\nWith D a parameter for the diffusivity or thermal conductivity of the climate system, a number in W m^{-2} ºC^{-1}.\n\nThe value of D will be chosen to match observations – i.e. tuned.\n\nNotice that we have explicitly chosen to the use surface temperature gradient to set the heat transport. This is a convenient (and traditional) choice to make, but it is not the only possibility! We could instead tune our parameterization to some measure of the free-tropospheric temperature gradient.\n\n","type":"content","url":"/courseware/one-dim-ebm#definition","position":11},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"The diffusive parameterization in the planetary energy budget","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl3","url":"/courseware/one-dim-ebm#the-diffusive-parameterization-in-the-planetary-energy-budget","position":12},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"The diffusive parameterization in the planetary energy budget","lvl2":"2. The temperature diffusion parameterization"},"content":"Plug the parameterization into our energy budget to get\\frac{\\partial E(\\phi)}{\\partial t} = \\text{ASR}(\\phi) - \\text{OLR}(\\phi) - \\frac{1}{2 \\pi a^2  \\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left( -2 \\pi a^2  \\cos⁡\\phi ~ D ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nIf we assume that D is a constant (does not vary with latitude), then this simplifies to\\frac{\\partial E(\\phi)}{\\partial t} = \\text{ASR}(\\phi) - \\text{OLR}(\\phi) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\n","type":"content","url":"/courseware/one-dim-ebm#the-diffusive-parameterization-in-the-planetary-energy-budget","position":13},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Surface temperature is a good measure of column heat content","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl3","url":"/courseware/one-dim-ebm#surface-temperature-is-a-good-measure-of-column-heat-content","position":14},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Surface temperature is a good measure of column heat content","lvl2":"2. The temperature diffusion parameterization"},"content":"Let’s now make the same assumption we made [back at the beginning of the course](Lecture01 -- Planetary energy budget.ipynb) when we first wrote down the zero-dimensional EBM.\n\nMost of the heat capacity is in the oceans, so that the energy content of each column E is proportional to surface temperature:E(\\phi) = C(\\phi) ~ T_s(\\phi)\n\nwhere C is effective heat capacity of the atmosphere - ocean column, in units of J m^{-2} K^{-1}. Here we are writing C are a function of latitude so that our model is general enough to allow different land-ocean fractions at different latitudes.\n\n","type":"content","url":"/courseware/one-dim-ebm#surface-temperature-is-a-good-measure-of-column-heat-content","position":15},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A heat equation for surface temperature","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl3","url":"/courseware/one-dim-ebm#a-heat-equation-for-surface-temperature","position":16},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A heat equation for surface temperature","lvl2":"2. The temperature diffusion parameterization"},"content":"Now our budget becomes a PDE for the surface temperature T_s(\\phi, t):C(\\phi) \\frac{\\partial T_s}{\\partial t} = \\text{ASR}(\\phi) - \\text{OLR}(\\phi) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nNotice that if we were NOT on a spherical planet and didn’t have to worry about the changing size of latitude circles, this would look something like\\frac{\\partial T}{\\partial t} = K \\frac{\\partial^2 T}{\\partial y^2} + \\text{forcing terms}\n\nwith K = D/C in m^{2} s^{-1}.\n\nDoes equation look familiar?\n\nThis is the heat equation, one of the central equations in classical mathematical physics.\n\nThis equation describes the behavior of a diffusive system, i.e. how mixing by random molecular motion smears out the temperature.\n\nIn our case, the analogy is between the random molecular motion of a metal rod, and the net mixing / stirring effect of weather systems.\n\n","type":"content","url":"/courseware/one-dim-ebm#a-heat-equation-for-surface-temperature","position":17},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Take the global average...","lvl2":"2. The temperature diffusion parameterization"},"type":"lvl3","url":"/courseware/one-dim-ebm#id-take-the-global-average","position":18},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Take the global average...","lvl2":"2. The temperature diffusion parameterization"},"content":"Take the integral \\int_{-\\pi/2}^{\\pi/2} \\cos\\phi ~ d\\phi of each term.C \\frac{\\partial \\overline{T_s}}{\\partial t} d\\phi = \\overline{\\text{ASR}} - \\overline{\\text{OLR}} + D \\int_{-\\pi/2}^{\\pi/2} \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right) d\\phi\n\nThe global average of the last term (heat transport) must go to zero (why?)\n\nTherefore this reduces to our familiar zero-dimensional EBM.\n\n","type":"content","url":"/courseware/one-dim-ebm#id-take-the-global-average","position":19},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"3. Solving the temperature diffusion equation with climlab"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-3-solving-the-temperature-diffusion-equation-with-climlab","position":20},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"3. Solving the temperature diffusion equation with climlab"},"content":"\n\nclimlab has a pre-defined process for solving the meridional diffusion equation. Let’s look at a simple example in which diffusion is the ONLY process that changes the temperature.\n\nThe equation we’re going to solve here isC(\\phi) \\frac{\\partial T_s}{\\partial t} = \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\n(i.e. the EBM equation without any radiation terms)\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport climlab\nfrom climlab import constants as const\n\n#  First define an initial temperature field\n#   that is warm at the equator and cold at the poles\n#   and varies smoothly with latitude in between\n\nfrom climlab.utils import legendre\nsfc = climlab.domain.zonal_mean_surface(num_lat=90, water_depth=10.)\nlat = sfc.lat.points\ninitial = 12. - 40. * legendre.P2(np.sin(np.deg2rad(lat)))\n\nfig, ax = plt.subplots()\nax.plot(lat, initial)\nax.set_xlabel('Latitude')\nax.set_ylabel('Temperature (deg C)');\n\n##  Set up the climlab diffusion process\n\n# make a copy of initial so that it remains unmodified\nTs = climlab.Field(np.array(initial), domain=sfc)\n# thermal diffusivity in W/m**2/degC\nD = 0.55\n# create the climlab diffusion process\n#  setting the diffusivity and a timestep of ONE MONTH\nd = climlab.dynamics.MeridionalHeatDiffusion(name='Diffusion', \n            state=Ts, D=D, timestep=const.seconds_per_month)\nprint(d)\n\n#  We are going to step forward one month at a time\n#  and store the temperature each time\nn_iter = 5\ntemp = np.zeros((Ts.size, n_iter+1))\ntemp[:, 0] = np.squeeze(Ts)\nfor n in range(n_iter):\n    d.step_forward()\n    temp[:, n+1] = np.squeeze(Ts)\n\n#  Now plot the temperatures\nfig,ax = plt.subplots()\nax.plot(lat, temp)\nax.set_xlabel('Latitude')\nax.set_ylabel('Temperature (deg C)')\nax.legend(range(n_iter+1)); ax.grid();\n\nAt each timestep, the warm temperatures get cooler (at the equator) while the cold polar temperatures get warmer!\n\nDiffusion is acting to reduce the temperature gradient.\n\nIf we let this run a long time, what should happen??\n\nTry it yourself and find out!\n\n\n\n","type":"content","url":"/courseware/one-dim-ebm#id-3-solving-the-temperature-diffusion-equation-with-climlab","position":21},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Mathematical aside: the Legendre Polynomials","lvl2":"3. Solving the temperature diffusion equation with climlab"},"type":"lvl3","url":"/courseware/one-dim-ebm#id-mathematical-aside-the-legendre-polynomials","position":22},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Mathematical aside: the Legendre Polynomials","lvl2":"3. Solving the temperature diffusion equation with climlab"},"content":"Here we have used a function called the “2nd Legendre polynomial”, defined asP_2 (x) = \\frac{1}{2} \\left( 3x^2-1 \\right)\n\nwhere we have also setx = \\sin\\phi\n\nJust turns out to be a useful mathematical description of the relatively smooth changes in things like annual-mean insolation from equator to pole.\n\nIn fact these are so useful that they are coded up in a special module within climlab:\n\nx = np.linspace(-1,1)\nfig,ax = plt.subplots()\nax.plot(x, legendre.P2(x))\nax.set_title('$P_2(x)$')\n\n","type":"content","url":"/courseware/one-dim-ebm#id-mathematical-aside-the-legendre-polynomials","position":23},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"4. Parameterizing the radiation terms"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-4-parameterizing-the-radiation-terms","position":24},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"4. Parameterizing the radiation terms"},"content":"\n\n","type":"content","url":"/courseware/one-dim-ebm#id-4-parameterizing-the-radiation-terms","position":25},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"The basic problem","lvl2":"4. Parameterizing the radiation terms"},"type":"lvl3","url":"/courseware/one-dim-ebm#the-basic-problem","position":26},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"The basic problem","lvl2":"4. Parameterizing the radiation terms"},"content":"Let’s go back to the complete budget with our heat transport parameterizationC(\\phi) \\frac{\\partial T_s}{\\partial t} = \\text{ASR}(\\phi) - \\text{OLR}(\\phi) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nTo turn our budget into a model, we need specific parameterizations that link the radiation ASR and OLR to surface temperature T_s (the state variable for our model).\n\nIn mathematical terms, we want to express this as a closed equation for surface temperature T_s.\n\n","type":"content","url":"/courseware/one-dim-ebm#the-basic-problem","position":27},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Fixed albedo assumption","lvl2":"4. Parameterizing the radiation terms"},"type":"lvl3","url":"/courseware/one-dim-ebm#fixed-albedo-assumption","position":28},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Fixed albedo assumption","lvl2":"4. Parameterizing the radiation terms"},"content":"First, as usual, we can write the solar term as\\text{ASR} = (1-\\alpha) ~ Q\n\nFor now, we will assume that the planetary albedo is fixed (does not depend on temperature). Therefore the entire shortwave term (1-\\alpha) Q is a fixed source term in our budget. It varies in space and time but does not depend on T_s.\n\nNote that the solar term is (at least in annual average) larger at equator than poles… and transport term acts to flatten out the temperatures.\n\n","type":"content","url":"/courseware/one-dim-ebm#fixed-albedo-assumption","position":29},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Parameterizing the longwave radiation","lvl2":"4. Parameterizing the radiation terms"},"type":"lvl3","url":"/courseware/one-dim-ebm#parameterizing-the-longwave-radiation","position":30},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Parameterizing the longwave radiation","lvl2":"4. Parameterizing the radiation terms"},"content":"Now, we almost have a model we can solve for T!  Just need to express the OLR in terms of temperature.\n\nSo…  what’s the link between OLR and temperature????\n\n[ discuss ]\n\nWe spent a good chunk of the course looking at this question, and developed a model of a vertical column of air.\n\nWe are trying now to build a model of the equator-to-pole (or pole-to-pole) temperature structure.\n\nWe COULD use an array of column models, representing temperature as a function of height and latitude (and time).\n\nBut instead, we will keep things simple, one spatial dimension at a time.\n\nIntroduce the following simple parameterization:OLR = A + B T_s\n\nWith:\n\nT_s the zonal average surface temperature in ºC\n\nA is a constant in W m^{-2}\n\nB is a constant in W m^{-2} ºC^{-1}\n\nThink of A as an inverse measure of the greenhouse gas amount (Why?).\n\nThe parameter B is closely related to the climate feedback parameter λ that we defined a while back. The only difference is that in the EBM we are going to explicitly separate the albedo feedback from all other radiative feedbacks.\n\n","type":"content","url":"/courseware/one-dim-ebm#parameterizing-the-longwave-radiation","position":31},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-5-tuning-the-longwave-parameters-with-reanalysis-data","position":32},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"content":"\n\n","type":"content","url":"/courseware/one-dim-ebm#id-5-tuning-the-longwave-parameters-with-reanalysis-data","position":33},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"OLR versus surface temperature in NCEP Reanalysis data","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"type":"lvl3","url":"/courseware/one-dim-ebm#olr-versus-surface-temperature-in-ncep-reanalysis-data","position":34},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"OLR versus surface temperature in NCEP Reanalysis data","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"content":"Let’s look at the data to find reasonable values for A and B.\n\nimport xarray as xr\n## The NOAA ESRL server is shutdown! January 2019\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\nncep_Ts = xr.open_dataset( ncep_url + \"surface_gauss/skt.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/'\n#ncep_Ts = xr.open_dataset(url + 'surface_gauss/skt')\nlat_ncep = ncep_Ts.lat; lon_ncep = ncep_Ts.lon\nprint( ncep_Ts)\n\n#  Take the annual and zonal average!\nTs_ncep_annual = ncep_Ts.skt.mean(dim=('lon','time'))\n\n# TOA radiation data\nncep_ulwrf = xr.open_dataset( ncep_url + \"other_gauss/ulwrf.ntat.mon.1981-2010.ltm.nc\", decode_times=False)\nncep_dswrf = xr.open_dataset( ncep_url + \"other_gauss/dswrf.ntat.mon.1981-2010.ltm.nc\", decode_times=False)\nncep_uswrf = xr.open_dataset( ncep_url + \"other_gauss/uswrf.ntat.mon.1981-2010.ltm.nc\", decode_times=False)\n#ncep_ulwrf = xr.open_dataset(url + \"other_gauss/ulwrf\")\n#ncep_dswrf = xr.open_dataset(url + \"other_gauss/dswrf\")\n#ncep_uswrf = xr.open_dataset(url + \"other_gauss/uswrf\")\nOLR_ncep_annual = ncep_ulwrf.ulwrf.mean(dim=('lon','time'))\nASR_ncep_annual = (ncep_dswrf.dswrf - ncep_uswrf.uswrf).mean(dim=('lon','time'))\n\n#  Use a linear regression package to compute best fit for the slope and intercept\nfrom scipy.stats import linregress\nslope, intercept, r_value, p_value, std_err = linregress(Ts_ncep_annual, OLR_ncep_annual)\n\nprint( 'Best fit is A = %0.0f W/m2 and B = %0.1f W/m2/degC' %(intercept, slope))\n\nWe’re going to plot the data and the best fit line, but also another line using these values:\n\n#  More standard values\nA = 210.\nB = 2.\n\nfig, ax1 = plt.subplots(figsize=(8,6))\nax1.plot( Ts_ncep_annual, OLR_ncep_annual, 'o' , label='data')\nax1.plot( Ts_ncep_annual, intercept + slope * Ts_ncep_annual, 'k--', label='best fit')\nax1.plot( Ts_ncep_annual, A + B * Ts_ncep_annual, 'r--', label='B=2')\nax1.set_xlabel('Surface temperature (C)', fontsize=16)\nax1.set_ylabel('OLR (W m$^{-2}$)', fontsize=16)\nax1.set_title('OLR versus surface temperature from NCEP reanalysis', fontsize=18)\nax1.legend(loc='upper left')\nax1.grid()\n\nDiscuss these curves...\n\nSuggestion of at least 3 different regimes with different slopes (cold, medium, warm).\n\nUnbiased “best fit” is actually a poor fit over all the intermediate temperatures.\n\nThe astute reader will note that...   by taking the zonal average of the data before the regression, we are biasing this estimate toward cold temperatures.  [WHY?]\n\nLet’s take these reference values:A = 210 ~ \\text{W m}^{-2}, ~~~ B = 2 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1}\n\n","type":"content","url":"/courseware/one-dim-ebm#olr-versus-surface-temperature-in-ncep-reanalysis-data","position":35},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Checking the global average","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"type":"lvl3","url":"/courseware/one-dim-ebm#checking-the-global-average","position":36},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Checking the global average","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"content":"Note that in the global average, recall \\overline{T_s} = 288 \\text{ K} = 15^\\circ\\text{C}\n\nAnd so this parameterization gives\\overline{\\text{OLR}} = 210 + 15 \\times 2 = 240 ~\\text{W m}^{-2}\n\nAnd the observed global mean is \\overline{\\text{OLR}} = 239 ~\\text{W m}^{-2} \nSo this is consistent.\n\n","type":"content","url":"/courseware/one-dim-ebm#checking-the-global-average","position":37},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Relationship between B and feedback parameters","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"type":"lvl3","url":"/courseware/one-dim-ebm#relationship-between-b-and-feedback-parameters","position":38},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Relationship between B and feedback parameters","lvl2":"5. Tuning the longwave parameters with reanalysis data"},"content":"Recall that when we looked at climate forcing and feedback, we said that overall response to a forcing \\Delta R in W m^{-2} is\\Delta T = \\frac{\\Delta R}{\\lambda}\n\nand where \\lambda is the overall climate feedback parameter:\\lambda = \\lambda_0 - \\sum_{i=1}^{N} \\lambda_i\n\nand\n\n\\lambda_0 = 3.3 W m^{-2} K^{-1} is the no-feedback climate response\n\n\\sum_{i=1}^{N} \\lambda_i is the sum of all radiative feedbacks, defined to be positive for amplifying processes.\n\nMore positive feedbacks thus mean that \\lambda is a smaller number, which means the response to a given forcing is larger!\n\nHere in the EBM the parameter B plays the same role as \\lambda -- a smaller number means a more sensitive model.\n\nOur estimate B = 2 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1} thus implies that the sum of all LW feedback processes (including water vapor, lapse rates and clouds) is\\sum_{i=1}^{N} \\lambda_i = 3.3 ~\\text{W m}^{-2}~^\\circ\\text{C}^{-1} - 2 ~\\text{W m}^{-2}~^\\circ\\text{C}^{-1} = 1.3 ~\\text{W m}^{-2}~^\\circ\\text{C}^{-1}\n\nLooking back at the chart of feedback parameter values from GCMs, does this seem plausible?\n\n","type":"content","url":"/courseware/one-dim-ebm#relationship-between-b-and-feedback-parameters","position":39},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-6-the-one-dimensional-diffusive-energy-balance-model","position":40},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"content":"\n\n","type":"content","url":"/courseware/one-dim-ebm#id-6-the-one-dimensional-diffusive-energy-balance-model","position":41},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Putting the equation together","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"type":"lvl3","url":"/courseware/one-dim-ebm#putting-the-equation-together","position":42},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Putting the equation together","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"content":"Putting the above OLR parameterization into our budget equation givesC(\\phi) \\frac{\\partial T_s}{\\partial t} = (1-\\alpha) ~ Q - \\left( A + B~T_s \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nThis is the equation for a very important and useful simple model of the climate system. It is typically referred to as the (one-dimensional) Energy Balance Model.\n\n(although as we have seen over and over, EVERY climate model is actually an “energy balance model” of some kind)\n\nAlso for historical reasons this is often called the Budyko-Sellers model, after Budyko and Sellers who both (independently of each other) published influential papers on this subject in 1969 \n\nBudyko, 1969\n\nSellers, 1969.\n\nRecap: parameters in this model are\n\nC: heat capacity in J m^{-2} ºC^{-1}\n\nA: longwave emission at 0ºC in W m^{-2}\n\nB: increase in emission per degree, in W m^{-2} ºC^{-1}\n\nD: horizontal (north-south) diffusivity of the climate system in W m^{-2} ºC^{-1}\n\nWe also need to specify the albedo.\n\n","type":"content","url":"/courseware/one-dim-ebm#putting-the-equation-together","position":43},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Observed albedo","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"type":"lvl3","url":"/courseware/one-dim-ebm#observed-albedo","position":44},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Observed albedo","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"content":"Let’s go back to the NCEP Reanalysis data to see how planetary albedo actually varies as a function of latitude.\n\ndays = np.linspace(1.,50.)/50 * const.days_per_year\nQann_ncep = climlab.solar.insolation.daily_insolation(lat_ncep, days ).mean(dim='day')\nalbedo_ncep = 1 - ASR_ncep_annual / Qann_ncep\n\nalbedo_ncep_global = np.average(albedo_ncep, weights=np.cos(np.deg2rad(lat_ncep)))\n\nprint( 'The annual, global mean planetary albedo is %0.3f' %albedo_ncep_global)\nfig,ax = plt.subplots()\nax.plot(lat_ncep, albedo_ncep)\nax.grid();\nax.set_xlabel('Latitude')\nax.set_ylabel('Albedo');\n\nThe albedo increases markedly toward the poles.\n\nThere are several reasons for this:\n\nSurface snow and ice increase toward the poles\n\nCloudiness is an important (but complicated) factor.\n\nAlbedo increases with solar zenith angle (the angle at which the direct solar beam strikes a surface)\n\n","type":"content","url":"/courseware/one-dim-ebm#observed-albedo","position":45},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Approximating the observed albedo with a smooth function","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"type":"lvl3","url":"/courseware/one-dim-ebm#approximating-the-observed-albedo-with-a-smooth-function","position":46},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Approximating the observed albedo with a smooth function","lvl2":"6. The one-dimensional diffusive Energy Balance Model"},"content":"Like temperature and insolation, this can be approximated by a smooth function that increases with latitude:\\alpha(\\phi) \\approx \\alpha_0 + \\alpha_2 P_2(\\sin\\phi)\n\nwhere P_2 is the 2nd Legendre polynomial (see above).\n\nIn effect we are using a truncated series expansion of the full meridional structure of \\alpha. a_0 is the global average, and a_2 is proportional to the equator-to-pole gradient in \\alpha.\n\nWe will set\\alpha_0 = 0.354, ~~~ \\alpha_2 = 0.25\n\n# Add a new curve to the previous figure\na0 = albedo_ncep_global\na2 = 0.25\nax.plot(lat_ncep, a0 + a2 * legendre.P2(np.sin(np.deg2rad(lat_ncep))))\nfig\n\nOf course we are not fitting all the details of the observed albedo curve. But we do get the correct global mean a reasonable representation of the equator-to-pole gradient in albedo.\n\n","type":"content","url":"/courseware/one-dim-ebm#approximating-the-observed-albedo-with-a-smooth-function","position":47},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"7. The annual-mean EBM"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-7-the-annual-mean-ebm","position":48},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"7. The annual-mean EBM"},"content":"\n\nFor now, we will be focusing on the annual mean model.\n\nFor the insolation, we set Q(\\phi,t) = \\bar{Q}(\\phi), the annual mean value (large at equator, small at pole).\n\n","type":"content","url":"/courseware/one-dim-ebm#id-7-the-annual-mean-ebm","position":49},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Mathematical details: deriving the annual mean model","lvl2":"7. The annual-mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#id-mathematical-details-deriving-the-annual-mean-model","position":50},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"* Mathematical details: deriving the annual mean model","lvl2":"7. The annual-mean EBM"},"content":"Suppose we take the annual mean of the planetary energy budget.\n\nIf the albedo is fixed, then the average is pretty simple. Our EBM equation is purely linear, so the change over one year is justC \\frac{\\Delta \\overline{T_s}}{\\text{1 year}} = \\left(1-\\alpha(\\phi) \\right) ~ \\overline{Q}(\\phi) - \\left( A + B~\\overline{T_s} \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial \\overline{T_s}}{\\partial \\phi} \\right)\n\nwhere \\overline{T_s}(\\phi) is the annual mean surface temperature, and \\overline{Q}(\\phi) is the annual mean insolation (both functions of latitude).\n\nNotice that once we average over the seasonal cycle, there are no time-dependent forcing terms. The temperature will just evolve toward a steady equilibrium.\n\nThe equilibrium temperature is then the solution of this Ordinary Differential Equation (setting \\Delta \\overline{T_s} = 0 above):0 = \\left(1-\\alpha(\\phi) \\right) ~ \\overline{Q}(\\phi) - \\left( A + B~\\overline{T_s} \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{d }{d \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{d \\overline{T_s}}{d \\phi} \\right)\n\nYou will often see this equation written in terms of the independent variablex = \\sin\\phi\n\nwhich is 0 at the equator and \\pm1 at the poles. Substituting this for \\phi, noting that dx = \\cos\\phi~ d\\phi and rearranging a bit gives\\frac{D}{B} \\frac{d }{d x} \\left(   (1-x^2)  ~ \\frac{d \\overline{T_s}}{d x} \\right) - \\overline{T_s} = -\\frac{\\left(1-\\alpha(x) \\right) ~ \\overline{Q}(x) - A}{B}\n\nThis is actually a 2nd order ODE, and actually a 2-point Boundary Value Problem for the temperature T(x), where the boundary conditions are no-flux at the boundaries (usually the poles).\n\nThis form can be convenient for analytical solutions. As we will see, the non-dimensional number D/B is a very important measure of the efficiency of heat transport in the climate system.  We will return to this later.\n\n","type":"content","url":"/courseware/one-dim-ebm#id-mathematical-details-deriving-the-annual-mean-model","position":51},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Numerical solutions of the time-dependent EBM","lvl2":"7. The annual-mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#numerical-solutions-of-the-time-dependent-ebm","position":52},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Numerical solutions of the time-dependent EBM","lvl2":"7. The annual-mean EBM"},"content":"We will leave the time derivative in our model, because this is the most convenient way to find the equilibrium solution!\n\nThere is code available in climlab to solve the diffusive EBM.\n\n","type":"content","url":"/courseware/one-dim-ebm#numerical-solutions-of-the-time-dependent-ebm","position":53},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Animating the adjustment of annual mean EBM to equilibrium","lvl2":"7. The annual-mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#animating-the-adjustment-of-annual-mean-ebm-to-equilibrium","position":54},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Animating the adjustment of annual mean EBM to equilibrium","lvl2":"7. The annual-mean EBM"},"content":"Before looking at the details of how to set up an EBM in climlab, let’s look at an animation of the adjustment of the model (its temperature and energy budget) from an isothermal initial condition.\n\nFor reference, all the code necessary to generate the animation is here in the notebook.\n\n#  Some imports needed to make and display animations\nfrom IPython.display import HTML\nfrom matplotlib import animation\n\ndef setup_figure():\n    templimits = -20,32\n    radlimits = -340, 340\n    htlimits = -6,6\n    latlimits = -90,90\n    lat_ticks = np.arange(-90,90,30)\n\n    fig, axes = plt.subplots(3,1,figsize=(8,10))\n    axes[0].set_ylabel('Temperature (deg C)')\n    axes[0].set_ylim(templimits)\n    axes[1].set_ylabel('Energy budget (W m$^{-2}$)')\n    axes[1].set_ylim(radlimits)\n    axes[2].set_ylabel('Heat transport (PW)')\n    axes[2].set_ylim(htlimits)\n    axes[2].set_xlabel('Latitude')\n    for ax in axes: ax.set_xlim(latlimits); ax.set_xticks(lat_ticks); ax.grid()\n    fig.suptitle('Diffusive energy balance model with annual-mean insolation', fontsize=14)\n    return fig, axes\n\ndef initial_figure(model):\n    #  Make figure and axes\n    fig, axes = setup_figure()\n    # plot initial data\n    lines = []\n    lines.append(axes[0].plot(model.lat, model.Ts)[0])\n    lines.append(axes[1].plot(model.lat, model.ASR, 'k--', label='SW')[0])\n    lines.append(axes[1].plot(model.lat, -model.OLR, 'r--', label='LW')[0])\n    lines.append(axes[1].plot(model.lat, model.net_radiation, 'c-', label='net rad')[0])\n    lines.append(axes[1].plot(model.lat, model.heat_transport_convergence, 'g--', label='dyn')[0])\n    lines.append(axes[1].plot(model.lat, \n            model.net_radiation+model.heat_transport_convergence, 'b-', label='total')[0])\n    axes[1].legend(loc='upper right')\n    lines.append(axes[2].plot(model.lat_bounds, model.heat_transport)[0])\n    lines.append(axes[0].text(60, 25, 'Day 0'))\n    return fig, axes, lines\n\ndef animate(day, model, lines):\n    model.step_forward()\n    #  The rest of this is just updating the plot\n    lines[0].set_ydata(model.Ts)\n    lines[1].set_ydata(model.ASR)\n    lines[2].set_ydata(-model.OLR)\n    lines[3].set_ydata(model.net_radiation)\n    lines[4].set_ydata(model.heat_transport_convergence)\n    lines[5].set_ydata(model.net_radiation+model.heat_transport_convergence)\n    lines[6].set_ydata(model.heat_transport)\n    lines[-1].set_text('Day {}'.format(int(model.time['days_elapsed'])))\n    return lines   \n\n#  A model starting from isothermal initial conditions\ne = climlab.EBM_annual()\ne.Ts[:] = 15.  # in degrees Celsius\ne.compute_diagnostics()\n\n#  Plot initial data\nfig, axes, lines = initial_figure(e)\n\nani = animation.FuncAnimation(fig, animate, frames=np.arange(1, 100), fargs=(e, lines))\n\nHTML(ani.to_html5_video())\n\nThis animation lets us visualize the competition between the radiation which is trying to warm the tropics and cool the poles, and the dynamics which is doing the opposite.\n\nThis is very much analogous to the competition between radiation and convection we saw in \n\nour study of radiative-convective equilibrium in a single vertical column.\n\n","type":"content","url":"/courseware/one-dim-ebm#animating-the-adjustment-of-annual-mean-ebm-to-equilibrium","position":55},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Example EBM using climlab","lvl2":"7. The annual-mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#example-ebm-using-climlab","position":56},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Example EBM using climlab","lvl2":"7. The annual-mean EBM"},"content":"Here is a simple example using the parameter values we just discussed.\n\nFor simplicity, this model will use the annual mean insolation, so the forcing is steady in time.\n\nWe haven’t yet selected an appropriate value for the diffusivity D. Let’s just try something and see what happens:\n\nD = 0.1\nmodel = climlab.EBM_annual(name='EBM', A=210, B=2, D=D, a0=0.354, a2=0.25)\nprint(model)\n\n# The model object stores a dictionary of important parameters\nmodel.param\n\n# Run it out long enough to reach equilibrium\nmodel.integrate_years(10)\n\n","type":"content","url":"/courseware/one-dim-ebm#example-ebm-using-climlab","position":57},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Comparison of the equilibrium climate to observations","lvl2":"7. The annual-mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#comparison-of-the-equilibrium-climate-to-observations","position":58},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Comparison of the equilibrium climate to observations","lvl2":"7. The annual-mean EBM"},"content":"\n\nfig, axes = plt.subplots(1,2, figsize=(12,4))\nax = axes[0]\nax.plot(model.lat, model.Ts, label=('D = %0.1f' %D))\nax.plot(lat_ncep, Ts_ncep_annual, label='obs')\nax.set_ylabel('Temperature (degC)')\nax = axes[1]\nenergy_in = np.squeeze(model.ASR - model.OLR)\nax.plot(model.lat, energy_in, label=('D = %0.1f' %D))\nax.plot(lat_ncep, ASR_ncep_annual - OLR_ncep_annual, label='obs')\nax.set_ylabel('Net downwelling radiation at TOA (W m$^{-2}$)')\nfor ax in axes:\n    ax.set_xlabel('Latitude'); ax.legend(); ax.grid();\n\ndef inferred_heat_transport( energy_in, lat_deg ):\n    '''Returns the inferred heat transport (in PW) by integrating the net energy imbalance from pole to pole.'''\n    from scipy import integrate\n    from climlab import constants as const\n    lat_rad = np.deg2rad( lat_deg )\n    return ( 1E-15 * 2 * np.pi * const.a**2 * \n            integrate.cumulative_trapezoid( np.cos(lat_rad)*energy_in,\n            x=lat_rad, initial=0. ) )\n\nfig, ax = plt.subplots()\nax.plot(model.lat, inferred_heat_transport(energy_in, model.lat), label=('D = %0.1f' %D))\nax.set_ylabel('Heat transport (PW)')\nax.legend(); ax.grid()\nax.set_xlabel('Latitude')\n\nThe upshot: compared to observations, this model has a much too large equator-to-pole temperature gradient, and not enough poleward heat transport!\n\nApparently we need to increase the diffusivity to get a better fit.\n\n","type":"content","url":"/courseware/one-dim-ebm#comparison-of-the-equilibrium-climate-to-observations","position":59},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-8-effects-of-diffusivity-in-the-annual-mean-ebm","position":60},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"\n\n","type":"content","url":"/courseware/one-dim-ebm#id-8-effects-of-diffusivity-in-the-annual-mean-ebm","position":61},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"What is the optimal value for D?","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#what-is-the-optimal-value-for-d","position":62},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"What is the optimal value for D?","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"We want to choose a value of D that gives a reasonable approximation to observations:\n\n\\Delta T \\approx 45 ºC between equator and pole\n\n\\mathcal{H}_{max} \\approx 5.5 PW (peak heat transport)\n\nI can do some trial and error. For no particular reason, let’s start with D = 1 W m^{-2} ºC^{-1}, and see how close we get to these targets.\n\nebm = climlab.EBM_annual(num_lat=40, A=210, B=2, a0=0.354, a2=0.25, D=1.)\nebm.integrate_years(20.)\n\nNote that we have an array of 40 surface temperature values on our latitude grid:\n\n# I can always look at the model variables as xarray objects if it's helpful\nclimlab.to_xarray(ebm.Ts)\n\nI can calculate the equator-to-pole temperature difference just by looking for the largest and smallest values:\n\ndeltaT = np.max(ebm.Ts) - np.min(ebm.Ts)\nprint(deltaT)\n\nAnd the heat transport is a diagnostic calculated by the model:\n\n# the poleward heat transport in PW\nebm.heat_transport\n\nI am mostly interested in finding its peak value:\n\nnp.max(ebm.heat_transport)\n\nSo... for a diffusivity parameter D = 1 W m^{-2} ºC^{-1} I get the following results:\n\n\\Delta T = 32.8 ^\\circC\n\n\\mathcal{H}_{max} = 6.64 PW\n\nComparing to our observational targets, this is too much heat transport and too small temperature gradient!\n\n","type":"content","url":"/courseware/one-dim-ebm#what-is-the-optimal-value-for-d","position":63},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Class exercise: crowd-sourcing the optical value for D","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#class-exercise-crowd-sourcing-the-optical-value-for-d","position":64},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Class exercise: crowd-sourcing the optical value for D","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"Repeat these calculations with some different values of D. We’ll crowd-source the optimal value that best matches our observational targets.\n\n\n\n","type":"content","url":"/courseware/one-dim-ebm#class-exercise-crowd-sourcing-the-optical-value-for-d","position":65},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Tabulate our crowd-sourced results!","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#tabulate-our-crowd-sourced-results","position":66},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"Tabulate our crowd-sourced results!","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"The \n\npandas package is very very useful for working with spreadsheet-style data in Python.\n\nimport pandas as pd\n\nclassdata = pd.DataFrame([\n              [1., 32.8, 6.64],  \n              # add more datasets in the same order: D, T, H\n              #[, ,],\n             ], \n            columns=[r'$D$', r'$\\Delta T$', r'$\\mathcal{H}_{max}$'])\nclassdata\n\nNow we can do fun things like make a scatterplot of the data. The pd.DataFrame object lets us make use of the labels in our dataset to make the code simpler and easier to read:\n\nfig, axes = plt.subplots(2,1)\nclassdata.plot.scatter(x=r'$D$', y=r'$\\Delta T$', ax=axes[0])\nclassdata.plot.scatter(x=r'$D$', y=r'$\\mathcal{H}_{max}$', ax=axes[1])\n\nIs it starting to become clear what value we should choose?\n\n","type":"content","url":"/courseware/one-dim-ebm#tabulate-our-crowd-sourced-results","position":67},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A more systematic search","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl3","url":"/courseware/one-dim-ebm#a-more-systematic-search","position":68},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl3":"A more systematic search","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"Do this as in-class investigation for a more advanced exercise\n\nSolve the annual-mean EBM (integrate out to equilibrium) over a range of different diffusivity parameters.\n\nMake three plots:\n\nGlobal-mean temperature as a function of D\n\nEquator-to-pole temperature difference \\Delta T as a function of D\n\nMaximum poleward heat transport \\mathcal{H}_{max} as a function of D\n\nChoose a value of D that gives a reasonable approximation to observations:\n\n\\Delta T \\approx 45 ºC\n\n\\mathcal{H}_{max} \\approx 5.5 PW\n\n\n\n","type":"content","url":"/courseware/one-dim-ebm#a-more-systematic-search","position":69},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl4":"One possible way to do this:","lvl3":"A more systematic search","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"type":"lvl4","url":"/courseware/one-dim-ebm#one-possible-way-to-do-this","position":70},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl4":"One possible way to do this:","lvl3":"A more systematic search","lvl2":"8. Effects of diffusivity in the annual mean EBM"},"content":"\n\n\n\nDarray = np.arange(0., 2.05, 0.05)\n\nmodel_list = []\nTmean_list = []\ndeltaT_list = []\nHmax_list = []\n\nfor D in Darray:\n    ebm = climlab.EBM_annual(A=210, B=2, a0=0.354, a2=0.25, D=D)\n    ebm.integrate_years(20., verbose=False)\n    Tmean = ebm.global_mean_temperature()\n    deltaT = np.max(ebm.Ts) - np.min(ebm.Ts)\n    energy_in = np.squeeze(ebm.ASR - ebm.OLR)\n    Htrans = ebm.heat_transport\n    Hmax = np.max(Htrans)\n    model_list.append(ebm)\n    Tmean_list.append(Tmean)\n    deltaT_list.append(deltaT)\n    Hmax_list.append(Hmax)\n\ncolor1 = 'b'\ncolor2 = 'r'\n\nfig = plt.figure(figsize=(8,6))\nax1 = fig.add_subplot(111)\nax1.plot(Darray, deltaT_list, color=color1)\nax1.plot(Darray, Tmean_list, 'b--')\nax1.set_xlabel(r'D (W m$^{-2}$ K$^{-1}$)', fontsize=14)\nax1.set_xticks(np.arange(Darray[0], Darray[-1], 0.2))\nax1.set_ylabel(r'$\\Delta T$ (equator to pole)', fontsize=14,  color=color1)\nfor tl in ax1.get_yticklabels():\n    tl.set_color(color1)\nax2 = ax1.twinx()\nax2.plot(Darray, Hmax_list, color=color2)\nax2.set_ylabel('Maximum poleward heat transport (PW)', fontsize=14, color=color2)\nfor tl in ax2.get_yticklabels():\n    tl.set_color(color2)\nax1.set_title('Effect of diffusivity on temperature gradient and heat transport in the EBM', fontsize=16)\nax1.grid()\n\nax1.plot([0.6, 0.6], [0, 140], 'k-');\n\nWhen D=0, every latitude is in radiative equilibrium and the heat transport is zero. As we have already seen, this gives an equator-to-pole temperature gradient much too high.\n\nWhen D is large, the model is very efficient at moving heat poleward. The heat transport is large and the temperture gradient is weak.\n\nThe real climate seems to lie in a sweet spot in between these limits.\n\nIt looks like our fitting criteria are met reasonably well with D=0.6 W m^{-2} K^{-1}\n\nAlso, note that the global mean temperature (plotted in dashed blue) is completely insensitive to D. Why do you think this is so?\n\n","type":"content","url":"/courseware/one-dim-ebm#one-possible-way-to-do-this","position":71},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"9. Summary: parameter values in the diffusive EBM"},"type":"lvl2","url":"/courseware/one-dim-ebm#id-9-summary-parameter-values-in-the-diffusive-ebm","position":72},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"9. Summary: parameter values in the diffusive EBM"},"content":"\n\nOur model is defined by the following equationC \\frac{\\partial T_s}{\\partial t} = (1-\\alpha) ~ Q - \\left( A + B~T_s \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nwith the albedo given by\\alpha(\\phi) = \\alpha_0 + \\alpha_2 P_2(\\sin\\phi)\n\nWe have chosen the following parameter values, which seems to give a reasonable fit to the observed annual mean temperature and energy budget:\n\n A = 210 ~ \\text{W m}^{-2}\n\n B = 2 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1} \n\n a_0 = 0.354\n\n a_2 = 0.25\n\n D = 0.6 ~ \\text{W m}^{-2}~^\\circ\\text{C}^{-1} \n\nThere is one parameter left to choose: the heat capacity C. We can’t use the annual mean energy budget and temperatures to guide this choice.\n\n[Why?]\n\nWe will instead look at seasonally varying models in the next set of notes.\n\n","type":"content","url":"/courseware/one-dim-ebm#id-9-summary-parameter-values-in-the-diffusive-ebm","position":73},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"Credits"},"type":"lvl2","url":"/courseware/one-dim-ebm#credits","position":74},{"hierarchy":{"lvl1":"The one-dimensional energy balance model","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/one-dim-ebm#credits","position":75},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages"},"type":"lvl1","url":"/courseware/orbital","position":0},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom climlab import constants as const\n\n","type":"content","url":"/courseware/orbital","position":1},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"1. The ice ages"},"type":"lvl2","url":"/courseware/orbital#id-1-the-ice-ages","position":2},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"1. The ice ages"},"content":"\n\nRecent Earth history (past few million years) has been dominated by the repeated growth and retreat of large continental ice sheets, mostly over the land masses of the Northern Hemisphere.\n\n","type":"content","url":"/courseware/orbital#id-1-the-ice-ages","position":3},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Extent of glaciation","lvl2":"1. The ice ages"},"type":"lvl3","url":"/courseware/orbital#extent-of-glaciation","position":4},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Extent of glaciation","lvl2":"1. The ice ages"},"content":"The images below show typical maximum extents of the ice sheets during recent glaciations (grey) compared with present-day ice sheets (black)\n\n\n\n\n\nHannes Grobe/AWI, \n\nhttp://​commons​.wikimedia​.org​/wiki​/File:Iceage​_north​-intergl​_glac​_hg​.png\n\n","type":"content","url":"/courseware/orbital#extent-of-glaciation","position":5},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Pacing of ice ages: evidence from ocean sediments","lvl2":"1. The ice ages"},"type":"lvl3","url":"/courseware/orbital#icevolumeseries","position":6},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Pacing of ice ages: evidence from ocean sediments","lvl2":"1. The ice ages"},"content":"\n\nThe figure below shows a global record of oxygen isotopes recorded in the shells of marine organisms \n\nLisiecki & Raymo, 2005. This record tells us primarily about variations in global ice volume -- because the net evaporation of water from the oceans to build up the ice sheets leaves the oceans enriched in heavier isotopes.\n\nThe x axis is plotted in Thousands of years before present (present-day is at zero on the left).\n\n\n\nLisiecki, L. E. and Raymo, M. E. (2005). A Pliocene-Pleistocene stack of 57 globally distributed benthic δ18O records. Paleoceanog., 20.\n\nThe ice ages (times of extensive glaciation and high ocean \\delta^{18}O) do not seem to be random fluctations. They have come and gone (approximately) periodically, somewhat like the seasons.\n\nSpectral analysis of such records reveals peaks at some special frequencies \n\nImbrie & Imbrie, 1986:\n\n\n\nImbrie, J. and Imbrie, K. P. (1986). Ice Ages: Solving the Mystery. Harvard University Press, Cambridge, Massachusetts.\n\nThe peaks noted on this figure are special because they correspond to frequencies of variations in Earth’s orbital parameters, as we will see.\n\nThese kind of results became available in the 1970’s for the first time, because ocean sediment cores allowed a sufficiently detailed look into the past to use time series analysis methods on them, e.g. to compute spectra.\n\nThe presence of peaks in the spectrum at orbital frequencies was seen as convincing evidence that the so-called astronomical theory of the ice ages was (at least partially) correct.\n\n","type":"content","url":"/courseware/orbital#icevolumeseries","position":7},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"2. Introducing the astronomical theory of the ice ages"},"type":"lvl2","url":"/courseware/orbital#id-2-introducing-the-astronomical-theory-of-the-ice-ages","position":8},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"2. Introducing the astronomical theory of the ice ages"},"content":"\n\nThe Astronomical Theory of climate and the ice ages looks to the regular, predictable variations in the Earth’s orbit around the Sun as the driving force for the growth and melt of the great ice sheets. Such theories have been discussed since long before there was any evidence about the timing of past glaciations.\n\nLast time we saw that insolation is NOT perfectly symmetrically distributed between the two hemispheres and seasons.\n\nTo refresh our memory, let’s useclimlab.solar.insolation.daily_insolation()\n\nto compare the maximum insolation received at the North Pole (at its summer solstice) and the South Pole (at its summer solstice).\n\nfrom climlab.solar.insolation import daily_insolation\nnumpoints = 365.\ndays = np.linspace(1., numpoints, 365)/numpoints * const.days_per_year\nQnorth = daily_insolation(90,days)\nQsouth = daily_insolation(-90,days)\nprint( 'Daily average insolation at summer solstice:')\nprint( 'North Pole: %0.2f W/m2.' %np.max(Qnorth))\nprint( 'South Pole: %0.2f W/m2.' %np.max(Qsouth))\n\nThese asymmetries arise because of the detailed shape of the orbit of the Earth around the Sun and the tilt of the Earth’s axis of rotation.\n\nAs these orbitals details change over time, there are significant changes in the distribution of sunlight over the seasons and latitudes.\n\n","type":"content","url":"/courseware/orbital#id-2-introducing-the-astronomical-theory-of-the-ice-ages","position":9},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"The Milankovitch hypothesis","lvl2":"2. Introducing the astronomical theory of the ice ages"},"type":"lvl3","url":"/courseware/orbital#the-milankovitch-hypothesis","position":10},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"The Milankovitch hypothesis","lvl2":"2. Introducing the astronomical theory of the ice ages"},"content":"Version of the astronomical theory have been debated for at least 150 years.\n\nThe most popular flavor has been the so-called Milankovitch hypothesis:\n\nIce sheets grow during periods of weak summer insolation in the Northern high latitudes.\n\nThe idea is that for an ice sheet to grow, seasonal snow must survive through the summer. Milankovitch therefore focussed on the factors determining the climatic conditions during summer.\n\n","type":"content","url":"/courseware/orbital#the-milankovitch-hypothesis","position":11},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"3. Ellipses and orbits"},"type":"lvl2","url":"/courseware/orbital#id-3-ellipses-and-orbits","position":12},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"3. Ellipses and orbits"},"content":"\n\nFirst, watch this neat animation from \n\nPeter Huybers (Harvard University):\n\nhttp://​www​.people​.fas​.harvard​.edu​/​~phuybers​/Inso​/Orbit​.mv4\n\nWatch carefully and note the three ways that the orbit is varying simultaneously.\n\nFrom Professor Huybers’ web page:\n\nA movie depicting Earth’s changing orbit over the last 100Ky. The orientation is such that spring equinox (indicated by a vertical bar) is directly to the front with the sun behind it. Northern Hemisphere summer is to our right, and Northern Hemisphere winter is to the left. The apsidal (dashed) line connects perihelion (Earth’s closest approach to the sun) to aphelion (the point when Earth is furthest from the sun). The rotaion of the apsidal line occurs because of the precession of the equinoxes and has a roughly twenty-two thousand year period. The semi-circle around the Earth indicates the location of the equator and the straight line is the polar axis. Obliquity is defined as the angle beetween the orbital and equatorial planes. The variations in Earth’s obliquity and the eccentricity of Earth’s orbit have both been increased in magnitude by a factor of ten. Also, the Earth’s angular velocity has been decreased by a factor of five thousand. Note that Earth’s angular velocity is slowest at aphelion and fastest at perihelion.\n\nThe Earth’s orbit around the Sun traces out an ellipse, with the Sun at one focal point \n\nImbrie & Imbrie, 1986:\n\n\n\nImbrie, J. and Imbrie, K. P. (1986). Ice Ages: Solving the Mystery. Harvard University Press, Cambridge, Massachusetts.\n\n","type":"content","url":"/courseware/orbital#id-3-ellipses-and-orbits","position":13},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"How to draw an ellipse","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#how-to-draw-an-ellipse","position":14},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"How to draw an ellipse","lvl2":"3. Ellipses and orbits"},"content":"Take any two points on a plane\n\nAttach the two ends of a piece of string to the two points.\n\nPull the loose string out as far as it will go in any direction, and place a pencil mark at that point.\n\nDo the same for every possible direction.\n\nCongratulations, you have just drawn a perfect ellipse. The two points are called foci or focal points.\n\nKeep this in mind, and you will always understand the mathematical definition of an ellipse:\n\nAn ellipse is a curve that is the locus of all points in the plane the sum of whose distances from two fixed points (the foci) is a positive constant.\n\nIn our case, the positive constant is the total length of the string.\n\n","type":"content","url":"/courseware/orbital#how-to-draw-an-ellipse","position":15},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Perihelion and Aphelion","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#perihelion-and-aphelion","position":16},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Perihelion and Aphelion","lvl2":"3. Ellipses and orbits"},"content":"The point in the orbit that is closest to the sun is called Perihelion.\nThe farthest point is called Aphelion.\n\nDistances (present-day):\n\nPerihelion,   d_p = 1.47 \\times 10^{11} m\n\nAphelion,   d_a = 1.52 \\times 10^{11} m\n\n","type":"content","url":"/courseware/orbital#perihelion-and-aphelion","position":17},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Eccentricity","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#eccentricity","position":18},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Eccentricity","lvl2":"3. Ellipses and orbits"},"content":"The eccentricity of the orbit is defined ase = \\frac{d_a-d_p}{d_a+d_p}\n\nSo for present-day values, e = 0.017 = 1.7\\%\n\nEarth’s orbit is nearly circular, but not quite!\n\n(What value of e would a purely circular orbit have?)\n\nAs the Earth travels around its orbit, the distance to the sun varies. The energy flux (W m^{-2}) is larger when the Earth is closer to the sun (i.e. near perihelion).\n\nAt present, perihelion occurs on January 3. This is very close to the Northern Hemisphere winter solstice (Dec. 21).\n\nThe Earth actually receives MORE total sunlight during Northern Winter than during Northern Summer.\n\nIt is thus critical to understand the relative timing of our seasons (which are determined by the axial tilt or obliquity) and the perehelion.\n\n","type":"content","url":"/courseware/orbital#eccentricity","position":19},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Obliquity","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#obliquity","position":20},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Obliquity","lvl2":"3. Ellipses and orbits"},"content":"The obliquity \\Phi is the tilt of the Earth’s axis of rotation with respect to a line normal to the plane of the Earth’s orbit around the Sun.\n\nCurrently \\Phi = 23.5^\\circ\n\nObliquity is the fundamental reason we have seasons, and would have seasons even with a perfectly circular orbit (e=0)\n\nHigher obliquity means:\n\nmore summertime insolation at the poles\n\nless wintertime insolation in mid-latitudes\n\n","type":"content","url":"/courseware/orbital#obliquity","position":21},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Longitude of perihelion and precession of the equinoxes","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#longitude-of-perihelion-and-precession-of-the-equinoxes","position":22},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Longitude of perihelion and precession of the equinoxes","lvl2":"3. Ellipses and orbits"},"content":"The longitude of perihelion is defined as the angle \\Lambda between the Earth-Sun line at vernal equinox and the line from the Sun to perihelion (see sketch).\n\nThe current value is \\Lambda = 281^\\circ (perihelion on January 3, shortly after NH winter solstice).\n\nWe call the gradual change over time of the longitude of perihelion the precession of the equinoxes (or just precession).  It is the gradual change in the time of year at which the Earth is closest to the Sun.\n\n","type":"content","url":"/courseware/orbital#longitude-of-perihelion-and-precession-of-the-equinoxes","position":23},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl4":"Question","lvl3":"Longitude of perihelion and precession of the equinoxes","lvl2":"3. Ellipses and orbits"},"type":"lvl4","url":"/courseware/orbital#question","position":24},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl4":"Question","lvl3":"Longitude of perihelion and precession of the equinoxes","lvl2":"3. Ellipses and orbits"},"content":"Can there be any precession for a planet with a perfectly circular orbit (zero eccentricity)?\n\nIt is important to understand that eccentricity modulates the precession. Highly eccentric orbits lead to larger differences in the seasonal distribution of insolation.\n\nWe quantify this with the precessional parametere \\sin \\Lambda\n\nLarge positive precessional parameter = Excess insolation during summer in the northern hemisphere.\n\n","type":"content","url":"/courseware/orbital#question","position":25},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"The three orbital parameters","lvl2":"3. Ellipses and orbits"},"type":"lvl3","url":"/courseware/orbital#the-three-orbital-parameters","position":26},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"The three orbital parameters","lvl2":"3. Ellipses and orbits"},"content":"We have just identified three parameters that control the seasonal and latitudinal distribution of insolation: e, \\Lambda, \\Phi\n\nAll three vary in predictable ways over time. They have been calculated very accurately from astronomical considerations (basically the gravity of the Earth, Sun, moon, and other solar system objects).\n\n","type":"content","url":"/courseware/orbital#the-three-orbital-parameters","position":27},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"4. Past orbital variations"},"type":"lvl2","url":"/courseware/orbital#id-4-past-orbital-variations","position":28},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"4. Past orbital variations"},"content":"\n\nThere are tools in climlab to look up orbital parameters for Earth over the last 5 million years.\n\nWe will use the packageclimlab.solar.orbital\n\nfrom climlab.solar.orbital import OrbitalTable\n\nOrbitalTable\n\nMake reference plots of the variation in the three orbital parameter over the last 1 million years\n\nkyears = np.arange( -1000., 1.)\norb = OrbitalTable.interp(kyear=kyears)\norb\n\nThe object calledorb\n\nis an xarray.Dataset which now holds 1 million years worth of orbital data, total of 1001 data points for each element:\n\neccentricity ecc\n\nobliquity angle obliquity\n\nsolar longitude of perihelion long_peri\n\nfig = plt.figure( figsize = (8,8) )\nax1 = fig.add_subplot(3,1,1)\nax1.plot( kyears, orb['ecc'] )\nax1.set_title(r'Eccentricity $e$', fontsize=18 )\nax1.xaxis.set_ticklabels([])\nax2 = fig.add_subplot(3,1,3)\nax2.plot( kyears, orb['ecc'] * np.sin( np.deg2rad( orb['long_peri'] ) ) )\nax2.set_title(r'Precessional parameter $e \\sin(\\Lambda)$', fontsize=18 )\nax2.set_xlabel( 'Thousands of years before present', fontsize=14 )\nax3 = fig.add_subplot(3,1,2)\nax3.plot( kyears, orb['obliquity'] )\nax3.set_title(r'Obliquity (axial tilt) $\\Phi$', fontsize=18 )\nax3.xaxis.set_ticklabels([])\n\nfor ax in [ax1,ax2,ax3]:\n    ax.grid()\n\n","type":"content","url":"/courseware/orbital#id-4-past-orbital-variations","position":29},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Timescales of orbital variation:","lvl2":"4. Past orbital variations"},"type":"lvl3","url":"/courseware/orbital#timescales-of-orbital-variation","position":30},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Timescales of orbital variation:","lvl2":"4. Past orbital variations"},"content":"Eccentricity varies slowly between nearly circular and slightly eccentric, with dominant periodicities of about 100 and 400 kyear. Current eccentricity is relatively small compared to previous few million years\n\nLongitude of perihelion has a period around 20 kyears, but effect is modulated by slow eccentricity variations. Precessional cycles are predicted to be small for the coming 50 kyears because of weak eccentricity.\n\nObliquity varies between about 22.5º and 24.5º over a period of 40 kyears. It is currently near the middle of its range.\n\n","type":"content","url":"/courseware/orbital#timescales-of-orbital-variation","position":31},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"5. Using climlab to calculate insolation for arbitrary orbital parameters"},"type":"lvl2","url":"/courseware/orbital#id-5-using-climlab-to-calculate-insolation-for-arbitrary-orbital-parameters","position":32},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"5. Using climlab to calculate insolation for arbitrary orbital parameters"},"content":"\n\nWe can use the functionclimlab.solar.insolation.daily_insolation()\n\nto calculate insolation for any arbitrary orbital parameters.\n\nWe just need to pass a dictionary of orbital parameters. This works automatically when we slice or interpolate from the xarray object OrbitalTable.\n\n","type":"content","url":"/courseware/orbital#id-5-using-climlab-to-calculate-insolation-for-arbitrary-orbital-parameters","position":33},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"An example: zero obliquity","lvl2":"5. Using climlab to calculate insolation for arbitrary orbital parameters"},"type":"lvl3","url":"/courseware/orbital#an-example-zero-obliquity","position":34},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"An example: zero obliquity","lvl2":"5. Using climlab to calculate insolation for arbitrary orbital parameters"},"content":"Calculate the insolation at the North Pole for a planet with zero obliquity and zero eccentricity.\n\nfrom climlab.solar.insolation import daily_insolation\n\nthisorb = {'ecc':0., 'obliquity':0., 'long_peri':0.}\n\ndays20 = np.linspace(1.,20.)/20 * const.days_per_year\ndaily_insolation(90, days20, thisorb)\n\nCompare this with the same calculation for default (present-day) orbital parameters:\n\ndaily_insolation(90, days20)\n\nDo you understand what’s going on here?\n\n","type":"content","url":"/courseware/orbital#an-example-zero-obliquity","position":35},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"6. Past changes in insolation: investigating the Milankovitch hypothesis"},"type":"lvl2","url":"/courseware/orbital#id-6-past-changes-in-insolation-investigating-the-milankovitch-hypothesis","position":36},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"6. Past changes in insolation: investigating the Milankovitch hypothesis"},"content":"\n\nThe Last Glacial Maximum or “LGM” occurred around 23,000 years before present, when the ice sheets were at their greatest extent.\n\nBy 10,000 years ago, the ice sheets were mostly gone and the last ice age was over.\n\nIf the Milankovitch hypothesis is correct, we should that summer insolation in the high northern latitudes increased substantially after the LGM.\n\nThe classical way to plot this is the look at insolation at summer solstice at 65ºN.  Let’s plot this for the last 100,000 years.\n\n#  Plot summer solstice insolation at 65ºN\nyears = np.linspace(-100, 0, 101)  #  last 100 kyr\nthisorb = OrbitalTable.interp(kyear=years)\nS65 = daily_insolation( 65, 172, thisorb )\nfig, ax = plt.subplots()\nax.plot(years, S65)\nax.set_xlabel('Thousands of years before present')\nax.set_ylabel('W/m2')\nax.set_title('Summer solstice insolation at 65N')\nax.grid()\n\nIndeed, there was an increase of 60 W m^{-2} over a 10 kyr interval following the LGM.\n\nWhy?\n\nWhat orbital factors favor high insolation at 65ºN at summer solstice?\n\nhigh obliquity\n\nlarge, positive precessional parameter\n\nLooking back at our plots of the orbital parameters, it turns out that both were optimal around 10,000 years ago.\n\nActually 10,000 years ago the climate was slightly warmer than today and the ice sheets had mostly disappeared already.\n\nThe LGM occurred near a minimum in summer insolation in the north – mostly due to obliquity reaching a minimum, since we have been in a period of weak precession due to the nearly circular orbit. So this is consistent with the orbital theory.\n\nThe hypothesis is incomplete, but compelling.\n\n","type":"content","url":"/courseware/orbital#id-6-past-changes-in-insolation-investigating-the-milankovitch-hypothesis","position":37},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Comparing insolation at 10 kyr and 23 kyr","lvl2":"6. Past changes in insolation: investigating the Milankovitch hypothesis"},"type":"lvl3","url":"/courseware/orbital#comparing-insolation-at-10-kyr-and-23-kyr","position":38},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl3":"Comparing insolation at 10 kyr and 23 kyr","lvl2":"6. Past changes in insolation: investigating the Milankovitch hypothesis"},"content":"\n\nlat = np.linspace(-90, 90, 181)\n\norb_0 = OrbitalTable.interp(kyear=0)  # present-day orbital parameters\norb_10 = OrbitalTable.interp(kyear=-10)  # orbital parameters for 10 kyrs before present\norb_23 = OrbitalTable.interp(kyear=-23)   # 23 kyrs before present\nQ_0 = daily_insolation( lat, days, orb_0 )    \nQ_10 = daily_insolation( lat, days, orb_10 )   # insolation arrays for each of the three sets of orbital parameters\nQ_23 = daily_insolation( lat, days, orb_23 )\n\nfig = plt.figure( figsize=(12,6) )\n\n\nax1 = fig.add_subplot(1,2,1)\nQdiff = Q_10 - Q_23\nCS1 = ax1.contour( days, lat, Qdiff, levels = np.arange(-100., 100., 10.) )\nax1.clabel(CS1, CS1.levels, inline=True, fmt='%r', fontsize=10)\nax1.contour( days, lat, Qdiff, levels = [0], colors='k' )\nax1.set_xlabel('Days since January 1', fontsize=16 )\nax1.set_ylabel('Latitude', fontsize=16 )\nax1.set_title('Insolation differences: 10 kyrs - 23 kyrs', fontsize=18 )\n\nax2 = fig.add_subplot(1,2,2)\nax2.plot( np.mean( Qdiff, axis=1 ), lat )\nax2.set_xlabel('W m$^{-2}$', fontsize=16 )\nax2.set_ylabel( 'Latitude', fontsize=16 )\nax2.set_title(' Annual mean differences', fontsize=18 )\nax2.set_ylim((-90,90))\nax2.grid()\n\nThis figure shows that the insolation at summer solstice does not tell the whole story!\n\nFor example, the insolation in late summer / early fall apparently got weaker between 23 and 10 kyr (in the high northern latitudes).\n\nThe annual mean plot is perfectly symmetric about the equator.\n\nThis actually shows a classic obliquity signal: at 10 kyrs, the axis close to its maximum tilt, around 24.2º. At 23 kyrs, the tilt was much weaker, only about 22.7º. In the annual mean, a stronger tilt means more sunlight to the poles and less to the equator. This is very helpful if you are trying to melt an ice sheet.\n\nFinally, take the global average of the difference:\n\nprint( np.average(np.mean(Qdiff,axis=1), weights=np.cos(np.deg2rad(lat))) )\n\nThe difference is tiny (and due to very small changes in the eccentricity).\n\nIce ages are driven by seasonal and latitudinal redistributions of solar energy, NOT by changes in the total global amount of solar energy!\n\n","type":"content","url":"/courseware/orbital#comparing-insolation-at-10-kyr-and-23-kyr","position":39},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"7. Understanding the effects of orbital variations on insolation"},"type":"lvl2","url":"/courseware/orbital#id-7-understanding-the-effects-of-orbital-variations-on-insolation","position":40},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"7. Understanding the effects of orbital variations on insolation"},"content":"\n\nWe are going to create a figure showing past time variations in three quantities:\n\nGlobal, annual mean insolation\n\nAnnual mean insolation at high northern latitudes\n\nSummer solstice insolation at high northern latitudes\n\nwhich we will compare to the orbital variations we plotted earlier.\n\nCreate a large array of insolation over the whole globe, whole year, and for every set of orbital parameters.\n\nQ = daily_insolation(lat, days, orb)\nprint( Q.shape)\n\nQann = np.mean(Q, axis=1)  # time average over the year\nprint( Qann.shape)\nQglobal = np.empty_like( kyears )\nfor n in range( kyears.size ):   # global area-weighted average\n    Qglobal[n] = np.average( Qann[:,n], weights=np.cos(np.deg2rad(lat)))\nprint( Qglobal.shape)\n\nfig = plt.figure(figsize = (16,10))\nax = []\nfor n in range(6):\n    ax.append(fig.add_subplot(3,2,n+1))\n\nax[0].plot( kyears, orb['ecc'] )\nax[0].set_title(r'Eccentricity $e$', fontsize=18 )\nax[2].plot( kyears, orb['obliquity'] )\nax[2].set_title(r'Obliquity (axial tilt) $\\Phi$', fontsize=18 )\nax[4].plot( kyears, orb['ecc'] * np.sin( np.deg2rad( orb['long_peri'] ) ) )\nax[4].set_title(r'Precessional parameter $e \\sin(\\Lambda)$', fontsize=18 )\n\nax[1].plot( kyears, Qglobal )\nax[1].set_title('Global, annual mean insolation', fontsize=18 )\nax[1].ticklabel_format( useOffset=False )\n\n# These indices depend on the number of gridpoints we're using in latitude and days\nlat70index = 160  \nsummersolsticeindex = 170\n\nax[3].plot( kyears, Qann[lat70index,:] )\nax[3].set_title('Annual mean insolation at 70°N', fontsize=18 )\n\nax[5].plot( kyears, Q[lat70index,summersolsticeindex,:] )\nax[5].set_title('Summer solstice insolation at 70°N', fontsize=18 )\n\nfor n in range(4):\n    ax[n].xaxis.set_ticklabels([])\nfor n in range(6):\n    ax[n].grid()\nfor n in [4,5]:\n    ax[n].set_xlabel( 'Thousands of years before present', fontsize=14 )\n\nWe see that\n\nGlobal annual mean insolation varies only with eccentricity (slow), and the variations are very small!\n\nAnnual mean insolation varies with obliquity (medium). Annual mean insolation does NOT depend on precession!\n\nSummer solstice insolation at high northern latitudes is affected by both precession and obliquity. The variations are large.\n\n","type":"content","url":"/courseware/orbital#id-7-understanding-the-effects-of-orbital-variations-on-insolation","position":41},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"8. Summary"},"type":"lvl2","url":"/courseware/orbital#id-8-summary","position":42},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"8. Summary"},"content":"\n\nThe annual, global mean insolation varies only as a result of eccentricity e. The changes are very small (about 0.1 % through a typical eccentricity cycle from more circular to more elliptical)\n\nObliquity controls the annual-mean equator-to-pole insolation gradient.\n\nThe precessional parameter e \\sin⁡\\Lambda controls the modulation in seasonal insolation due to eccentricity and longitude of perihelion \\Lambda.\n\nThe combined effects can result in 15% changes in high-latitude summer insolation\n\nObliquity combined with eccentricity and longitude of perihelion control the amplitude of seasonal insolation variations at a point.\n\nCombined effects of the three orbital parameters can cause variations in seasonal insolation as large as 30% in high latitudes.\n\nThese geometrical considerations tell us that seasonal variations in Q can be rather large, and will surely impact the climate. But to go from there to understanding how large ice sheets come and go is a difficult step, and requires climate models!\n\nOne thing is clear: any serious astronomical theory of climate needs to take account of the climate response to seasonal variations in Q, because these are much larger than the variations in annual mean insolation.\n\n","type":"content","url":"/courseware/orbital#id-8-summary","position":43},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"Credits"},"type":"lvl2","url":"/courseware/orbital#credits","position":44},{"hierarchy":{"lvl1":"Orbital variations, insolation, and the ice ages","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/orbital#credits","position":45},{"hierarchy":{"lvl1":"Radiative Equilibrium"},"type":"lvl1","url":"/courseware/radeq","position":0},{"hierarchy":{"lvl1":"Radiative Equilibrium"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/radeq","position":1},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"1. The observed annual, global mean temperature profile"},"type":"lvl2","url":"/courseware/radeq#id-1-the-observed-annual-global-mean-temperature-profile","position":2},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"1. The observed annual, global mean temperature profile"},"content":"\n\nLet’s look again the observations of air temperature from the NCEP Reanalysis data we first encountered in the \n\nRadiation notes.\n\nIn this notebook  we’ll define a function to create the Skew-T diagram, because later we are going to reuse it several times.\n\nClick to expand code cells to see Python details\n\n#  This code is used just to create the skew-T plot of global, annual mean air temperature\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom metpy.plots import SkewT\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\ntime_coder = xr.coders.CFDatetimeCoder(use_cftime=True)\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", \n                           decode_times=time_coder)\n#  Take global, annual average \ncoslat = np.cos(np.deg2rad(ncep_air.lat))\nweight = coslat / coslat.mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\n\ndef make_skewT():\n    fig = plt.figure(figsize=(9, 9))\n    skew = SkewT(fig, rotation=30)\n    skew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')\n    skew.ax.set_ylim(1050, 10)\n    skew.ax.set_xlim(-90, 45)\n    # Add the relevant special lines\n    skew.plot_dry_adiabats(linewidth=0.5)\n    skew.plot_moist_adiabats(linewidth=0.5)\n    #skew.plot_mixing_lines()\n    skew.ax.legend()\n    skew.ax.set_xlabel('Temperature (degC)', fontsize=14)\n    skew.ax.set_ylabel('Pressure (hPa)', fontsize=14)\n    return skew\n\nskew = make_skewT()\n\nHere we are going to work with some detailed Single-Column Models to understand questions such as\n\nWhat physical factors actually determine this profile?\n\nWould the profile be different with different gases in the atmosphere?\n\nWhat are the relative roles of radiation and dynamics (i.e. motion!) in setting this profile?\n\nWe will start by ignoring all processes except radiation. We will calculate something called the radiative equilibrium temperature.\n\n","type":"content","url":"/courseware/radeq#id-1-the-observed-annual-global-mean-temperature-profile","position":3},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"2. Radiative equilibrium -- the concept"},"type":"lvl2","url":"/courseware/radeq#id-2-radiative-equilibrium-the-concept","position":4},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"2. Radiative equilibrium -- the concept"},"content":"\n\nModels of radiative transfer slice up the atmospheric air column into a series of layer, and calculate the emission and absorption of radiation within each layer.\n\nIt’s really just a generalization of the model we already looked at:\n\n\n\nThe concept of radiative equilibrium means that we ignore all methods of heat exchange except for radiation, and ask what temperature profile would exist under that assumption?\n\nWe can answer that question by using a radiative transfer model to explicity compute the shortwave and longwave beams, and the warming/cooling of each layer associated with the radiative sources and sinks of energy.\n\nBasically, we reach radiative equilibrium when energy is received and lost through radiation at the same rate in every layer.\n\nBecause of the complicated dependence of emission/absorption features on the wavelength of radiation and the different gases, the beam is divided up into many different pieces representing different parts of the electromagnetic spectrum.\n\nWe will not look explicitly at this complexity here, but we will use a model that represents these processes at the same level of detail we would in a GCM.\n\n","type":"content","url":"/courseware/radeq#id-2-radiative-equilibrium-the-concept","position":5},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl2","url":"/courseware/radeq#id-3-setting-up-a-single-column-radiation-model-in-climlab","position":6},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"\n\n","type":"content","url":"/courseware/radeq#id-3-setting-up-a-single-column-radiation-model-in-climlab","position":7},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Radiation models in climlab","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#radiation-models-in-climlab","position":8},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Radiation models in climlab","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"We’re now going to use climlab to run a complex radiation model, one that accounts for the spectral absorption properties of different gases.\n\nclimlab actually provides two different “GCM-level” \n\nradiation codes:\n\nThe \n\nCAM3 radiation module from NCAR (essentially the same radiation code used in our CESM simulations)\n\nThe \n\nRRTMG (Rapid Radiative Transfer Model) which is used in many current GCMs.\n\nThe links above take you to the online \n\nclimlab documentation.\n\nWe’re going to use a model called the \n\nRapid Radiative Transfer Model or RRTMG. This is a “serious” and widely-used radiation model, used in many comprehensive GCMs and Numerical Weather Prediction models.\n\nclimlab provides an easy-to-use Python wrapper for the RRTMG code.\n\n","type":"content","url":"/courseware/radeq#radiation-models-in-climlab","position":9},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Water vapor data","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#water-vapor-data","position":10},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Water vapor data","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"\n\nBefore setting up the model, we need some water vapor data. Why? Because our model needs to know how much water vapor exists at each vertical level, since water vapor is a radiatively important gas.\n\nWe’re actually going to use the specific humidity field from our CESM control simulation. We’ll just take the global, time average of this data, and plot its vertical profile.\n\n#  Load the model output as we have done before\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\n#  The specific humidity is stored in the variable called Q in this dataset:\natm_control.Q\n\nNow take the global, annual average of the specific humidity:\n\n# Take global, annual average of the specific humidity\nweight_factor = atm_control.gw / atm_control.gw.mean(dim='lat')\nQglobal = (atm_control.Q * weight_factor).mean(dim=('lat','lon','time'))\n# Take a look at what we just calculated ... it should be one-dimensional (vertical levels)\nQglobal\n\nAnd make a figure:\n\nfig, ax = plt.subplots()\n#  Multiply Qglobal by 1000 to put in units of grams water vapor per kg of air\nax.plot(Qglobal*1000., Qglobal.lev)\nax.invert_yaxis()\nax.set_ylabel('Pressure (hPa)')\nax.set_xlabel('Specific humidity (g/kg)')\nax.grid()\n\nThis shows a typical climatological humidity profile. Water vapor is a trace gas! But as we will see, it plays a very important role.\n\nBased on this figure, where is most of the water vapor?\n\n","type":"content","url":"/courseware/radeq#water-vapor-data","position":11},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Create a single-column model on the same grid as this water vapor data:","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#create-a-single-column-model-on-the-same-grid-as-this-water-vapor-data","position":12},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Create a single-column model on the same grid as this water vapor data:","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"\n\nHere we will create the grid and state variables (air and surface temperature) for our single-column model.\n\nimport climlab\n#  Make a model on same vertical domain as the GCM\nmystate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\nmystate\n\nradmodel = climlab.radiation.RRTMG(name='Radiation (all gases)',  # give our model a name!\n                              state=mystate,   # give our model an initial condition!\n                              specific_humidity=Qglobal.values,  # tell the model how much water vapor there is\n                              albedo = 0.25,  # this the SURFACE shortwave albedo\n                              timestep = climlab.constants.seconds_per_day,  # set the timestep to one day (measured in seconds)\n                             )\nradmodel\n\n","type":"content","url":"/courseware/radeq#create-a-single-column-model-on-the-same-grid-as-this-water-vapor-data","position":13},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Explore the single-column model object","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#explore-the-single-column-model-object","position":14},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Explore the single-column model object","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"\n\nLook at a few interesting properties of the model we just created:\n\n#  Here's the state dictionary we already created:\nradmodel.state\n\n#  Here are the pressure levels in hPa\nradmodel.lev\n\nThere is a dictionary called absorber_vmr that holds the volume mixing ratio of all the radiatively active gases in the column:\n\nradmodel.absorber_vmr\n\nMost are just a single number because they are assumed to be well mixed in the atmosphere.\n\nThe exception is ozone, which has a vertical structure taken from observations. Let’s plot it\n\n#  E.g. the CO2 content (a well-mixed gas) in parts per million\nradmodel.absorber_vmr['CO2'] * 1E6\n\n","type":"content","url":"/courseware/radeq#explore-the-single-column-model-object","position":15},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Python exercise: plot the ozone profile","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#python-exercise-plot-the-ozone-profile","position":16},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Python exercise: plot the ozone profile","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"Make a simple plot showing the vertical structure of ozone, similar to the specific humidity plot we just made above.\n\n# here is the data you need for the plot, as a plain numpy arrays:\nprint(radmodel.lev)\nprint(radmodel.absorber_vmr['O3'])\n\n\n\nThe other radiatively important gas is of course water vapor, which is stored separately in the specific_humidity attribute:\n\n#  specific humidity in kg/kg, on the same pressure axis\nradmodel.specific_humidity\n\n","type":"content","url":"/courseware/radeq#python-exercise-plot-the-ozone-profile","position":17},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"The RRTMG radiation model has lots of different input parameters","lvl2":"3. Setting up a single-column radiation model in climlab"},"type":"lvl3","url":"/courseware/radeq#the-rrtmg-radiation-model-has-lots-of-different-input-parameters","position":18},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"The RRTMG radiation model has lots of different input parameters","lvl2":"3. Setting up a single-column radiation model in climlab"},"content":"For details you can look at the \n\ndocumentation\n\nfor item in radmodel.input:\n    print(item)\n\nMany of the parameters control the radiative effects of clouds.\n\nBut here we should note that the model is initialized with no clouds at all:\n\n#  This is the fractional area covered by clouds in our column:\nradmodel.cldfrac\n\n","type":"content","url":"/courseware/radeq#the-rrtmg-radiation-model-has-lots-of-different-input-parameters","position":19},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"4. Radiative equilibrium in the single-column model"},"type":"lvl2","url":"/courseware/radeq#id-4-radiative-equilibrium-in-the-single-column-model","position":20},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"4. Radiative equilibrium in the single-column model"},"content":"\n\n","type":"content","url":"/courseware/radeq#id-4-radiative-equilibrium-in-the-single-column-model","position":21},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Step the model forward in time!","lvl2":"4. Radiative equilibrium in the single-column model"},"type":"lvl3","url":"/courseware/radeq#step-the-model-forward-in-time","position":22},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Step the model forward in time!","lvl2":"4. Radiative equilibrium in the single-column model"},"content":"\n\nHere are the current temperatures (initial condition):\n\nradmodel.Ts\n\nradmodel.Tatm\n\nNow let’s take a single timestep:\n\nradmodel.step_forward()\n\nradmodel.Ts\n\nThe surface got warmer!\n\nLet’s take a look at all the diagnostic information that was generated during that timestep:\n\n","type":"content","url":"/courseware/radeq#step-the-model-forward-in-time","position":23},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Diagnostic variables in our single-column model","lvl2":"4. Radiative equilibrium in the single-column model"},"type":"lvl3","url":"/courseware/radeq#diagnostic-variables-in-our-single-column-model","position":24},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Diagnostic variables in our single-column model","lvl2":"4. Radiative equilibrium in the single-column model"},"content":"Every climlab model has a diagnostics dictionary. Here we are going to check it out as an xarray dataset:\n\nclimlab.to_xarray(radmodel.diagnostics)\n\nThe main “job” of a radiative transfer model it to calculate the shortwave and longwave fluxes up and down between each model layer.\n\nFor example:\n\nclimlab.to_xarray(radmodel.LW_flux_up)\n\nThese are upward longwave fluxes in W/m2.\n\nWhy are there 27 data points, when the model has 26 pressure levels?\n\nradmodel.lev\n\nradmodel.lev_bounds\n\nThe last element of the flux array represents the upward flux from the surface to the first level:\n\nradmodel.LW_flux_up[-1]\n\nThe value is about 390 W m^{-2}.\n\nWhy?\n\nsigma = 5.67E-8\nsigma * 288**4\n\nThe surface temperature was initialized at 288 K, and the surface is treated as very close to a blackbody in the model.\n\nWhat about the flux from the top layer out to space?\n\nTwo ways to access this information:\n\nradmodel.LW_flux_up[0]\n\nradmodel.OLR\n\nOf course there is a whole other set of fluxes for the shortwave radiation.\n\nOne diagnostic we will often want to look at is the net energy budget at the top of the atmosphere:\n\nradmodel.ASR - radmodel.OLR\n\nIs the model gaining or losing energy?\n\n","type":"content","url":"/courseware/radeq#diagnostic-variables-in-our-single-column-model","position":25},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Integrate out to equilibrium","lvl2":"4. Radiative equilibrium in the single-column model"},"type":"lvl3","url":"/courseware/radeq#integrate-out-to-equilibrium","position":26},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Integrate out to equilibrium","lvl2":"4. Radiative equilibrium in the single-column model"},"content":"Here I want to step forward in time until the model is very close to energy balance.\n\nWe can use a while loop, conditional on the top-of-atmosphere imbalance:\n\nwhile np.abs(radmodel.ASR - radmodel.OLR) > 0.01:\n    radmodel.step_forward()\n\nCheck the energy budget again:\n\n#  Check the energy budget again\nradmodel.ASR - radmodel.OLR\n\nIndeed, the imbalance is now small.\n\n","type":"content","url":"/courseware/radeq#integrate-out-to-equilibrium","position":27},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Compare the radiative equilibrium temperature to observations","lvl2":"4. Radiative equilibrium in the single-column model"},"type":"lvl3","url":"/courseware/radeq#compare-the-radiative-equilibrium-temperature-to-observations","position":28},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Compare the radiative equilibrium temperature to observations","lvl2":"4. Radiative equilibrium in the single-column model"},"content":"\n\nHere’s a helper function we’ll use to add model temperature profiles to our skew-T plot:\n\ndef add_profile(skew, model, linestyle='-', color=None):\n    line = skew.plot(model.lev, model.Tatm - climlab.constants.tempCtoK,\n             label=model.name, linewidth=2)[0]\n    skew.plot(1000, model.Ts - climlab.constants.tempCtoK, 'o', \n              markersize=8, color=line.get_color())\n    skew.ax.legend()\n\nskew = make_skewT()\nadd_profile(skew, radmodel)\nskew.ax.set_title('Pure radiative equilibrium', fontsize=18);\n\nWhat do you think about this model -- data comparison?\n\n","type":"content","url":"/courseware/radeq#compare-the-radiative-equilibrium-temperature-to-observations","position":29},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"type":"lvl2","url":"/courseware/radeq#id-5-effects-of-different-gases-on-the-radiative-equilibrium-profile","position":30},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"content":"\n\nModels are for experimenting and playing with!\n\nWe have just built a single-column radiation model with several different absorbing gases. We can learn about their effects by taking them away.\n\n","type":"content","url":"/courseware/radeq#id-5-effects-of-different-gases-on-the-radiative-equilibrium-profile","position":31},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Radiative equilibrium without water vapor","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"type":"lvl3","url":"/courseware/radeq#radiative-equilibrium-without-water-vapor","position":32},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Radiative equilibrium without water vapor","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"content":"\n\n# Make an exact clone of our existing model\nradmodel_noH2O = climlab.process_like(radmodel)\nradmodel_noH2O.name = 'Radiation (no H2O)'\nradmodel_noH2O\n\n#  Here is the water vapor profile we started with\nradmodel_noH2O.specific_humidity\n\nNow get rid of the water entirely!\n\nradmodel_noH2O.specific_humidity *= 0.\n\nradmodel_noH2O.specific_humidity\n\nAnd run this new model forward to equilibrium:\n\n#  it's useful to take a single step first before starting the while loop\n#   because the diagnostics won't get updated \n#  (and thus show the effects of removing water vapor)\n#  until we take a step forward\nradmodel_noH2O.step_forward()\nwhile np.abs(radmodel_noH2O.ASR - radmodel_noH2O.OLR) > 0.01:\n    radmodel_noH2O.step_forward()\n\nradmodel_noH2O.ASR - radmodel_noH2O.OLR\n\nskew = make_skewT()\nfor model in [radmodel, radmodel_noH2O]:\n    add_profile(skew, model)\n\nWhat do you think you can learn from this about the radiative role of water vapor?\n\n","type":"content","url":"/courseware/radeq#radiative-equilibrium-without-water-vapor","position":33},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Exercise: radiative equilibrium without ozone","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"type":"lvl3","url":"/courseware/radeq#exercise-radiative-equilibrium-without-ozone","position":34},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl3":"Exercise: radiative equilibrium without ozone","lvl2":"5. Effects of different gases on the radiative equilibrium profile"},"content":"Following the steps above, make another model, but this time instead of removing the water vapor, remove the ozone!\n\nMake another skew-T plot comparing all three model results.\n\nIf you have time, try a third case in which you remove both the water vapor and the ozone!\n\n\n\n","type":"content","url":"/courseware/radeq#exercise-radiative-equilibrium-without-ozone","position":35},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"6. Summary of radiative equilibrium results"},"type":"lvl2","url":"/courseware/radeq#id-6-summary-of-radiative-equilibrium-results","position":36},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"6. Summary of radiative equilibrium results"},"content":"\n\nWe used the RRTMG radiation model with prescribed profiles of absorbing gases to calculate pure radiative equilibrium temperature profiles.\n\nRadiative Equilibrium means the temperatures that the surface and air column would have if radiation was the only physical process that could transfer energy between levels.\n\nWe computed several different radiative equilibrium profiles, with and without key absorbing gases\n\nThe profile without water vapor is much colder at surface and lower troposphere, but about the same in the stratosphere\n\nThe profile without ozone is much colder in the stratosphere, but about the same near the surface.\n\nIn fact there really isn’t a stratosphere at all without ozone! The temperature is nearly isothermal in the upper atmosphere in that profile.\n\nHowever the really key takeaway message is that none of these radiative equilibrium profiles look much like the observations in the troposphere.\n\nThis strongly suggests that other physical processes (aside from radiation) are important in determining the observed temperature profile.\n\nPlotting on the skew-T diagram makes it clear that all the radiative equilibrium profiles are statically unstable near the surface.\n\nThe next step is therefore to look at the effects of convective mixing on the temperatures of the surface and lower troposphere.\n\n","type":"content","url":"/courseware/radeq#id-6-summary-of-radiative-equilibrium-results","position":37},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"Credits"},"type":"lvl2","url":"/courseware/radeq#credits","position":38},{"hierarchy":{"lvl1":"Radiative Equilibrium","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/radeq#credits","position":39},{"hierarchy":{"lvl1":"A Brief Review of Radiation"},"type":"lvl1","url":"/courseware/radiation","position":0},{"hierarchy":{"lvl1":"A Brief Review of Radiation"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/radiation","position":1},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"1. Emission temperature and lapse rates"},"type":"lvl2","url":"/courseware/radiation#id-1-emission-temperature-and-lapse-rates","position":2},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"1. Emission temperature and lapse rates"},"content":"\n\nPlanetary energy balance is the foundation for all climate modeling. So far we have expressed this through a globally averaged budgetC \\frac{d T_s}{dt} = (1-\\alpha) Q - OLR\n\nand we have written the OLR in terms of an emission temperature T_e where by definitionOLR = \\sigma T_e^4\n\nUsing values from the observed planetary energy budget, we found that T_e = 255 K\n\nThe emission temperature of the planet is thus about 33 K colder than the mean surface temperature (288 K).\n\n","type":"content","url":"/courseware/radiation#id-1-emission-temperature-and-lapse-rates","position":3},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Where in the atmosphere do we find T = T_e = 255 K?","lvl2":"1. Emission temperature and lapse rates"},"type":"lvl3","url":"/courseware/radiation#where-in-the-atmosphere-do-we-find-t-t-e-255-k","position":4},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Where in the atmosphere do we find T = T_e = 255 K?","lvl2":"1. Emission temperature and lapse rates"},"content":"That’s about -18ºC.\n\nLet’s plot global, annual average observed air temperature from NCEP reanalysis data.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\n\n## The NOAA ESRL server is shutdown! January 2019\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\ntime_coder = xr.coders.CFDatetimeCoder(use_cftime=True)\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\",\n                          decode_times=time_coder)\n#url = 'http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/pressure/air'\n#air = xr.open_dataset(url)\n## The name of the vertical axis is different than the NOAA ESRL version..\n#ncep_air = air.rename({'lev': 'level'})\nncep_air\n\n#  Take global, annual average and convert to Kelvin\ncoslat = np.cos(np.deg2rad(ncep_air.lat))\nweight = coslat / coslat.mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\nTglobal\n\n#  a \"quick and dirty\" visualization of the data\nTglobal.plot()\n\nLet’s make a better plot.\n\nHere we’re going to use a package called metpy to automate plotting this temperature profile in a way that’s more familiar to meteorologists: a so-called skew-T plot.\n\nfrom metpy.plots import SkewT\n\nfig = plt.figure(figsize=(9, 9))\nskew = SkewT(fig, rotation=30)\nskew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')\nskew.ax.set_ylim(1050, 10)\nskew.ax.set_xlim(-75, 45)\n# Add the relevant special lines\nskew.plot_dry_adiabats(linewidth=0.5)\nskew.plot_moist_adiabats(linewidth=0.5)\n#skew.plot_mixing_lines()\nskew.ax.legend()\nskew.ax.set_title('Global, annual mean sounding from NCEP Reanalysis', \n             fontsize = 16)\n\nNote that surface temperature in global mean is indeed about 288 K or 15ºC as we keep saying.\n\nSo where do we find temperature T_e=255 K or -18ºC?\n\nActually in mid-troposphere, near 500 hPa or about 5 km height.\n\nWe can infer that much of the outgoing longwave radiation actually originates far above the surface.\n\nRecall that our observed global energy budget diagram shows 217 out of 239 W m^{-2} total OLR emitted by the atmosphere and clouds, only 22 W m^{-2} directly from the surface.\n\nThis is due to the greenhouse effect.\n\nSo far we have dealt with the greenhouse in a very artificial way in our energy balance model by simply assuming\\text{OLR} = \\tau \\sigma T_s^4\n\ni.e., the OLR is reduced by a constant factor from the value it would have if the Earth emitted as a blackbody at the surface temperature.\n\nNow it’s time to start thinking a bit more about how the radiative transfer process actually occurs in the atmosphere, and how to model it.\n\n","type":"content","url":"/courseware/radiation#where-in-the-atmosphere-do-we-find-t-t-e-255-k","position":5},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"2. Solar Radiation"},"type":"lvl2","url":"/courseware/radiation#id-2-solar-radiation","position":6},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"2. Solar Radiation"},"content":"\n\nLet’s plot a spectrum of solar radiation.\n\nFor Python details, click to expand the code blocks (or see the code in the notebook).\n\n#  Using pre-defined code for the Planck function from the climlab package\nfrom climlab.utils.thermo import Planck_wavelength\n\n# approximate emission temperature of the sun in Kelvin\nTsun = 5780.\n# boundaries of visible region in nanometers\nUVbound = 390.\nIRbound = 700.\n#  array of wavelengths\nwavelength_nm = np.linspace(10., 3500., 400)\nto_meters = 1E-9  # conversion factor\n\nlabel_size = 16\nfig, ax = plt.subplots(figsize=(14,7))\nax.plot(wavelength_nm, \n         Planck_wavelength(wavelength_nm * to_meters, Tsun))\nax.grid()\nax.set_xlabel('Wavelength (nm)', fontsize=label_size)\nax.set_ylabel('Spectral radiance (W sr$^{-1}$ m$^{-3}$)', fontsize=label_size)\n#  Mask out points outside of this range\nwavelength_vis = np.ma.masked_outside(wavelength_nm, UVbound, IRbound)\n#  Shade the visible region\nax.fill_between(wavelength_vis, Planck_wavelength(wavelength_vis * to_meters, Tsun))\ntitle = 'Blackbody emission curve for the sun (T = {:.0f} K)'.format(Tsun)\nax.set_title(title, fontsize=label_size);\nax.text(280, 0.8E13, 'Ultraviolet', rotation='vertical', fontsize=12)\nax.text(500, 0.8E13, 'Visible', rotation='vertical', fontsize=16, color='w')\nax.text(800, 0.8E13, 'Infrared', rotation='vertical', fontsize=12);\n\nSpectrum peaks in the visible range\n\nmost energy at these wavelength.\n\nNo coincidence that our eyes are sensitive to this range of wavelengths!\n\nLonger wavelengths called “infrared”, shorter wavelengths called “ultraviolet”.\n\nThe shape of the spectrum is a fundamental characteristic of radiative emissions\n(think about the color of burning coals in a fire – cooler = red, hotter = white)\n\nTheory and experiments tell us that both the total flux of emitted radiation, and the wavelength of maximum emission, depend only on the temperature of the source!\n\nThe theoretical spectrum was worked out by Max Planck and is therefore known as the “Planck” spectrum (or simply blackbody spectrum).\n\nfig, ax = plt.subplots(figsize=(14,7))\nwavelength_um = wavelength_nm / 1000\nfor T in [24000,12000,6000,3000]:\n    ax.plot(wavelength_um, \n         (Planck_wavelength(wavelength_nm * to_meters, T) / T**4),\n           label=str(T) + ' K')\nax.legend(fontsize=label_size)\nax.set_xlabel(r'Wavelength (μm)', fontsize=label_size)\nax.set_ylabel(r'Normalized spectral radiance (W sr$^{-1}$ m$^{-3}$ K$^{-4}$)', fontsize=label_size)\nax.set_title(r\"Normalized blackbody emission spectra $T^{-4} B_{\\lambda}$ for different temperatures\");\n\nGoing from cool to warm:\n\ntotal emission increases\n\nmaximum emission occurs at shorter wavelengths.\n\nThe integral of these curves over all wavelengths gives us our familiar \\sigma T^4\n\nMathematically it turns out thatλ_{max} T = \\text{constant}\n\n(known as Wien’s displacement law).\n\nBy fitting the observed solar emission to a blackbody curve, we can deduce that the emission temperature of the sun is about 6000 K.\n\nKnowing this, and knowing that the solar spectrum peaks at 0.6 micrometers, we can calculate the wavelength of maximum terrestrial radiation asλ_{max}^{Earth} = 0.6 ~ \\mu m \\frac{6000}{255} = 14 ~ \\mu m\n\nThis is in the far-infrared part of the spectrum.\n\n","type":"content","url":"/courseware/radiation#id-2-solar-radiation","position":7},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"3. Terrestrial Radiation and absorption spectra"},"type":"lvl2","url":"/courseware/radiation#id-3-terrestrial-radiation-and-absorption-spectra","position":8},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"3. Terrestrial Radiation and absorption spectra"},"content":"\n\n","type":"content","url":"/courseware/radiation#id-3-terrestrial-radiation-and-absorption-spectra","position":9},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Terrestrial versus solar wavelengths","lvl2":"3. Terrestrial Radiation and absorption spectra"},"type":"lvl3","url":"/courseware/radiation#terrestrial-versus-solar-wavelengths","position":10},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Terrestrial versus solar wavelengths","lvl2":"3. Terrestrial Radiation and absorption spectra"},"content":"Now let’s look at normalized blackbody curves for Sun and Earth:\n\nfig, ax = plt.subplots(figsize=(14,7))\nwavelength_um = np.linspace(0.1, 200, 10000)\nwavelength_meters = wavelength_um / 1E6\n\nfor T in [6000, 255]:\n    ax.semilogx(wavelength_um, \n         (Planck_wavelength(wavelength_meters, T) / T**4 * wavelength_meters),\n           label=str(T) + ' K')\nax.legend(fontsize=label_size)\nax.set_xlabel(r'Wavelength (μm)', fontsize=label_size)\nax.set_ylabel(r'Normalized spectral radiance (W sr$^{-1}$ m$^{-2}$ K$^{-4}$)', fontsize=label_size)\nax.set_title(r\"Normalized blackbody emission spectra $T^{-4} \\lambda B_{\\lambda}$ for the sun ($T_e = 6000$ K) and Earth ($T_e = 255$ K)\",\n            fontsize=label_size);\n\nThere is essentially no overlap between the two spectra.\n\nThis is the fundamental reason we can discuss the solar “shortwave” and terrestrial “longwave” radiation as two distinct phenomena.\n\nIn reality all radiation exists on a continuum of different wavelengths. But in climate science we can get a long way by thinking in terms of a very simple “two-stream” approximation (short and longwave). We’ve already been doing this throughout the course so far!\n\n","type":"content","url":"/courseware/radiation#terrestrial-versus-solar-wavelengths","position":11},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Atmospheric absorption spectra","lvl2":"3. Terrestrial Radiation and absorption spectra"},"type":"lvl3","url":"/courseware/radiation#atmospheric-absorption-spectra","position":12},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl3":"Atmospheric absorption spectra","lvl2":"3. Terrestrial Radiation and absorption spectra"},"content":"Now look at the atmospheric absorption spectra.\n\n(fraction of radiation at each wavelength that is absorbed on a single vertical path through the atmosphere)\n\n\n\nFigure reproduced from Marshall and Plumb (2007): Atmosphere, Ocean, and Climate Dynamics \n\nMarshall & Plumb, 2007\n\nAtmosphere is almost completely transparent in the visible range, right at the peak of the solar spectrum\n\nAtmosphere is very opaque in the UV\n\nOpacity across the IR spectrum is highly variable!\n\nLook at the gases associated with various absorption features:\n\nMain players include H_2O, CO_2, N_2O, O_2.\n\nCompare to major constituents of atmosphere, in decreasing order:\n\n78% N_2\n\n21% O_2\n\n1% Ar\n\nH_2O (variable)\n\nThe dominant constituent gases N_2 and O_2 are nearly completely transparent across the entire spectrum (there are O_2 absorption features in far UV, but little energy at these wavelengths).\n\nThe greenhouse effect mostly involves trace constituents:\n\nO_3 = 500 ppb\n\nN_2O = 310 ppb\n\nCO_2 = 400 ppm (but rapidly increasing!)\n\nCH_4 = 1.7 ppm\n\nNote that most of these are tri-atomic molecules! There are fundamental reasons for this: these molecules have modes of rotational and vibration that are easily excited at IR wavelengths. See courses in radiative transfer!\n\n","type":"content","url":"/courseware/radiation#atmospheric-absorption-spectra","position":13},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"Credits"},"type":"lvl2","url":"/courseware/radiation#credits","position":14},{"hierarchy":{"lvl1":"A Brief Review of Radiation","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/radiation#credits","position":15},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer"},"type":"lvl1","url":"/courseware/radiative-transfer","position":0},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/radiative-transfer","position":1},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"1. The two-stream Schwarschild equations"},"type":"lvl2","url":"/courseware/radiative-transfer#id-1-the-two-stream-schwarschild-equations","position":2},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"1. The two-stream Schwarschild equations"},"content":"\n\nHere we are going to introduce the governing equations of radiative transfer to put what we’ve been doing on a more solid theoretical footing.\n\nOur derivations here will also serve as a coherent documentation for how some of the radiation solvers are implemented in climlab.\n\n","type":"content","url":"/courseware/radiative-transfer#id-1-the-two-stream-schwarschild-equations","position":3},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Optical thickness","lvl2":"1. The two-stream Schwarschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#optical-thickness","position":4},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Optical thickness","lvl2":"1. The two-stream Schwarschild equations"},"content":"The optical thickness of a layer of absorbers is \\Delta \\tau_\\nu. It is the emissivity and absorptivity of a layer of atmosphere.\n\nPassing to the limit of very thin layers, we define \\tau_\\nu through\\frac{d \\tau_\\nu}{dp} = -\\frac{1}{g} \\kappa_\\nu\n\nwhere \\kappa_\\nu is an absorption cross-section per unit mass at frequency \\nu. It has units m^2 kg^{-1}. \\kappa is a measure of the area taken out of the incident beam by absorbers in a unit mass of atmosphere.\n\nIn general \\tau_\\nu depends on the frequency of the radiation, as indicated here by the subscript \\nu.\n\n","type":"content","url":"/courseware/radiative-transfer#optical-thickness","position":5},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Using optical depth as vertical coordinate","lvl2":"1. The two-stream Schwarschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#using-optical-depth-as-vertical-coordinate","position":6},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Using optical depth as vertical coordinate","lvl2":"1. The two-stream Schwarschild equations"},"content":"Since pressure decreases with altitude, \\tau_\\nu increases with altitude.\n\nThe equations of radiative transfer can be simplified by using \\tau_\\nu as vertical coordinate instead of pressure.\n\n","type":"content","url":"/courseware/radiative-transfer#using-optical-depth-as-vertical-coordinate","position":7},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Absorption cross-section","lvl2":"1. The two-stream Schwarschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#absorption-cross-section","position":8},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Absorption cross-section","lvl2":"1. The two-stream Schwarschild equations"},"content":"The specific absorption cross section \\kappa depends on the number of molecules of each greenhouse gas encountered by the beam and the absorption properties characteristic to each kind of greenhouse gas molecule. Letting q_k be the mass-specific concentration of greenhouse gas k, we may write in general\\kappa(\\nu, p, T) = \\sum_{k=1}^n \\kappa_k\\big(\\nu, p, T \\big) q_k(p)\n\nFor a well-mixed greenhouse gas, q_k is a constant; for a non-well-mixed gas like water vapor we need to account for the vertical distribution of the gas through q_k(p).\n\nThe dependence of \\kappa_k on temperature and pressure arises from certain aspects of the physics of molecular absorption.\n\n","type":"content","url":"/courseware/radiative-transfer#absorption-cross-section","position":9},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Two-stream Schwarzschild equations","lvl2":"1. The two-stream Schwarschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#two-stream-schwarzschild-equations","position":10},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Two-stream Schwarzschild equations","lvl2":"1. The two-stream Schwarschild equations"},"content":"For climate modeling we almost always seperate the total flux into two beams: upward and downward.\n\nThis involves taking integrals of the full angular dependence of the flux. We’ll skip the details here.\n\nLet U_\\nu be the upward beam, and D_\\nu be the downward beam. The governing equations for these beams are the Schwarzschild equations:\\begin{align}\n\\frac{d U_\\nu}{d \\tau_\\nu} &= -U_\\nu + E\\big( \\nu, T(\\tau_\\nu) \\big) \\\\\n\\frac{d D_\\nu}{d \\tau_\\nu} &= D_\\nu - E\\big( \\nu, T(\\tau_\\nu) \\big) \n\\end{align}\n\nwhere E is the blackbody emission (both up and down), which in general depends on both frequency and temperature. We have written temperature as a function of the vertical coordinate (optical depth).\n\nThe emissions are governed by the Planck function:\\begin{align}\nE &= \\pi~ B\\big( \\nu, T \\big) \\\\\nB\\big( \\nu, T \\big) &= \\frac{2 h \\nu^3}{c^2} \\frac{1}{\\exp \\left( \\frac{h \\nu}{k T} \\right) -1} \n\\end{align}\n\nwith these fundamental physical constants:\n\nh = 6.626 \\times 10^{-34} ~\\text{J s}  is Planck’s constant\n\nc = 3.00 \\times 10^8 ~\\text{m s}^{-1}  is the speed of light\n\nk = 1.38 \\times 10^{-23} ~\\text{J K}^{-1}  is the Boltzmann Thermodynamic Constant\n\nThe two-stream equations basically say the beam is attenuated by absorption (first term) and augmented by emission (second term) in each thin layer of gas.\n\nThese equations are valid for beam that are not affected by scattering. We may come back to that later.\n\n","type":"content","url":"/courseware/radiative-transfer#two-stream-schwarzschild-equations","position":11},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"2. The Grey Gas Model"},"type":"lvl2","url":"/courseware/radiative-transfer#id-2-the-grey-gas-model","position":12},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"2. The Grey Gas Model"},"content":"\n\nThe absorption properties \\kappa_i of most atmospheric gases varies enormously with the frequency of the radiation. Hence the optical thickness \\tau_\\nu also has an intricate dependence on wavenumber or frequency.\n\nOur job as climate modelers is to calculate and understand the net atmospheric absorption and transmission of radiation. To do this thoroughly and accurately, the fluxes must be solved for individually on a very dense grid of wavenumbers, and then the results integrated over all wavenumbers.\n\nActual radiative transfer codes (as used in GCMs) apply a lot of tricks and shortcuts to simplify this brute-force approach, but lead to sets of equations that are difficult to understand.\n\nHowever, there is a lot we can understand about the basics of radiative transfer and the greenhouse effect by ignoring the spectral dependence of the flux.\n\nSpecifically, we make the approximation\\kappa(\\nu, p, T) = \\kappa(p)\n\nso that the optical depth \\tau is now independent of frequency.\n\nThis is known as the grey gas approximation.\n\n","type":"content","url":"/courseware/radiative-transfer#id-2-the-grey-gas-model","position":13},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"Grey gas versions of the Schwarzschild equations"},"type":"lvl2","url":"/courseware/radiative-transfer#grey-gas-versions-of-the-schwarzschild-equations","position":14},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"Grey gas versions of the Schwarzschild equations"},"content":"\n\n","type":"content","url":"/courseware/radiative-transfer#grey-gas-versions-of-the-schwarzschild-equations","position":15},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Integrating the Planck function","lvl2":"Grey gas versions of the Schwarzschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#integrating-the-planck-function","position":16},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Integrating the Planck function","lvl2":"Grey gas versions of the Schwarzschild equations"},"content":"If we assume \\tau_\\nu is independent of frequency, we can then integrate the two-stream equations over all frequencies.\n\nThe integral of the Planck function gives our familiar Stefan-Boltzmann blackbody radiation lawE(T) = \\int_0^{\\infty} \\pi B\\big( \\nu, T \\big) d\\nu = \\sigma T^4\n\nwith\\sigma = \\frac{2 \\pi^5 k^4}{15 c^2 h^3} = 5.67 \\times 10^{-8} ~\\text{W m}^{-2}~\\text{K}^{-4}\n\n# climlab has these constants available, and actually calculates sigma from the above formula\nimport numpy as np\nimport climlab \n\nsigma = ((2*np.pi**5 * climlab.constants.kBoltzmann**4) / \n         (15 * climlab.constants.c_light**2 * climlab.constants.hPlanck**3) )\nprint( sigma)\nsigma == climlab.constants.sigma\n\n","type":"content","url":"/courseware/radiative-transfer#integrating-the-planck-function","position":17},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The grey gas equations","lvl2":"Grey gas versions of the Schwarzschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#the-grey-gas-equations","position":18},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The grey gas equations","lvl2":"Grey gas versions of the Schwarzschild equations"},"content":"This gives the governing equations for the grey gas model:\\begin{align}\n\\frac{d U}{d \\tau} &= -U + \\sigma T(\\tau)^4 \\\\\n\\frac{d D}{d \\tau} &= D - \\sigma T(\\tau)^4 \n\\end{align}\n\nThese equations now say that the beam is diminished by absorption in a thin layer (first term) and augmented by blackbody emission, where both processes are assumed to be independent of frequency.\n\n","type":"content","url":"/courseware/radiative-transfer#the-grey-gas-equations","position":19},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"How do the fluxes change across a finite layer of absorbers?","lvl2":"Grey gas versions of the Schwarzschild equations"},"type":"lvl3","url":"/courseware/radiative-transfer#how-do-the-fluxes-change-across-a-finite-layer-of-absorbers","position":20},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"How do the fluxes change across a finite layer of absorbers?","lvl2":"Grey gas versions of the Schwarzschild equations"},"content":"\n\nThe above equations are linear, first order ODEs, and they are uncoupled from each other (because we neglected scattering).\n\nConsider a layer of atmosphere from optical level \\tau_{0} to \\tau_{1}. The optical thickness of the layer is \\Delta \\tau = \\tau_{1} - \\tau_{0}.\n\nThe incident upwelling beam from below is denoted U_{0}; the upwelling beam that leaves the top of our layer is denoted U_{1}. We want to calculate U_{1}, which we can get by integrating the equation for dU/d\\tau over our layer.\n\nThe result isU_{1} = U_{0} \\exp(-\\Delta \\tau) + \\int_{\\tau_{0}}^{\\tau_{1}} E \\exp \\big( -(\\tau_{1} - \\tau) \\big) d\\tau\n\nwhere \\tau is now a dummy variable of integration, and we’ve written the blackbody emissions as E = \\sigma T^4.\n\nThe change in the downwelling beam is similar:D_{0} = D_{1} \\exp(-\\Delta \\tau ) + \\int_{\\tau_0}^{\\tau_1} E \\exp\\big( -(\\tau - \\tau_{0}) \\big) d\\tau\n\n","type":"content","url":"/courseware/radiative-transfer#how-do-the-fluxes-change-across-a-finite-layer-of-absorbers","position":21},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"type":"lvl2","url":"/courseware/radiative-transfer#id-3-discretizing-the-grey-gas-equations-on-a-finite-grid","position":22},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"content":"\n\nOne particularly important reason to think about these changes over finite layers is that we will typically solve the radiative transfer equations in a numerical model where the temperature is represented on a discrete grid (often using pressure coordinates).\n\nIf we assume that temperature is uniform everywhere in our layer then the blackbody emission E is also a constant across the layer, which we will denote E_{0}.\n\nIt can come out the integral and the expressions simplify to\\begin{align}\nU_1 &= U_0 ~ \\exp(-\\Delta \\tau )  + E_{0} ~\\Big( 1 - \\exp(-\\Delta \\tau) \\Big)  \\\\\nD_0 &= D_1 ~ \\exp(-\\Delta \\tau )  + E_{0} ~\\Big( 1 - \\exp(-\\Delta \\tau) \\Big)\n\\end{align}\n\n","type":"content","url":"/courseware/radiative-transfer#id-3-discretizing-the-grey-gas-equations-on-a-finite-grid","position":23},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Transmissitivity","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"type":"lvl3","url":"/courseware/radiative-transfer#transmissitivity","position":24},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Transmissitivity","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"content":"The first term is the transmission of radition from the bottom to the top of the layer (or vice-versa). We can define the transmissivity of the layer (denoted t_{0}) as the fraction of the incident beam that is passed on to the next layer:\\begin{align}\nt_{0} &= \\frac{U_{0} \\exp(-\\Delta \\tau)}{U_{0}}  \\\\\n &= \\exp(-\\Delta \\tau)\\\\\n\\end{align}\n\n","type":"content","url":"/courseware/radiative-transfer#transmissitivity","position":25},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Emissivity","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"type":"lvl3","url":"/courseware/radiative-transfer#emissivity","position":26},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Emissivity","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"content":"The second term is the net change in the beam due to emissions in the layer.\n\nWe can the define the emissivity \\epsilon_0 of the layer analogously\\begin{align}\n\\epsilon_{0} &=  1 - \\exp(-\\Delta \\tau) \\\\\n  &= 1 - t_{0} \n\\end{align}\n\n","type":"content","url":"/courseware/radiative-transfer#emissivity","position":27},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The discrete two-stream equations on a finite pressure grid","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"type":"lvl3","url":"/courseware/radiative-transfer#the-discrete-two-stream-equations-on-a-finite-pressure-grid","position":28},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The discrete two-stream equations on a finite pressure grid","lvl2":"3. Discretizing the Grey-gas equations on a finite grid"},"content":"Putting this all together gives us two simple equations that govern changes in the upwelling and downwelling beams across a discrete layer of optical depth \\Delta \\tau:\\begin{align}\nU_{1} &= t_0 ~ U_{0} + \\epsilon_{0} ~ E_{0}  \\\\\nD_{0} &= t_0 ~ D_{1} + \\epsilon_{0} ~ E_{0}  \\\\\n\\end{align}\n\nOur model will typically be discretized in pressure coordinates. Suppose the thickness of the layer is \\Delta p, then the optical depth is\\Delta \\tau  = -\\frac{\\kappa}{g} \\Delta p\n\n(the minus sign accounts for the opposite sign conventions of the two coordinates).\n\nThus the emissivity of the layer is\\epsilon_{0} = 1 - \\exp\\big( \\frac{\\kappa}{g} \\Delta p \\big)\n\nIn the grey gas approximation we ignore all spectral dependence of the flux, so \\kappa is a constant (we could let it vary in the vertical to represent non-well-mixed greenhouse gases like water vapor), and the blackbody emissions are simplyE_0 = \\sigma T_0^4\n\n","type":"content","url":"/courseware/radiative-transfer#the-discrete-two-stream-equations-on-a-finite-pressure-grid","position":29},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"4. Matrix equations for the grey gas model"},"type":"lvl2","url":"/courseware/radiative-transfer#id-4-matrix-equations-for-the-grey-gas-model","position":30},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"4. Matrix equations for the grey gas model"},"content":"\n\nclimlab implements the discretized two-stream equations as written above.\n\nWe will now write out the equations on a discretized pressure grid with N layers.\n\nLet the upwelling flux be a column vector{\\bf{U}} = [U_0, U_1, ..., U_{N-1}, U_N]^T\n\nIf there are N levels then \\bf{U} has N+1 elements (i.e. the fluxes are defined at the boundaries between levels). We will number the layers starting from 0 following numpy index conventions.\n\nU_0 is the upwelling flux from surface to layer 0.\n\nU_1 is the upwelling flux layer 0 to layer 1, etc.\n\nU_N is the upwelling flux from layer N-1 (the top level) to space.\n\nSame for the downwelling flux{\\bf{D}} = [D_0, D_1, ..., D_N]^T\n\nSo D_N is the flux down from space and D_0 is the back-radiation to the surface.\n\nThe temperature and blackbody emissions are defined for each N pressure level, and are related byE_i = \\sigma T_i^4\n\n","type":"content","url":"/courseware/radiative-transfer#id-4-matrix-equations-for-the-grey-gas-model","position":31},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Emissivity and Transmissivity vectors","lvl2":"4. Matrix equations for the grey gas model"},"type":"lvl3","url":"/courseware/radiative-transfer#emissivity-and-transmissivity-vectors","position":32},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"Emissivity and Transmissivity vectors","lvl2":"4. Matrix equations for the grey gas model"},"content":"Let the vector of absorptivity / emissivity be{\\bf{\\epsilon}} = [\\epsilon_0, \\epsilon_1, ..., \\epsilon_{N-1}]\n\nwhere each element is determined by the thickness of the layer and the absorption cross-section for this particular spectral band:\\epsilon_{i} = 1 - \\exp\\big( \\frac{\\kappa}{g} \\Delta p_i \\big)\n\nAnd the transmissivity of individual layers ist_{i} = 1 - \\epsilon_{i}\n\nIt is convenient to define a vector of transmissivities {\\bf{t}} with N+1 elements:{\\bf{t}} = [1, t_0, t_1, ..., t_{N-1}]\n\n","type":"content","url":"/courseware/radiative-transfer#emissivity-and-transmissivity-vectors","position":33},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The downwelling beam","lvl2":"4. Matrix equations for the grey gas model"},"type":"lvl3","url":"/courseware/radiative-transfer#the-downwelling-beam","position":34},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The downwelling beam","lvl2":"4. Matrix equations for the grey gas model"},"content":"For the downwelling beam, we define a column vector of emissions with N+1 elements:{\\bf{E_{down}}} = [E_0, E_1, ..., E_{N-1}, E_N]^{T}\n\nwhere we define the last element E_N as the incident flux at the TOA.\n\nFor a longwave model, we would usually set E_N = 0. For a shortwave model, this would be the incident solar radiation.\n\nWe want a matrix {\\bf{T_{down}}} that, when multiplied by E_N, gives the downwelling beam at each of the N+1 layer interfaces:{\\bf{D}} = {\\bf{T_{down}}} ~ {\\bf{E_{down}}}\n\n","type":"content","url":"/courseware/radiative-transfer#the-downwelling-beam","position":35},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The upwelling beam","lvl2":"4. Matrix equations for the grey gas model"},"type":"lvl3","url":"/courseware/radiative-transfer#the-upwelling-beam","position":36},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The upwelling beam","lvl2":"4. Matrix equations for the grey gas model"},"content":"Define a vector of emissions for the upwelling beam thus:{\\bf{E_{up}}} = [up_{sfc}, E_0, E_1, ..., E_{N-1}]\n\nWe need to add the reflected part of the downwelling beam at the surface to any emissions from the surface:up_{sfc} = E_{sfc} + \\alpha_{sfc} ~ D[0]\n\nNow we want a matrix {\\bf{T_{up}}} such that the upwelling beam is{\\bf{U}} = {\\bf{T_{up}}} ~ {\\bf{E_{up}}}\n\n","type":"content","url":"/courseware/radiative-transfer#the-upwelling-beam","position":37},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The transmissivity matrices","lvl2":"4. Matrix equations for the grey gas model"},"type":"lvl3","url":"/courseware/radiative-transfer#the-transmissivity-matrices","position":38},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl3":"The transmissivity matrices","lvl2":"4. Matrix equations for the grey gas model"},"content":"{\\bf{T_{up}}} = \\left[ \\begin{array}{cccccc} 1 & 0 & 0 & ... & 0 & 0 \\\\  \n                                             t_0 & 1 & 0 & ... & 0 & 0 \\\\\n                                         t_1 t_0 & t_1 & 1 & ... & 0 & 0 \\\\\n                                     t_2 t_1 t_0 & t_2 t_1 & t_2 & ... & 0 & 0 \\\\\n                                     ... & ... & ... & ... & ... & ... \\\\\n \\prod_0^{N-1} t_i & \\prod_1^{N-1} t_i & \\prod_2^{N-1} t_i & ... & t_{N-1} & 1 \n   \\end{array} \\right]\n\nand{\\bf{T_{down}}} = {\\bf{T_{up}}}^T\n\nThese formulas have been implemented in climlab.radiation.transmissivity.Transmissivity() using vectorized numpy array operations.\n\n# example with N=2 layers and constant absorptivity\n#  we construct an array of absorptivities\neps = np.array([0.58, 0.58])\n#  and pass these as argument to the Transmissivity class\ntrans = climlab.radiation.transmissivity.Transmissivity(eps)\nprint( 'Matrix Tup is ')\nprint( trans.Tup)\nprint( 'Matrix Tdown is ')\nprint( trans.Tdown)\n\n","type":"content","url":"/courseware/radiative-transfer#the-transmissivity-matrices","position":39},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"5. Band-averaged radiation models in climlab"},"type":"lvl2","url":"/courseware/radiative-transfer#id-5-band-averaged-radiation-models-in-climlab","position":40},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"5. Band-averaged radiation models in climlab"},"content":"\n\nThe Grey Gas model is a useful first step in understanding how radiation shapes the global energy balance. But we quickly run up against its limitations when trying to understand what really determines climate sensitivity.\n\nWhat’s the next step in the model hierarchy?\n\nSuppose we break up the spectrum into a discrete number M of spectral bands. The idea is that we find parts of the spectrum in which the absorption characteristics of the important gases are relatively uniform. We then write the band-averaged absorption cross section for gas k and band j as\\kappa_{kj} \\big(p, T \\big) = \\frac{\\int_{\\nu_j} \\kappa_j \\big(\\nu, p, T \\big) d \\nu }{  \\int_{\\nu_j} d \\nu }\n\nwhere we integrate over whatever part of the spectrum we have chosen to define band j.\n\nIn our band models we will typically ignore any dependence of \\kappa on temperature. The total absorption cross section for our band is thus (summing over all absorbing gases):\\kappa_j(p) = \\sum_{k=1}^n \\kappa_{kj}(p) q_k(p)\n\nNotice that once we make this defintion, all of the formulas we wrote down above for the grey gas model can be written nearly identically for the fluxes in each band.\n\nThe optical depth in band j is\\Delta \\tau_j  = -\\frac{\\kappa_j}{g} \\Delta p\n\nfrom which we can define emissivity and transmissivity for band j just as above.\n\nThe only difference from the Grey Gas formulas is that the blackbody emission in band j (denoted E_j) is now only a fraction of \\sigma T^4.\n\nWe will denote this fraction as b_j.\n\nThe fraction b_j is temperature-dependent, and can be solved by integrating the Planck function:E_j(T) = \\int_{\\nu_j} \\pi B\\big( \\nu, T \\big) d\\nu\n\nTo simplify our band models, we might choose to fix b_j in advance and just assumeE_j(T) = b_j ~ \\sigma ~ T^4\n\nwhich is sensible if the temperatures don’t vary too much.\n\nRegardless of how we calculate b_j, they must add up to one over all the bands in our model:\\sum_0^{M-1} b_j = 1\n\nOnce we’ve figured out this division of the total flux into multiple bands, and we know the absorption cross-sections of each band, we can calculate the upwelling and downwelling fluxes independently for each band, using the same formulas (same code!) as we use in the grey gas model.\n\nTo get the total flux, we just need to sum the beams over all bands:\\begin{align}\nU &= \\sum_0^{M-1} U_j  \\\\\nD &= \\sum_0^{M-1} D_j  \n\\end{align}\n\nNote\n\nFor many more details about radiative transfer and a more careful derivation of the two-stream equations, see the book by \n\nPierrehumbert (2010), Principles of Planetary Climate.\n\n","type":"content","url":"/courseware/radiative-transfer#id-5-band-averaged-radiation-models-in-climlab","position":41},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"Credits"},"type":"lvl2","url":"/courseware/radiative-transfer#credits","position":42},{"hierarchy":{"lvl1":"Modeling non-scattering radiative transfer","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/radiative-transfer#credits","position":43},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium"},"type":"lvl1","url":"/courseware/rce","position":0},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/rce","position":1},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"1. Recap of radiative equilibrium results"},"type":"lvl2","url":"/courseware/rce#id-1-recap-of-radiative-equilibrium-results","position":2},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"1. Recap of radiative equilibrium results"},"content":"\n\nHere we summarize results we generated in the \n\nLecture on radiative equilibrium.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom metpy.plots import SkewT\n#  This code is used just to create the skew-T plot of global, annual mean air temperature\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\ntime_coder = xr.coders.CFDatetimeCoder(use_cftime=True)\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", decode_times=time_coder)\n#  Take global, annual average \ncoslat = np.cos(np.deg2rad(ncep_air.lat))\nweight = coslat / coslat.mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\n#  Resuable function to plot the temperature data on a Skew-T chart\ndef make_skewT():\n    fig = plt.figure(figsize=(9, 9))\n    skew = SkewT(fig, rotation=30)\n    skew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')\n    skew.ax.set_ylim(1050, 10)\n    skew.ax.set_xlim(-90, 45)\n    # Add the relevant special lines\n    skew.plot_dry_adiabats(linewidth=0.5)\n    skew.plot_moist_adiabats(linewidth=0.5)\n    #skew.plot_mixing_lines()\n    skew.ax.legend()\n    skew.ax.set_xlabel('Temperature (degC)', fontsize=14)\n    skew.ax.set_ylabel('Pressure (hPa)', fontsize=14)\n    return skew\n#  and a function to add extra profiles to this chart\ndef add_profile(skew, model, linestyle='-', color=None):\n    line = skew.plot(model.lev, model.Tatm - climlab.constants.tempCtoK,\n             label=model.name, linewidth=2)[0]\n    skew.plot(1000, model.Ts - climlab.constants.tempCtoK, 'o', \n              markersize=8, color=line.get_color())\n    skew.ax.legend()\n\n# Get the water vapor data from CESM output\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\n# Take global, annual average of the specific humidity\nweight_factor = atm_control.gw / atm_control.gw.mean(dim='lat')\nQglobal = (atm_control.Q * weight_factor).mean(dim=('lat','lon','time'))\n#  Create the single-column model domain\nimport climlab\n#  Make a model on same vertical domain as the GCM\nmystate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\n#  Create the model itself -- radiation only!\nrad = climlab.radiation.RRTMG(name='Radiation (all gases)',  # give our model a name!\n                              state=mystate,   # give our model an initial condition!\n                              specific_humidity=Qglobal.values,  # tell the model how much water vapor there is\n                              albedo = 0.25,  # this the SURFACE shortwave albedo\n                              timestep = climlab.constants.seconds_per_day,  # set the timestep to one day (measured in seconds)\n                             )\n\n#  remove ozone\nrad_noO3 = climlab.process_like(rad)\nrad_noO3.absorber_vmr['O3'] *= 0.\nrad_noO3.name = 'no O3'\n#  remove water vapor\nrad_noH2O = climlab.process_like(rad)\nrad_noH2O.specific_humidity *= 0.\nrad_noH2O.name = 'no H2O'\n#  remove both\nrad_noO3_noH2O = climlab.process_like(rad_noO3)\nrad_noO3_noH2O.specific_humidity *= 0.\nrad_noO3_noH2O.name = 'no O3, no H2O'\n#  put all models together in a list\nrad_models = [rad, rad_noO3, rad_noH2O, rad_noO3_noH2O]\n\n#  Loop through the models and integrate each one out to equilibrium\nfor model in rad_models:\n    for n in range(100):\n        model.step_forward()\n    while (np.abs(model.ASR-model.OLR)>0.01):\n        model.step_forward()\n        \n# Plot all the results\nskew = make_skewT()\nfor model in rad_models:\n    add_profile(skew, model)\nskew.ax.set_title('Pure radiative equilibrium', fontsize=18);\n\nAs we have already discussed, none of these profiles really looks anything like the observations in the troposphere. This strongly suggests that other physical processes (aside from radiation) are important in determining the observed temperature profile.\n\nPlotting on the skew-T diagram makes it clear that all the radiative equilibrium profiles are statically unstable near the surface.\n\nSo we’re now going to add a representation of the effects of convective mixing to the single-column model.\n\n","type":"content","url":"/courseware/rce#id-1-recap-of-radiative-equilibrium-results","position":3},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"2. Building a radiative-convection model in climlab"},"type":"lvl2","url":"/courseware/rce#id-2-building-a-radiative-convection-model-in-climlab","position":4},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"2. Building a radiative-convection model in climlab"},"content":"\n\nTo make a Radiative-Convective model, we just take a radiation model and couple it to a convection model!\n\nThe “convection” model we’re going to use here is available asclimlab.convection.ConvectiveAdjustment\n\nIt is a simple process that looks for lapse rates exceeding a critical threshold and performs an instantaneous adjustment that mixes temperatures to the critical lapse rate while conserving energy.\n\nThis is a parameterization of the complex, rapid mixing processes that actually occur in an unstable air column!\n\nHere is some code to put this model together in climlab:\n\n#  Make a model on same vertical domain as the GCM\nmystate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\n#  Build the radiation model -- just like we already did\nrad = climlab.radiation.RRTMG(name='Radiation (net)',\n                              state=mystate, \n                              specific_humidity=Qglobal.values,\n                              timestep = climlab.constants.seconds_per_day,\n                              albedo = 0.25,  # surface albedo, tuned to give reasonable ASR for reference cloud-free model\n                             )\n#  Now create the convection model\nconv = climlab.convection.ConvectiveAdjustment(name='Convection',\n                                               state=mystate,\n                                               adj_lapse_rate=6.5, # this is the key parameter! We'll discuss below\n                                               timestep=rad.timestep,  # same timestep!\n                                              )\n#  Here is where we build the model by coupling together the two components\nrcm = climlab.couple([rad, conv], name='Radiative-Convective Model')\n\nrcm\n\n","type":"content","url":"/courseware/rce#id-2-building-a-radiative-convection-model-in-climlab","position":5},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"type":"lvl2","url":"/courseware/rce#id-3-adjustment-toward-radiative-convective-equilibrium","position":6},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"content":"\n\n","type":"content","url":"/courseware/rce#id-3-adjustment-toward-radiative-convective-equilibrium","position":7},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"Adjustment from isothermal initial conditions","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"type":"lvl3","url":"/courseware/rce#adjustment-from-isothermal-initial-conditions","position":8},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"Adjustment from isothermal initial conditions","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"content":"To get some insight into the interaction between radiation and convection, it’s useful to look at the adjustment process from a non-equilibrium initial condition.\n\nLet’s make an animation!\n\nThe code below is complicated but it is mostly for generating the animation. Focus on the results, not the code here.\n\n#  Some imports needed to make and display animations\nfrom IPython.display import HTML\nfrom matplotlib import animation\n\ndef get_tendencies(model):\n    '''Pack all the subprocess tendencies into xarray.Datasets\n    and convert to units of K / day'''\n    tendencies_atm = xr.Dataset()\n    tendencies_sfc = xr.Dataset()\n    for name, proc, top_proc in climlab.utils.walk.walk_processes(model, topname='Total', topdown=False):\n        tendencies_atm[name] = proc.tendencies['Tatm'].to_xarray()\n        tendencies_sfc[name] = proc.tendencies['Ts'].to_xarray()\n    for tend in [tendencies_atm, tendencies_sfc]:\n        #  convert to K / day\n        tend *= climlab.constants.seconds_per_day\n    return tendencies_atm, tendencies_sfc\n\ndef initial_figure(model):\n    fig = plt.figure(figsize=(14,6))\n    lines = []\n    \n    skew = SkewT(fig, subplot=(1,2,1), rotation=30)\n    #  plot the observations\n    skew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')    \n    lines.append(skew.plot(model.lev, model.Tatm - climlab.constants.tempCtoK, \n              linestyle='-', linewidth=2, color='C0', label='RC model (all gases)')[0])\n    skew.ax.legend()\n    skew.ax.set_ylim(1050, 10)\n    skew.ax.set_xlim(-60, 75)\n    # Add the relevant special lines\n    skew.plot_dry_adiabats(linewidth=0.5)\n    skew.plot_moist_adiabats(linewidth=0.5)\n    skew.ax.set_xlabel('Temperature (°C)', fontsize=14)\n    skew.ax.set_ylabel('Pressure (hPa)', fontsize=14)\n    lines.append(skew.plot(1000, model.Ts - climlab.constants.tempCtoK, 'o', \n                  markersize=8, color='C0', )[0])\n\n    ax = fig.add_subplot(1,2,2, sharey=skew.ax)\n    ax.set_ylim(1050, 10)\n    ax.set_xlim(-8,8)\n    ax.grid()\n    ax.set_xlabel(r'Temperature tendency (°C day$^{-1}$)', fontsize=14)\n\n    color_cycle=['g','b','r','y','k']\n    #color_cycle=['y', 'r', 'b', 'g', 'k']\n    tendencies_atm, tendencies_sfc = get_tendencies(rcm)\n    for i, name in enumerate(tendencies_atm.data_vars):\n        lines.append(ax.plot(tendencies_atm[name], model.lev, label=name, color=color_cycle[i])[0])\n    for i, name in enumerate(tendencies_sfc.data_vars):\n        lines.append(ax.plot(tendencies_sfc[name], 1000, 'o', markersize=8, color=color_cycle[i])[0])\n    ax.legend(loc='center right');\n    lines.append(skew.ax.text(-100, 50, 'Day {}'.format(int(model.time['days_elapsed'])), fontsize=12)) \n    return fig, lines\n\ndef animate(day, model, lines):\n    lines[0].set_xdata(np.array(model.Tatm)-climlab.constants.tempCtoK)\n    lines[1].set_xdata(np.array(model.Ts)-climlab.constants.tempCtoK)\n    #lines[2].set_xdata(np.array(model.q)*1E3)\n    tendencies_atm, tendencies_sfc = get_tendencies(model)\n    for i, name in enumerate(tendencies_atm.data_vars):\n        lines[2+i].set_xdata(tendencies_atm[name])\n    for i, name in enumerate(tendencies_sfc.data_vars):\n        lines[2+5+i].set_xdata(tendencies_sfc[name])\n    lines[-1].set_text('Day {}'.format(int(model.time['days_elapsed'])))\n    # This is kind of a hack, but without it the initial frame doesn't appear\n    if day != 0:\n        model.step_forward()\n    return lines\n\nWe are going to start from an isothermal initial state, and let the model drift toward equilibrium.\n\n#  Start from isothermal state\nrcm.state.Tatm[:] = rcm.state.Ts\n#  Call the diagnostics once for initial plotting\nrcm.compute_diagnostics()\n#  Plot initial data\nfig, lines = initial_figure(rcm)\n\nNotice several things here:\n\nThe initial profile is isothermal at 15ºC. This is an arbitrary choice we made.\n\nThe initial tendency from convection is zero everywhere. Why?\n\nShortwave radiation tends to warm everywhere. Why?\n\nLongwave radiation tends to cool everywhere. The cooling is very strong especially aloft. Why?\n\nThe total tendency (black) is warming at the surface and cooling in the atmosphere. What should happen next? What are the implications for convective instability?\n\nNow let’s look at how the model actually adjusts:\n\n#  This is where we make a loop over many timesteps and create an animation in the notebook\nani = animation.FuncAnimation(fig, animate, 150, fargs=(rcm, lines))\nHTML(ani.to_html5_video())\n\nDiscuss.\n\n","type":"content","url":"/courseware/rce#adjustment-from-isothermal-initial-conditions","position":9},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"What if instead we start out from pure Radiative equilibrium?","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"type":"lvl3","url":"/courseware/rce#what-if-instead-we-start-out-from-pure-radiative-equilibrium","position":10},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"What if instead we start out from pure Radiative equilibrium?","lvl2":"3. Adjustment toward radiative-convective equilibrium"},"content":"This will represent the effect of a sudden “switching on” of convective processes.\n\n#  Here we take JUST THE RADIATION COMPONENT of the full model and run it out to (near) equilibrium\n#  This is just to get the initial condition for our animation\nfor n in range(1000):\n    rcm.subprocess['Radiation (net)'].step_forward()\n\n#  Call the diagnostics once for initial plotting\nrcm.compute_diagnostics()\n#  Plot initial data\nfig, lines = initial_figure(rcm)\n\n#  This is where we make a loop over many timesteps and create an animation in the notebook\nani = animation.FuncAnimation(fig, animate, 100, fargs=(rcm, lines))\nHTML(ani.to_html5_video())\n\nThis animation is not as exciting because the instability is destroyed immediately in the first timestep!\n\nThat is because the ConvectiveAdjustment process operates instantaneously whenever there is any instability. It is a parameterization taking advantage of the fact that, in nature, convection processes are fast compared to radiative processes.\n\nBut notice that the final state is pretty much the same as in the first animation.\n\nThe column tends toward the same equilibrium state regardless of where it starts.\n\n","type":"content","url":"/courseware/rce#what-if-instead-we-start-out-from-pure-radiative-equilibrium","position":11},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"4. Compare Radiative- and Radiative-Convective Equilibrium"},"type":"lvl2","url":"/courseware/rce#id-4-compare-radiative-and-radiative-convective-equilibrium","position":12},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"4. Compare Radiative- and Radiative-Convective Equilibrium"},"content":"\n\nLet’s repeat our experiment with removing certain absorbing gases from the model, but use the Radiative-Convective model.\n\n#  Make a model on same vertical domain as the GCM\nmystate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\n\nrad = climlab.radiation.RRTMG(name='all gases',\n                              state=mystate, \n                              specific_humidity=Qglobal.values,\n                              timestep = climlab.constants.seconds_per_day,\n                              albedo = 0.25,  # tuned to give reasonable ASR for reference cloud-free model\n                             )\n#  remove ozone\nrad_noO3 = climlab.process_like(rad)\nrad_noO3.absorber_vmr['O3'] *= 0.\nrad_noO3.name = 'no O3'\n#  remove water vapor\nrad_noH2O = climlab.process_like(rad)\nrad_noH2O.specific_humidity *= 0.\nrad_noH2O.name = 'no H2O'\n#  remove both\nrad_noO3_noH2O = climlab.process_like(rad_noO3)\nrad_noO3_noH2O.specific_humidity *= 0.\nrad_noO3_noH2O.name = 'no O3, no H2O'\n#  put all models together in a list\nrad_models = [rad, rad_noO3, rad_noH2O, rad_noO3_noH2O]\n\nrc_models = []\nfor r in rad_models:\n    newrad = climlab.process_like(r)\n    conv = climlab.convection.ConvectiveAdjustment(name='Convective Adjustment',\n                                               state=newrad.state,\n                                               adj_lapse_rate=6.5,  # the key parameter in the convection model!\n                                               timestep=newrad.timestep,)\n    rc = climlab.couple([newrad, conv], name=newrad.name)\n    rc_models.append(rc)\n\nfor model in rad_models:\n    for n in range(100):\n        model.step_forward()\n    while (np.abs(model.ASR-model.OLR)>0.01):\n        model.step_forward()    \n    \nfor model in rc_models:\n    for n in range(100):\n        model.step_forward()\n    while (np.abs(model.ASR-model.OLR)>0.01):\n        model.step_forward()\n\nskew = make_skewT()\nfor model in rad_models:\n    add_profile(skew, model)\nskew.ax.set_title('Pure radiative equilibrium', fontsize=18);\n\nskew2 = make_skewT()\nfor model in rc_models:\n    add_profile(skew2, model)\nskew2.ax.set_title('Radiative-convective equilibrium', fontsize=18);\n\nLots to discuss here.\n\nThe overall message is that equilibrium temperature profile results from a competition between radiation and convection. Essentially:\n\nRadiation is always trying to push temperatures toward radiative equilibrium, which means\n\nwarm surface\n\ncold troposphere\n\nConvection cools the surface and warms the troposphere\n\nThe troposphere can be defined here as the layer over which convection is active.\n\nThis is true whether or not we have the radiative effects of water vapor.\n\nWhen we remove the water vapor (and its warming greenhouse effect), the surface temperature becomes much colder and the troposphere is much shallower -- but it is still there.\n\n","type":"content","url":"/courseware/rce#id-4-compare-radiative-and-radiative-convective-equilibrium","position":13},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"5. The role of the critical lapse rate"},"type":"lvl2","url":"/courseware/rce#id-5-the-role-of-the-critical-lapse-rate","position":14},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"5. The role of the critical lapse rate"},"content":"\n\n","type":"content","url":"/courseware/rce#id-5-the-role-of-the-critical-lapse-rate","position":15},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"What have we done above","lvl2":"5. The role of the critical lapse rate"},"type":"lvl3","url":"/courseware/rce#what-have-we-done-above","position":16},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"What have we done above","lvl2":"5. The role of the critical lapse rate"},"content":"These calculations all used a critical lapse rate of 6.5 K / km, which is a reasonable approximation to observations.\n\nWe set this with the input argumentadj_lapse_rate\n\nto the ConvectiveAdjustment process.\n\nThe idea is that we are trying to represent the statistical effects of many episodes of moist convection.\n\nAn air column that is perfectly neutral to moist instability would follow the blue moist adiabats on the skew-T diagrams.\n\nWe can force the model to behave this way by settingadj_lapse_rate = 'pseudoadiabat'\n\nHowever the real atmosphere, on average, does not exactly follow these adiabats for several reasons:\n\nthe slope of the moist adiabat depends strongly on temperature (as we can see on these diagrams)\n\nWe are looking at temperatures averaged over the whole planet, including regions that are warm and moist, warm and dry, and cold.\n\nHeat fluxes by mid-latitude eddies play an important role in stabilizing the extra-tropical atmosphere.\n\nSo here we sweep all this complexity under the rug and just choose a single critical lapse rate for our convective adjustment model.\n\nBut this is a parameter that is uncertain and could be interesting to explore.\n\n","type":"content","url":"/courseware/rce#what-have-we-done-above","position":17},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"Python exercise: change the critical lapse rate","lvl2":"5. The role of the critical lapse rate"},"type":"lvl3","url":"/courseware/rce#python-exercise-change-the-critical-lapse-rate","position":18},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl3":"Python exercise: change the critical lapse rate","lvl2":"5. The role of the critical lapse rate"},"content":"Repeat the whole series of calculations for the different combinations of absorbing gases above, but with different critical lapse rates:\n\nadj_lapse_rate = 9.8 (in K/km, the dry adiabatic lapse rate, suitable for an atmosphere where condensation does not impact the buoyancy of air parcels)\n\nadj_lapse_rate = 'pseudoadiabat' (more suitable for the tropical atmosphere)\n\n\n\n","type":"content","url":"/courseware/rce#python-exercise-change-the-critical-lapse-rate","position":19},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"6. Summary of radiative-convection equilibrium results"},"type":"lvl2","url":"/courseware/rce#id-6-summary-of-radiative-convection-equilibrium-results","position":20},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"6. Summary of radiative-convection equilibrium results"},"content":"\n\nWe noted that pure radiative equilibrium is not a good model for the observed temperature profile.\n\nAn air column in radiative equilibrium has a warm surface and cold troposphere.\n\nIn reality this would tend to become unstable and cause vertical mixing.\n\nTo account for this shortcoming of the radiation model, we coupled our single-column radiation model (using the RRTMG radiation model) to a simple convection model.\n\nThe ConvectiveAdjustment model instantly mixes out any profiles where the lapse rate exceeds some critical threshold value.\n\nThis critical lapse rate is the tunable parameter in our combined Radiative-Convective Model or RCM.\n\nUsing a value of 6.5 K / km and realistic gas profiles gives a reasonable (not perfect) fit to the observed air temperatures.\n\nThe RCM represents the “tug-of-war” between radiation (trying to warm the surface and cool the troposphere) and convection (cool the surface and warm the troposphere).\n\nThe convectively mixed layer extends up to near the top of the troposphere.\n\nOur experiments with removing certain absorbing gases show something interesting: the height of the tropopause (boundary bewteen troposphere and stratosphere) changes when we remove absorbers. Warmer columns also appear to have higher tropopause.\n\nNow that we know how to build and use this RCM, we’ll be able to use to study some climate change processes in more detail.\n\n","type":"content","url":"/courseware/rce#id-6-summary-of-radiative-convection-equilibrium-results","position":21},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"Credits"},"type":"lvl2","url":"/courseware/rce#credits","position":22},{"hierarchy":{"lvl1":"Radiative-Convective Equilibrium","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/rce#credits","position":23},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature"},"type":"lvl1","url":"/courseware/seasonal-cycle","position":0},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/seasonal-cycle","position":1},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"1. The observed seasonal cycle from NCEP Reanalysis data"},"type":"lvl2","url":"/courseware/seasonal-cycle#id-1-the-observed-seasonal-cycle-from-ncep-reanalysis-data","position":2},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"1. The observed seasonal cycle from NCEP Reanalysis data"},"content":"\n\nLook at the observed seasonal cycle in the NCEP reanalysis data.\n\nRead in the necessary data from the online server courtesy of the \n\nNOAA Physical Sciences Laboratory\n\nThe catalog is here: \n\nhttps://​psl​.noaa​.gov​/thredds​/catalog​/Datasets​/ncep​.reanalysis​.derived​/catalog​.html\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport climlab\nfrom climlab import constants as const\nimport cartopy.crs as ccrs  # use cartopy to make some maps\n\nncep_url = \"http://psl.noaa.gov/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\nncep_Ts = xr.open_dataset(ncep_url + \"surface_gauss/skt.sfc.mon.1981-2010.ltm.nc\", decode_times=False)\n# Alternative source from the University of Hawai'i\n#url = \"http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/NCEP/NCEP/clima/\"\n#ncep_Ts = xr.open_dataset(url + 'surface_gauss/skt')\nlat_ncep = ncep_Ts.lat; lon_ncep = ncep_Ts.lon\nTs_ncep = ncep_Ts.skt\nprint( Ts_ncep.shape)\n\nMake two maps: one of annual mean surface temperature, another of the seasonal range (max minus min).\n\nmaxTs = Ts_ncep.max(dim='time')\nminTs = Ts_ncep.min(dim='time')\nmeanTs = Ts_ncep.mean(dim='time')\n\nfig = plt.figure( figsize=(16,6) )\n\nax1 = fig.add_subplot(1,2,1, projection=ccrs.Robinson())\ncax1 = ax1.pcolormesh(lon_ncep, lat_ncep, meanTs, cmap=plt.cm.seismic , transform=ccrs.PlateCarree())\ncbar1 = plt.colorbar(cax1)\nax1.set_title('Annual mean surface temperature ($^\\circ$C)', fontsize=14 )\n\nax2 = fig.add_subplot(1,2,2, projection=ccrs.Robinson())\ncax2 = ax2.pcolormesh(lon_ncep, lat_ncep, maxTs - minTs, transform=ccrs.PlateCarree() )\ncbar2 = plt.colorbar(cax2)\nax2.set_title('Seasonal temperature range ($^\\circ$C)', fontsize=14)\n\nfor ax in [ax1,ax2]:\n    #ax.contour( lon_cesm, lat_cesm, topo.variables['LANDFRAC'][:], [0.5], colors='k');\n    #ax.set_xlabel('Longitude', fontsize=14 ); ax.set_ylabel('Latitude', fontsize=14 )\n    ax.coastlines()\n\nMake a contour plot of the zonal mean temperature as a function of time\n\nTmax = 65; Tmin = -Tmax; delT = 10\nclevels = np.arange(Tmin,Tmax+delT,delT)\nfig_zonobs, ax = plt.subplots( figsize=(10,6) )\ncax = ax.contourf(np.arange(12)+0.5, lat_ncep, \n                  Ts_ncep.mean(dim='lon').transpose(), levels=clevels, \n                  cmap=plt.cm.seismic, vmin=Tmin, vmax=Tmax)\nax.set_xlabel('Month', fontsize=16)\nax.set_ylabel('Latitude', fontsize=16 )\ncbar = plt.colorbar(cax)\nax.set_title('Zonal mean surface temperature (degC)', fontsize=20)\n\n","type":"content","url":"/courseware/seasonal-cycle#id-1-the-observed-seasonal-cycle-from-ncep-reanalysis-data","position":3},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl2","url":"/courseware/seasonal-cycle#id-2-analytical-toy-model-of-the-seasonal-cycle","position":4},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"\n\nWhat factors determine the above pattern of seasonal temperatures? How large is the winter-to-summer variation in temperature? What is its phasing relative to the seasonal variations in insolation?\n\nWe will start to examine this in a very simple zero-dimensional EBM.\n\nSuppose the seasonal cycle of insolation at a point isQ = Q^* \\sin\\omega t + Q_0\n\nwhere \\omega = 2\\pi ~ \\text{year}^{-1}, Q_0 is the annual mean insolation, and Q^* is the amplitude of the seasonal variations.\n\nHere \\omega ~ t=0 is spring equinox, \\omega~t = \\pi/2 is summer solstice, \\omega~t = \\pi is fall equinox, and  \\omega ~t = 3 \\pi/2 is winter solstice.\n\nNow suppose the temperature is governed byC \\frac{d T}{d t} = Q - (A + B~T)\n\nso that we have a simple modelC \\frac{d T}{d t} = Q^* \\sin\\omega t + Q_0 - (A + B~T)\n\nWe want to ask two questions:\n\nWhat is the amplitude of the seasonal temperature variation?\n\nWhen does the temperature maximum occur?\n\nWe will look for an oscillating solutionT(t) = T_0 + T^* \\sin(\\omega t - \\Phi)\n\nwhere \\Phi is an unknown phase shift and T^* is the unknown amplitude of seasonal temperature variations.\n\n","type":"content","url":"/courseware/seasonal-cycle#id-2-analytical-toy-model-of-the-seasonal-cycle","position":5},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The annual mean:","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#the-annual-mean","position":6},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The annual mean:","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Integrate over one year to find\\overline{T} = T_0Q_0 = A + B ~ \\overline{T}\n\nso thatT_0 = \\frac{Q_0 - A}{B}\n\n","type":"content","url":"/courseware/seasonal-cycle#the-annual-mean","position":7},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The seasonal problem","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#the-seasonal-problem","position":8},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The seasonal problem","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Now we need to solve for T^* and \\Phi.\n\nTake the derivative\\frac{d T}{dt} = T^* \\omega \\cos(\\omega t - \\Phi)\n\nand plug into the model equation to get\\begin{align*}\nC~ T^* \\omega \\cos(\\omega t - \\Phi) &=  Q^* \\sin\\omega t + Q_0  \\\\\n                                    & - \\left( A + B~(T_0 + T^* \\sin(\\omega t - \\Phi) )\\right)\n\\end{align*}\n\nSubtracting out the annual mean leaves us withC~ T^* \\omega \\cos(\\omega t - \\Phi) =  Q^* \\sin\\omega t  - B ~ T^* \\sin(\\omega t - \\Phi)\n\n","type":"content","url":"/courseware/seasonal-cycle#the-seasonal-problem","position":9},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Zero heat capacity: the radiative equilibrium solution","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#zero-heat-capacity-the-radiative-equilibrium-solution","position":10},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Zero heat capacity: the radiative equilibrium solution","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"It’s instructive to first look at the case with C=0, which means that the system is not capable of storing heat, and the temperature must always be in radiative equilibrium with the insolation.\n\nIn this case we would haveQ^* \\sin\\omega t  = B ~ T^* \\sin(\\omega t - \\Phi)\n\nwhich requires that the phase shift is\\Phi = 0\n\nand the amplitude isT^* = \\frac{Q^*}{B}\n\nWith no heat capacity, there can be no phase shift!  The temperature goes up and does in lockstep with the insolation.\nAs we will see, the amplitude of the temperature variations is maximum in this limit.\n\nAs a practical example:  at 45ºN the amplitude of the seasonal insolation cycle is about 180 W m^{-2}  (see the \n\nInsolation notes -- the difference between insolation at summer and winter solstice is about 360 W m^{-2} which we divide by two to get the amplitude of seasonal variations).\n\nWe will follow our previous EBM work and take B = 2 W m^{-2} K^{-1}. This would give a seasonal temperature amplitude of 90ºC!\n\nThis highlights to important role for heat capacity to buffer the seasonal variations in sunlight.\n\n","type":"content","url":"/courseware/seasonal-cycle#zero-heat-capacity-the-radiative-equilibrium-solution","position":11},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Non-dimensional heat capacity parameter","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#non-dimensional-heat-capacity-parameter","position":12},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Non-dimensional heat capacity parameter","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"We can rearrange the seasonal equation to give\\frac{C~\\omega}{B} \\cos(\\omega t - \\Phi) + \\sin(\\omega t - \\Phi) = \\frac{Q^*}{B~T^*} \\sin\\omega t\n\nThe heat capacity appears in our equation through the non-dimensional ratio\\tilde{C} = \\frac{C~\\omega}{B}\n\nThis parameter measures the efficiency of heat storage versus damping of energy anomalies through longwave radiation to space in our system.\n\nWe will now use trigonometric identities\\begin{align*}\n\\cos(\\omega t - \\Phi) &= \\cos\\omega t \\cos\\Phi + \\sin\\omega t \\sin\\Phi  \\\\\n\\sin(\\omega t - \\Phi) &= \\sin\\omega t \\cos\\Phi - \\cos\\omega t \\sin\\Phi\n\\end{align*}\n\nto express our equation as\\begin{align*}\n\\frac{Q^*}{B~T^*} \\sin\\omega t = &\\tilde{C} \\cos\\omega t \\cos\\Phi \\\\\n                                + &\\tilde{C} \\sin\\omega t \\sin\\Phi \\\\\n                                + &\\sin\\omega t \\cos\\Phi  \\\\\n                                - &\\cos\\omega t \\sin\\Phi\n\\end{align*}\n\nNow gathering together all terms in \\cos\\omega t and \\sin\\omega t:\\cos\\omega t \\left( \\tilde{C} \\cos\\Phi - \\sin\\Phi \\right) = \\sin\\omega t \\left( \\frac{Q^*}{B~T^*} - \\tilde{C} \\sin\\Phi - \\cos\\Phi \\right)\n\n","type":"content","url":"/courseware/seasonal-cycle#non-dimensional-heat-capacity-parameter","position":13},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Solving for the phase shift","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#solving-for-the-phase-shift","position":14},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Solving for the phase shift","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"The equation above must be true for all t, which means that sum of terms in each set of parentheses must be zero.\n\nWe therefore have an equation for the phase shift\\tilde{C} \\cos\\Phi - \\sin\\Phi = 0\n\nwhich means that the phase shift is\\Phi = \\arctan \\tilde{C}\n\n","type":"content","url":"/courseware/seasonal-cycle#solving-for-the-phase-shift","position":15},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Solving for the amplitude","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#solving-for-the-amplitude","position":16},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Solving for the amplitude","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"The other equation is\\frac{Q^*}{B~T^*} - \\tilde{C} \\sin\\Phi - \\cos\\Phi = 0\n\nor\\frac{Q^*}{B~T^*} - \\cos\\Phi \\left( 1+ \\tilde{C}^2 \\right)  = 0\n\nwhich we solve for T^* to getT^* = \\frac{Q^*}{B} \\frac{1}{\\left( 1+ \\tilde{C}^2 \\right) \\cos\\left(\\arctan \\tilde{C} \\right) }\n\n","type":"content","url":"/courseware/seasonal-cycle#solving-for-the-amplitude","position":17},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Shallow water limit:","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#shallow-water-limit","position":18},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Shallow water limit:","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"In low heat capacity limit,\\tilde{C} << 1\n\nthe phase shift is\\Phi \\approx \\tilde{C}\n\nand the amplitude isT^* = \\frac{Q^*}{B} \\left( 1 - \\tilde{C} \\right)\n\nNotice that for a system with very little heat capacity, the phase shift approaches zero and the amplitude approaches its maximum value T^* = \\frac{Q^*}{B}.\n\nIn the shallow water limit the temperature maximum will occur just slightly after the insolation maximum, and the seasonal temperature variations will be large.\n\n","type":"content","url":"/courseware/seasonal-cycle#shallow-water-limit","position":19},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Deep water limit:","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#deep-water-limit","position":20},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Deep water limit:","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Suppose instead we have an infinitely large heat reservoir (e.g. very deep ocean mixed layer).\n\nIn the limit \\tilde{C} \\rightarrow \\infty, the phase shift tends toward\\Phi \\rightarrow \\frac{\\pi}{2}\n\nso the warming is nearly perfectly out of phase with the insolation -- peak temperature would occur at fall equinox.\n\nBut the amplitude in this limit is very small!T^* \\rightarrow 0\n\n","type":"content","url":"/courseware/seasonal-cycle#deep-water-limit","position":21},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#what-values-of-tilde-c-are-realistic","position":22},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"We need to evaluate\\tilde{C} = \\frac{C~\\omega}{B}\n\nfor reasonable values of C and B.\n\nB is the longwave radiative feedback in our system: a measure of how efficiently a warm anomaly is radiated away to space. We have previously chosen B = 2 W m^{-2} K^{-1}.\n\nC is the heat capacity of the whole column, a number in J m^{-2} K^{-1}.\n\n","type":"content","url":"/courseware/seasonal-cycle#what-values-of-tilde-c-are-realistic","position":23},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"Heat capacity of the atmosphere","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl4","url":"/courseware/seasonal-cycle#heat-capacity-of-the-atmosphere","position":24},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"Heat capacity of the atmosphere","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Integrating from the surface to the top of the atmosphere, we can writeC_a = \\int_0^{p_s} c_p \\frac{dp}{g}\n\nwhere c_p = 10^3 J kg^{-1} K^{-1} is the specific heat at constant pressure for a unit mass of air, and dp/g is a mass element.\n\nThis gives C_a \\approx 10^7 J m^{-2} K^{-1}.\n\n","type":"content","url":"/courseware/seasonal-cycle#heat-capacity-of-the-atmosphere","position":25},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"Heat capacity of a water surface","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl4","url":"/courseware/seasonal-cycle#heat-capacity-of-a-water-surface","position":26},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"Heat capacity of a water surface","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"As we wrote \n\nback in the notes on Modeling the Global Energy Budget, the heat capacity for a well-mixed column of water isC_w = c_w \\rho_w H_w\n\nwhere\n\nc_w = 4 \\times 10^3 J kg^{-1} °C^{-1} is the specific heat of water,\n\n\\rho_w = 10^3 kg m^{-3} is the density of water, and\n\nH_w  is the depth of the water column\n\nThe heat capacity of the entire atmosphere is thus equivalent to 2.5 meters of water.\n\n","type":"content","url":"/courseware/seasonal-cycle#heat-capacity-of-a-water-surface","position":27},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"\\tilde{C} for a dry land surface","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl4","url":"/courseware/seasonal-cycle#id-tilde-c-for-a-dry-land-surface","position":28},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"\\tilde{C} for a dry land surface","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"A dry land surface has very little heat capacity and C is actually dominated by the atmosphere. So we can take C = C_a = 10^7 J m^{-2} K^{-1} as a reasonable lower bound.\n\nSo our lower bound on \\tilde{C} is thus, taking B = 2 W m^{-2} K^{-1} and \\omega = 2\\pi ~ \\text{year}^{-1} = 2 \\times 10^{-7} \\text{ s}^{-1}:\\tilde{C} = 1\n\n","type":"content","url":"/courseware/seasonal-cycle#id-tilde-c-for-a-dry-land-surface","position":29},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"\\tilde{C} for a 100 meter ocean mixed layer","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl4","url":"/courseware/seasonal-cycle#id-tilde-c-for-a-100-meter-ocean-mixed-layer","position":30},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl4":"\\tilde{C} for a 100 meter ocean mixed layer","lvl3":"What values of \\tilde{C} are realistic?","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Setting H_w = 100 m gives C_w = 4 \\times 10^8 J m^{-2} K^{-1}. Then our non-dimensional parameter is\\tilde{C} = 40\n\n","type":"content","url":"/courseware/seasonal-cycle#id-tilde-c-for-a-100-meter-ocean-mixed-layer","position":31},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The upshot: \\tilde{C} is closer to the deep water limit","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#the-upshot-tilde-c-is-closer-to-the-deep-water-limit","position":32},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The upshot: \\tilde{C} is closer to the deep water limit","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Even for a dry land surface, \\tilde{C} is not small. This means that there is always going to be a substantial phase shift in the timing of the peak temperatures, and a reduction in the seasonal amplitude.\n\n","type":"content","url":"/courseware/seasonal-cycle#the-upshot-tilde-c-is-closer-to-the-deep-water-limit","position":33},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Plot the full solution for a range of water depths","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#plot-the-full-solution-for-a-range-of-water-depths","position":34},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Plot the full solution for a range of water depths","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"\n\nomega = 2*np.pi / const.seconds_per_year\nomega\n\nB = 2.\nHw = np.linspace(0., 100.)\nCtilde = const.cw * const.rho_w * Hw * omega / B\namp = 1./((Ctilde**2+1)*np.cos(np.arctan(Ctilde)))\nPhi = np.arctan(Ctilde)\n\ncolor1 = 'b'\ncolor2 = 'r'\n\nfig = plt.figure(figsize=(8,6))\nax1 = fig.add_subplot(111)\nax1.plot(Hw, amp, color=color1)\nax1.set_xlabel('water depth (m)', fontsize=14)\nax1.set_ylabel('Seasonal amplitude ($Q^* / B$)', fontsize=14,  color=color1)\nfor tl in ax1.get_yticklabels():\n    tl.set_color(color1)\nax2 = ax1.twinx()\nax2.plot(Hw, np.rad2deg(Phi), color=color2)\nax2.set_ylabel('Seasonal phase shift (degrees)', fontsize=14, color=color2)\nfor tl in ax2.get_yticklabels():\n    tl.set_color(color2)\nax1.set_title('Dependence of seasonal cycle phase and amplitude on water depth', fontsize=16)\nax1.grid()\n\nax1.plot([2.5, 2.5], [0, 1], 'k-');\n\nThe blue line shows the amplitude of the seasonal cycle of temperature, expressed as a fraction of its maximum value \\frac{Q^*}{B} (the value that would occur if the system had zero heat capacity so that temperatures were always in radiative equilibrium with the instantaneous insolation).\n\nThe red line shows the phase lag (in degrees) of the temperature cycle relative to the insolation cycle.\n\nThe vertical black line indicates 2.5 meters of water, which is the heat capacity of the atmosphere and thus our effective lower bound on total column heat capacity.\n\n","type":"content","url":"/courseware/seasonal-cycle#plot-the-full-solution-for-a-range-of-water-depths","position":35},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The seasonal phase shift","lvl2":"2. Analytical toy model of the seasonal cycle"},"type":"lvl3","url":"/courseware/seasonal-cycle#the-seasonal-phase-shift","position":36},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"The seasonal phase shift","lvl2":"2. Analytical toy model of the seasonal cycle"},"content":"Even for the driest surfaces the phase shift is about 45º and the amplitude is half of its theoretical maximum. For most wet surfaces the cycle is damped out and delayed further.\n\nOf course we are already familiar with this phase shift from our day-to-day experience. Our calendar says that summer “begins” at the solstice and last until the equinox.\n\nfig, ax = plt.subplots()\nyears = np.linspace(0,2)\nHarray = np.array([0., 2.5, 10., 50.])\nfor Hw in Harray:\n    Ctilde = const.cw * const.rho_w * Hw * omega / B\n    Phi = np.arctan(Ctilde)\n    ax.plot(years, np.sin(2*np.pi*years - Phi)/np.cos(Phi)/(1+Ctilde**2), label=Hw)\nax.set_xlabel('Years', fontsize=14)\nax.set_ylabel('Seasonal amplitude ($Q^* / B$)', fontsize=14)\nax.set_title('Solution of toy seasonal model for several different water depths', fontsize=14)\nax.legend(); ax.grid()\n\nThe blue curve in this figure is in phase with the insolation.\n\n","type":"content","url":"/courseware/seasonal-cycle#the-seasonal-phase-shift","position":37},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"3. Exploring the amplitude of the seasonal cycle with an EBM"},"type":"lvl2","url":"/courseware/seasonal-cycle#id-3-exploring-the-amplitude-of-the-seasonal-cycle-with-an-ebm","position":38},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"3. Exploring the amplitude of the seasonal cycle with an EBM"},"content":"\n\nSomething important is missing from this toy model: heat transport!\n\nThe amplitude of the seasonal cycle of insolation increases toward the poles, but the seasonal temperature variations are partly mitigated by heat transport from lower, warmer latitudes.\n\nOur 1D diffusive EBM is the appropriate tool for exploring this further.\n\nWe are looking at the 1D (zonally averaged) energy balance model with diffusive heat transport. The equation is\n\nC \\frac{\\partial T_s}{\\partial t} = (1-\\alpha) ~ Q - \\left( A + B~T_s \\right) + \\frac{D}{\\cos⁡\\phi } \\frac{\\partial }{\\partial \\phi} \\left(   \\cos⁡\\phi  ~ \\frac{\\partial T_s}{\\partial \\phi} \\right)\n\nwith the albedo given by\\alpha(\\phi) = \\alpha_0 + \\alpha_2 P_2(\\sin\\phi)\n\nand we will useclimlab.EBM_seasonal\n\nto solve this model numerically.\n\nOne handy feature of climlab process code: the function integrate_years() automatically calculates the time averaged temperature. So if we run it for exactly one year, we get the annual mean temperature (and many other diagnostics) saved in the dictionary timeave.\n\nWe will look at the seasonal cycle of temperature in three different models with different heat capacities (which we express through an equivalent depth of water in meters).\n\nAll other parameters will be \n\nas chosen in the notes on the one-dimensional energy balance model (which focussed on tuning the EBM to the annual mean energy budget).\n\n#  for convenience, set up a dictionary with our reference parameters\nparam = {'A':210, 'B':2, 'a0':0.354, 'a2':0.25, 'D':0.6}\nparam\n\n#  We can pass the entire dictionary as keyword arguments using the ** notation\nmodel1 = climlab.EBM_seasonal(**param, name='Seasonal EBM')\nmodel1\n\nNotice that this model has an insolation subprocess called DailyInsolation, rather than AnnualMeanInsolation. These should be fairly self-explanatory.\n\n#  We will try three different water depths\nwater_depths = np.array([2., 10., 50.])\n\nnum_depths = water_depths.size\nTann = np.empty( [model1.lat.size, num_depths] )\nmodels = []\n\nfor n in range(num_depths):\n    ebm = climlab.EBM_seasonal(water_depth=water_depths[n], **param)\n    models.append(ebm)\n    models[n].integrate_years(20., verbose=False )\n    models[n].integrate_years(1., verbose=False)\n    Tann[:,n] = np.squeeze(models[n].timeave['Ts'])\n\nAll models should have the same annual mean temperature:\n\nlat = model1.lat\nfig, ax = plt.subplots()\nax.plot(lat, Tann)\nax.set_xlim(-90,90)\nax.set_xlabel('Latitude')\nax.set_ylabel('Temperature (degC)')\nax.set_title('Annual mean temperature in the EBM')\nax.legend( water_depths )\n\nThere is no automatic function in the climlab code to keep track of minimum and maximum temperatures (though we might add that in the future!)\n\nInstead we’ll step through one year “by hand” and save all the temperatures.\n\nnum_steps_per_year = int(model1.time['num_steps_per_year'])\nTyear = np.empty((lat.size, num_steps_per_year, num_depths))\nfor n in range(num_depths):\n    for m in range(num_steps_per_year):\n        models[n].step_forward()\n        Tyear[:,m,n] = np.squeeze(models[n].Ts)\n\nMake a figure to compare the observed zonal mean seasonal temperature cycle to what we get from the EBM with different heat capacities:\n\nfig = plt.figure( figsize=(16,10) )\n\nax = fig.add_subplot(2,num_depths,2)\ncax = ax.contourf(np.arange(12)+0.5, lat_ncep, \n                  Ts_ncep.mean(dim='lon').transpose(), \n                  levels=clevels, cmap=plt.cm.seismic, \n                  vmin=Tmin, vmax=Tmax)\nax.set_xlabel('Month')\nax.set_ylabel('Latitude')\ncbar = plt.colorbar(cax)\nax.set_title('Zonal mean surface temperature - observed (degC)', fontsize=20)\n\nfor n in range(num_depths):\n    ax = fig.add_subplot(2,num_depths,num_depths+n+1)\n    cax = ax.contourf(4*np.arange(num_steps_per_year),\n                      lat, Tyear[:,:,n], levels=clevels, \n                      cmap=plt.cm.seismic, vmin=Tmin, vmax=Tmax)\n    cbar1 = plt.colorbar(cax)\n    ax.set_title('water depth = %.0f m' %models[n].param['water_depth'], fontsize=20 )\n    ax.set_xlabel('Days of year', fontsize=14 )\n    ax.set_ylabel('Latitude', fontsize=14 )\n\nWhich one looks more realistic? Depends a bit on where you look. But overall, the observed seasonal cycle matches the 10 meter case best. The effective heat capacity governing the seasonal cycle of the zonal mean temperature is closer to 10 meters of water than to either 2 or 50 meters.\n\n","type":"content","url":"/courseware/seasonal-cycle#id-3-exploring-the-amplitude-of-the-seasonal-cycle-with-an-ebm","position":39},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Making an animation of the EBM solutions","lvl2":"3. Exploring the amplitude of the seasonal cycle with an EBM"},"type":"lvl3","url":"/courseware/seasonal-cycle#making-an-animation-of-the-ebm-solutions","position":40},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl3":"Making an animation of the EBM solutions","lvl2":"3. Exploring the amplitude of the seasonal cycle with an EBM"},"content":"Let’s animate the seasonal cycle of insolation and temperature in our models with the three different water depths\n\ndef initial_figure(models):\n    fig, axes = plt.subplots(1,len(models), figsize=(15,4))\n    lines = []\n    for n in range(len(models)):\n        ax = axes[n]\n        c1 = 'b'\n        Tsline = ax.plot(lat, models[n].Ts, c1)[0]\n        ax.set_title('water depth = %.0f m' %models[n].param['water_depth'], fontsize=20 )\n        ax.set_xlabel('Latitude', fontsize=14 )\n        if n == 0:\n            ax.set_ylabel('Temperature', fontsize=14, color=c1 )\n        ax.set_xlim([-90,90])\n        ax.set_ylim([-60,60])\n        for tl in ax.get_yticklabels():\n            tl.set_color(c1)\n        ax.grid()\n\n        c2 = 'r'\n        ax2 = ax.twinx()\n        Qline = ax2.plot(lat, models[n].insolation, c2)[0]\n        if n == 2:\n            ax2.set_ylabel('Insolation (W m$^{-2}$)', color=c2, fontsize=14)\n        for tl in ax2.get_yticklabels():\n            tl.set_color(c2)\n        ax2.set_xlim([-90,90])\n        ax2.set_ylim([0,600])\n        lines.append([Tsline, Qline])\n    return fig, axes, lines\n\ndef animate(step, models, lines):\n    for n, ebm in enumerate(models):\n        ebm.step_forward()\n        #  The rest of this is just updating the plot\n        lines[n][0].set_ydata(ebm.Ts)\n        lines[n][1].set_ydata(ebm.insolation)\n    return lines\n\n#  Plot initial data\nfig, axes, lines = initial_figure(models)\n\n#  Some imports needed to make and display animations\nfrom IPython.display import HTML\nfrom matplotlib import animation\n\nnum_steps = int(models[0].time['num_steps_per_year'])\nani = animation.FuncAnimation(fig, animate, \n        frames=num_steps,\n        interval=80,\n        fargs=(models, lines),\n        )\n\nHTML(ani.to_html5_video())\n\n","type":"content","url":"/courseware/seasonal-cycle#making-an-animation-of-the-ebm-solutions","position":41},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"4. The seasonal cycle for a planet with 90º obliquity"},"type":"lvl2","url":"/courseware/seasonal-cycle#id-4-the-seasonal-cycle-for-a-planet-with-90-obliquity","position":42},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"4. The seasonal cycle for a planet with 90º obliquity"},"content":"\n\nThe EBM code uses our familiar insolation.py code to calculate insolation, and therefore it’s easy to set up a model with different orbital parameters. Here is an example with very different orbital parameters: 90º obliquity. We looked at the distribution of insolation by latitude and season for this type of planet in the last homework.\n\norb_highobl = {'ecc':0., \n               'obliquity':90., \n               'long_peri':0.}\nprint( orb_highobl)\nmodel_highobl = climlab.EBM_seasonal(orb=orb_highobl, **param)\nprint( model_highobl.param['orb'])\n\nRepeat the same procedure to calculate and store temperature throughout one year, after letting the models run out to equilibrium.\n\nTann_highobl = np.empty( [lat.size, num_depths] )\nmodels_highobl = []\n\nfor n in range(num_depths):\n    model = climlab.EBM_seasonal(water_depth=water_depths[n], \n                                 orb=orb_highobl, \n                                 **param)\n    models_highobl.append(model)\n    models_highobl[n].integrate_years(40., verbose=False )\n    models_highobl[n].integrate_years(1., verbose=False)\n    Tann_highobl[:,n] = np.squeeze(models_highobl[n].timeave['Ts'])\n\nTyear_highobl = np.empty([lat.size, num_steps_per_year, num_depths])\nfor n in range(num_depths):\n    for m in range(num_steps_per_year):\n        models_highobl[n].step_forward()\n        Tyear_highobl[:,m,n] = np.squeeze(models_highobl[n].Ts)\n\nAnd plot the seasonal temperature cycle same as we did above:\n\nfig = plt.figure( figsize=(16,5) )\nTmax_highobl = 125; Tmin_highobl = -Tmax_highobl; delT_highobl = 10\nclevels_highobl = np.arange(Tmin_highobl, Tmax_highobl+delT_highobl, delT_highobl)\nfor n in range(num_depths):\n    ax = fig.add_subplot(1,num_depths,n+1)\n    cax = ax.contourf( 4*np.arange(num_steps_per_year), lat, Tyear_highobl[:,:,n], \n        levels=clevels_highobl, cmap=plt.cm.seismic, vmin=Tmin_highobl, vmax=Tmax_highobl )\n    cbar1 = plt.colorbar(cax)\n    ax.set_title('water depth = %.0f m' %models[n].param['water_depth'], fontsize=20 )\n    ax.set_xlabel('Days of year', fontsize=14 )\n    ax.set_ylabel('Latitude', fontsize=14 )\n\nNote that the temperature range is much larger than for the Earth-like case above (but same contour interval, 10 degC).\n\nWhy is the temperature so uniform in the north-south direction with 50 meters of water?\n\nTo see the reason, let’s plot the annual mean insolation at 90º obliquity, alongside the present-day annual mean insolation:\n\nlat2 = np.linspace(-90, 90, 181)\ndays = np.linspace(1.,50.)/50 * const.days_per_year\nQ_present = climlab.solar.insolation.daily_insolation( lat2, days )\nQ_highobl = climlab.solar.insolation.daily_insolation( lat2, days, orb_highobl )\nQ_present_ann = np.mean( Q_present, axis=1 )\nQ_highobl_ann = np.mean( Q_highobl, axis=1 )\n\nfig, ax = plt.subplots()\nax.plot( lat2, Q_present_ann, label='Earth' )\nax.plot( lat2, Q_highobl_ann, label='90deg obliquity' )\nax.grid()\nax.legend(loc='lower center')\nax.set_xlabel('Latitude', fontsize=14 )\nax.set_ylabel('W m$^{-2}$', fontsize=14 )\nax.set_title('Annual mean insolation for two different obliquities', fontsize=16)\n\nThough this is a bit misleading, because our model prescribes an increase in albedo from the equator to the pole. So the absorbed shortwave gradients look even more different.\n\nIf you are interested in how ice-albedo feedback might work on a high-obliquity planet with a cold equator, then I suggest you take a look at this paper \n\nRose et al., 2017:\n\nRose, Cronin and Bitz (2017): Ice Caps and Ice Belts: The Effects of Obliquity on Ice−Albedo Feedback, The Astrophysical Journal 846, doi:10.3847/1538-4357/aa8306\n\n","type":"content","url":"/courseware/seasonal-cycle#id-4-the-seasonal-cycle-for-a-planet-with-90-obliquity","position":43},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"Credits"},"type":"lvl2","url":"/courseware/seasonal-cycle#credits","position":44},{"hierarchy":{"lvl1":"Modeling the seasonal cycle of surface temperature","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/seasonal-cycle#credits","position":45},{"hierarchy":{"lvl1":"Climate sensitivity and feedback"},"type":"lvl1","url":"/courseware/sensitivity-feedback","position":0},{"hierarchy":{"lvl1":"Climate sensitivity and feedback"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/sensitivity-feedback","position":1},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"1. Radiative forcing"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-1-radiative-forcing","position":2},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"1. Radiative forcing"},"content":"","type":"content","url":"/courseware/sensitivity-feedback#id-1-radiative-forcing","position":3},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"The concept","lvl2":"1. Radiative forcing"},"type":"lvl3","url":"/courseware/sensitivity-feedback#the-concept","position":4},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"The concept","lvl2":"1. Radiative forcing"},"content":"We’ve seen the concept of Radiative Forcing before. It is the short-term change in the TOA energy budget when we add a forcing agent to the climate system, before the surface has a chance to warm up.\n\nThe standard reference forcing is a doubling of atmospheric CO_2.\n\nThe radiative forcing is a number in W m^{-2}, defined so that it is positive if the system is gaining energy:\\Delta R = \\left(\\text{ASR}_{2xCO2} - \\text{OLR}_{2xCO2}\\right) - \\left(\\text{ASR}_{ref} - \\text{OLR}_{ref}\\right)\n\n\\Delta R is a measure of the rate at which energy begins to accumulate in the climate system after an abrupt increase in greenhouse gases, but before any change in climate (i.e. temperature).\n\n","type":"content","url":"/courseware/sensitivity-feedback#the-concept","position":5},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Setting up a single-column Radiative-Convective model","lvl2":"1. Radiative forcing"},"type":"lvl3","url":"/courseware/sensitivity-feedback#setting-up-a-single-column-radiative-convective-model","position":6},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Setting up a single-column Radiative-Convective model","lvl2":"1. Radiative forcing"},"content":"\n\nLet’s set up a single-column Radiative-Convective model and look carefully at what happens when we add extra CO_2 to the column.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom metpy.plots import SkewT\nimport climlab\n\n#  This code is used just to create the skew-T plot of global, annual mean air temperature\nncep_url = \"http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/\"\ntime_coder = xr.coders.CFDatetimeCoder(use_cftime=True)\nncep_air = xr.open_dataset( ncep_url + \"pressure/air.mon.1981-2010.ltm.nc\", decode_times=time_coder)\n#  Take global, annual average \ncoslat = np.cos(np.deg2rad(ncep_air.lat))\nweight = coslat / coslat.mean(dim='lat')\nTglobal = (ncep_air.air * weight).mean(dim=('lat','lon','time'))\n\n#  Resuable function to plot the temperature data on a Skew-T chart\ndef make_skewT():\n    fig = plt.figure(figsize=(9, 9))\n    skew = SkewT(fig, rotation=30)\n    skew.plot(Tglobal.level, Tglobal, color='black', linestyle='-', linewidth=2, label='Observations')\n    skew.ax.set_ylim(1050, 10)\n    skew.ax.set_xlim(-90, 45)\n    # Add the relevant special lines\n    skew.plot_dry_adiabats(linewidth=0.5)\n    skew.plot_moist_adiabats(linewidth=0.5)\n    #skew.plot_mixing_lines()\n    skew.ax.legend()\n    skew.ax.set_xlabel('Temperature (degC)', fontsize=14)\n    skew.ax.set_ylabel('Pressure (hPa)', fontsize=14)\n    return skew\n\n#  and a function to add extra profiles to this chart\ndef add_profile(skew, model, linestyle='-', color=None):\n    line = skew.plot(model.lev, model.Tatm - climlab.constants.tempCtoK,\n             label=model.name, linewidth=2)[0]\n    skew.plot(1000, model.Ts - climlab.constants.tempCtoK, 'o', \n              markersize=8, color=line.get_color())\n    skew.ax.legend()\n\n# Get the water vapor data from CESM output\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\n# Take global, annual average of the specific humidity\nweight_factor = atm_control.gw / atm_control.gw.mean(dim='lat')\nQglobal = (atm_control.Q * weight_factor).mean(dim=('lat','lon','time'))\n\n#  Make a model on same vertical domain as the GCM\nmystate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\n#  Build the radiation model -- just like we already did\nrad = climlab.radiation.RRTMG(name='Radiation',\n                              state=mystate, \n                              specific_humidity=Qglobal.values,\n                              timestep = climlab.constants.seconds_per_day,\n                              albedo = 0.25,  # surface albedo, tuned to give reasonable ASR for reference cloud-free model\n                             )\n#  Now create the convection model\nconv = climlab.convection.ConvectiveAdjustment(name='Convection',\n                                               state=mystate,\n                                               adj_lapse_rate=6.5,\n                                               timestep=rad.timestep,\n                                              )\n#  Here is where we build the model by coupling together the two components\nrcm = climlab.couple([rad, conv], name='Radiative-Convective Model')\n\nrcm\n\nFirst let’s take a look at the default CO_2 amount in our reference model:\n\nrcm.subprocess['Radiation'].absorber_vmr['CO2']\n\nThat’s 348 parts per million (ppm). Our atmosphere was at this level around the late 1980s.\n\nBefore we can look at the effects of a CO_2 perturbation we need to integrate our reference model out to equilibrium:\n\nrcm.integrate_years(5)\n\nAre we close to energy balance?\n\nrcm.ASR - rcm.OLR\n\n","type":"content","url":"/courseware/sensitivity-feedback#setting-up-a-single-column-radiative-convective-model","position":7},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"A perturbed CO2 calculation in the RCM","lvl2":"1. Radiative forcing"},"type":"lvl3","url":"/courseware/sensitivity-feedback#a-perturbed-co2-calculation-in-the-rcm","position":8},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"A perturbed CO2 calculation in the RCM","lvl2":"1. Radiative forcing"},"content":"\n\n# Make an exact clone with same temperatures\nrcm_2xCO2 = climlab.process_like(rcm)\nrcm_2xCO2.name = 'Radiative-Convective Model (2xCO2 initial)'\n\n#  Check to see that we indeed have the same CO2 amount\nrcm_2xCO2.subprocess['Radiation'].absorber_vmr['CO2']\n\n#  Now double it!\nrcm_2xCO2.subprocess['Radiation'].absorber_vmr['CO2'] *= 2\n\n#  and verify\nrcm_2xCO2.subprocess['Radiation'].absorber_vmr['CO2']\n\n","type":"content","url":"/courseware/sensitivity-feedback#a-perturbed-co2-calculation-in-the-rcm","position":9},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate instantaneous radiative forcing","lvl2":"1. Radiative forcing"},"type":"lvl3","url":"/courseware/sensitivity-feedback#calculate-instantaneous-radiative-forcing","position":10},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate instantaneous radiative forcing","lvl2":"1. Radiative forcing"},"content":"\n\nThe simplest measure of radiative forcing is the instantaneous change in the energy budget before the temperature have a chance to adjust.\n\nTo get this we need to call the compute_diagnostics method, but not any forward timestep.\n\nrcm_2xCO2.compute_diagnostics()\n\nNow take a look at the changes in the SW and LW budgets:\n\nrcm_2xCO2.ASR - rcm.ASR\n\nrcm_2xCO2.OLR - rcm.OLR\n\nSo what is instantaneous radiative forcing for the doubling of CO2?\n\nDeltaR_instant = (rcm_2xCO2.ASR - rcm_2xCO2.OLR) - (rcm.ASR - rcm.OLR)\nDeltaR_instant\n\nThe radiative forcing for a doubling of CO2 in this model is 2.18 W m^{-2}.\n\nAs we can see above, almost all of the radiative forcing appears in the longwave. We have made the atmosphere more optically thick by adding CO_2.\n\nThink about this the same way we increased the absorptivity / emissivity parameter \\epsilon in the simple grey-gas model.\n\n","type":"content","url":"/courseware/sensitivity-feedback#calculate-instantaneous-radiative-forcing","position":11},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Statosphere-adjusted radiative forcing","lvl2":"1. Radiative forcing"},"type":"lvl3","url":"/courseware/sensitivity-feedback#statosphere-adjusted-radiative-forcing","position":12},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Statosphere-adjusted radiative forcing","lvl2":"1. Radiative forcing"},"content":"\n\nThe point of measuring radiative forcing is that it should give us some information about how much global warming we should expect from a particular forcing agent.\n\nWe will need to use our model to quantify the eventual temperature change associated with this forcing.\n\nIt turns out, for reasons we won’t get into here, that a more useful measure of the global warming impact of a forcing agent comes from thinking about changes in radiative flux at the tropopause rather than the Top of Atmosphere.\n\nThe idea here is that we will let the stratosphere adjust to the extra CO_2 while holding the troposphere and surface temperatures fixed.\n\nIn this model levels 0 through 12 are in the statosphere; levels 13 and larger are in the troposphere:\n\nrcm.lev[13:]\n\nSo to compute stratosphere-adjusted forcing, we’ll timestep the model, but continually reset the temperatures to their reference values below 226 hPa:\n\nrcm_2xCO2_strat = climlab.process_like(rcm_2xCO2)\nrcm_2xCO2_strat.name = 'Radiative-Convective Model (2xCO2 stratosphere-adjusted)'\nfor n in range(1000):\n    rcm_2xCO2_strat.step_forward()\n    # hold tropospheric and surface temperatures fixed\n    rcm_2xCO2_strat.Tatm[13:] = rcm.Tatm[13:]\n    rcm_2xCO2_strat.Ts[:] = rcm.Ts[:]\n\nNow we can compute the stratosphere-adjusted radiative forcing for the doubling of CO2:\n\nDeltaR = (rcm_2xCO2_strat.ASR - rcm_2xCO2_strat.OLR) - (rcm.ASR - rcm.OLR)\nDeltaR\n\nThe result is about 4.3 W m^{-2}.\n\n","type":"content","url":"/courseware/sensitivity-feedback#statosphere-adjusted-radiative-forcing","position":13},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-2-equilibrium-climate-sensitivity-without-feedback","position":14},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"content":"\n\nWe now ask the question: How much warming will we get (eventually) in response to this positive radiative forcing?\n\n","type":"content","url":"/courseware/sensitivity-feedback#id-2-equilibrium-climate-sensitivity-without-feedback","position":15},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Definition","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"type":"lvl3","url":"/courseware/sensitivity-feedback#definition","position":16},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Definition","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"content":"We define the Equilibrium Climate Sensitivity (denoted ECS or \\Delta T_{2xCO2}):\n\nThe global mean surface warming necessary to balance the planetary energy budget after a doubling of atmospheric CO_2.\n\n","type":"content","url":"/courseware/sensitivity-feedback#definition","position":17},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Climate change in the single-column RCM","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"type":"lvl3","url":"/courseware/sensitivity-feedback#climate-change-in-the-single-column-rcm","position":18},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Climate change in the single-column RCM","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"content":"We can go ahead and calculate ECS in our single-column model:\n\nrcm_2xCO2_eq = climlab.process_like(rcm_2xCO2_strat)\nrcm_2xCO2_eq.name = 'Radiative-Convective Model (2xCO2 equilibrium)'\nrcm_2xCO2_eq.integrate_years(5)\n\n# are we close to equilibrium?\nrcm_2xCO2_eq.ASR - rcm_2xCO2_eq.OLR\n\nLet’s follow what we have done before and plot the results on a nice Skew-T:\n\nskew = make_skewT()\nadd_profile(skew, rcm)\nadd_profile(skew, rcm_2xCO2_strat)\nadd_profile(skew, rcm_2xCO2_eq)\n\nWhat do you see here? What has changed?\n\n","type":"content","url":"/courseware/sensitivity-feedback#climate-change-in-the-single-column-rcm","position":19},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate the ECS","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"type":"lvl3","url":"/courseware/sensitivity-feedback#calculate-the-ecs","position":20},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate the ECS","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"content":"It is just the difference in surface temperature:\n\nECS_nofeedback = rcm_2xCO2_eq.Ts - rcm.Ts\nECS_nofeedback\n\nDoubling CO_2 in this model causes about 1.3 K of warming at equilibrium.\n\nWhat about the energy budget?\n\nRemember that we have let the model warm up to its new equilibrium!\n\nIf we look at the differences between the two equilibrium states (before and after doubling CO_2), we find only very small and offsetting changes in SW and LW:\n\nrcm_2xCO2_eq.OLR - rcm.OLR\n\nrcm_2xCO2_eq.ASR - rcm.ASR\n\nThe 1.3 K sensitivity we’ve just calculated is the warming that we would have if there were no other changes (feedbacks) in response to the CO_2 induced warming!\n\n","type":"content","url":"/courseware/sensitivity-feedback#calculate-the-ecs","position":21},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"The no-feedback response","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"type":"lvl3","url":"/courseware/sensitivity-feedback#the-no-feedback-response","position":22},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"The no-feedback response","lvl2":"2. Equilibrium climate sensitivity (without feedback)"},"content":"\n\nWe have just calculated an equilibrium warming \\Delta T_0 (in K) resulting from a radiative forcing \\Delta R (in W m^{-2}) for a model without feedback.\n\nLet’s define the no-feedback climate response parameter \\lambda_0 as\\lambda_0 = \\frac{\\Delta R}{\\Delta T_0 }\n\nWith the numbers we came up with above,\n\nlambda0 = DeltaR / ECS_nofeedback\nlambda0\n\nThe no-feedback climate response parameter is \\lambda_0 = 3.3 W m^{-2} K^{-1}.\n\nWhat are some important processes that our model has neglected?\n\n","type":"content","url":"/courseware/sensitivity-feedback#the-no-feedback-response","position":23},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"3. The feedback concept"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-3-the-feedback-concept","position":24},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"3. The feedback concept"},"content":"\n\nA concept borrowed from electrical engineering. You have all heard or used the term before, but we’ll try take a more precise approach today.\n\nA feedback occurs when a portion of the output from the action of a system is added to the input and subsequently alters the output:\n\n\n\nThe result of a loop system can either be amplification or dampening of the process, depending on the sign of the gain in the loop, which we will denote f.\n\nWe will call amplifying feedbacks positive (f>0) and damping feedbacks negative (f<0).\n\nWe can think of the “process” here as the entire climate system, which contains many examples of both positive and negative feedback.\n\n","type":"content","url":"/courseware/sensitivity-feedback#id-3-the-feedback-concept","position":25},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Example: the water vapor feedback","lvl2":"3. The feedback concept"},"type":"lvl3","url":"/courseware/sensitivity-feedback#example-the-water-vapor-feedback","position":26},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Example: the water vapor feedback","lvl2":"3. The feedback concept"},"content":"The capacity of the atmosphere to hold water vapor (saturation specific humidity) increases exponentially with temperature. Warming is thus accompanied by moistening (more water vapor), which leads to more warming due to the enhanced water vapor greenhouse effect.\n\nPositive or negative feedback?\n\n","type":"content","url":"/courseware/sensitivity-feedback#example-the-water-vapor-feedback","position":27},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Example: the ice-albedo feedback","lvl2":"3. The feedback concept"},"type":"lvl3","url":"/courseware/sensitivity-feedback#example-the-ice-albedo-feedback","position":28},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Example: the ice-albedo feedback","lvl2":"3. The feedback concept"},"content":"Colder temperatures lead to expansion of the areas covered by ice and snow, which tend to be more reflective than water and vegetation. This causes a reduction in the absorbed solar radiation, which leads to more cooling.\n\nPositive or negative feedback?\n\nMake sure it’s clear that the sign of the feedback is the same whether we are talking about warming or cooling.\n\n","type":"content","url":"/courseware/sensitivity-feedback#example-the-ice-albedo-feedback","position":29},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"4. Climate feedback: some definitions"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-4-climate-feedback-some-definitions","position":30},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"4. Climate feedback: some definitions"},"content":"\n\nWe start with an initial radiative forcing , and get a response\\Delta T_0 = \\frac{\\Delta R}{\\lambda_0}\n\nNow consider what happens in the presence of a feedback process. For a concrete example, let’s take the water vapor feedback. For every degree of warming, there is an additional increase in the greenhouse effect, and thus additional energy added to the system.\n\nLet’s denote this extra energy asf \\lambda_0 \\Delta T_0\n\nwhere f is the feedback amount, a number that represents what fraction of the output gets added back to the input. f must be between -\\infty and +1.\n\nFor the example of the water vapor feedback, f is positive (between 0 and +1) – the process adds extra energy to the original radiative forcing.\n\nThe amount of energy in the full “input” is now\\Delta R + f \\lambda_0 \\Delta T_0\n\nor(1+f) \\lambda_0 \\Delta T_0\n\nBut now we need to consider the next loop. A fraction f of the additional energy is also added to the input, giving us(1+f+f^2) \\lambda_0 \\Delta T_0\n\nand we can go round and round, leading to the infinite series(1+f+f^2+f^3+ ...) \\lambda_0 \\Delta T_0 = \\lambda_0 \\Delta T_0 \\sum_{n=0}^{\\infty} f^n\n\nQuestion: what happens if f=1?\n\nIt so happens that this infinite series has an exact solution\\sum_{n=0}^{\\infty} f^n = \\frac{1}{1-f}\n\nSo the full response including all the effects of the feedback is actually\\Delta T = \\frac{1}{1-f} \\Delta T_0\n\nThis is also sometimes written as\\Delta T = g \\Delta T_0\n\nwhereg = \\frac{1}{1-f} = \\frac{\\Delta T}{\\Delta T_0}\n\nis called the system gain -- the ratio of the actual warming (including all feedbacks) to the warming we would have in the absence of feedbacks.\n\nSo if the overall feedback is positive, then f>0 and g>1.\n\nAnd if the overall feedback is negative?\n\n","type":"content","url":"/courseware/sensitivity-feedback#id-4-climate-feedback-some-definitions","position":31},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"5. Water vapor feedback in the radiative-convective model"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-5-water-vapor-feedback-in-the-radiative-convective-model","position":32},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"5. Water vapor feedback in the radiative-convective model"},"content":"\n\nIn nature, as in a complex GCM, water vapor tends to increase as the air temperature warms.\n\nThe main reason for this is that the saturation specific humidity (i.e. how much water vapor the air can hold) increases strongly with temperature.\n\nWe can parameterize this effect in the column model by insisting that the relative humidity remain fixed as the column warms.\n\n#  actual specific humidity\nq = rcm.subprocess['Radiation'].specific_humidity\n#  saturation specific humidity (a function of temperature and pressure)\nqsat = climlab.utils.thermo.qsat(rcm.Tatm, rcm.lev)\n#  Relative humidity\nrh = q/qsat\n\n#  Plot relative humidity in percent\nfig,ax = plt.subplots()\nax.plot(q*1000, rcm.lev, 'b-')\nax.invert_yaxis()\nax.grid()\nax.set_ylabel('Pressure (hPa)')\nax.set_xlabel('Specific humidity (g/kg)', color='b')\nax.tick_params('x', colors='b')\nax2 = ax.twiny()\nax2.plot(rh*100., rcm.lev, 'r-')\nax2.set_xlabel('Relative humidity (%)', color='r')\nax2.tick_params('x', colors='r')\n\n","type":"content","url":"/courseware/sensitivity-feedback#id-5-water-vapor-feedback-in-the-radiative-convective-model","position":33},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"A radiative-convective model with fixed relative humidity","lvl2":"5. Water vapor feedback in the radiative-convective model"},"type":"lvl3","url":"/courseware/sensitivity-feedback#a-radiative-convective-model-with-fixed-relative-humidity","position":34},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"A radiative-convective model with fixed relative humidity","lvl2":"5. Water vapor feedback in the radiative-convective model"},"content":"\n\nrcm_2xCO2_h2o = climlab.process_like(rcm_2xCO2)\nrcm_2xCO2_h2o.name = 'Radiative-Convective Model (2xCO2 equilibrium with H2O feedback)'\n\nfor n in range(2000):\n    # At every timestep\n    # we calculate the new saturation specific humidity for the new temperature\n    #  and change the water vapor in the radiation model\n    #  so that relative humidity is always the same\n    qsat = climlab.utils.thermo.qsat(rcm_2xCO2_h2o.Tatm, rcm_2xCO2_h2o.lev)\n    rcm_2xCO2_h2o.subprocess['Radiation'].specific_humidity[:] = rh * qsat\n    rcm_2xCO2_h2o.step_forward()\n\n# Check for energy balance\nrcm_2xCO2_h2o.ASR - rcm_2xCO2_h2o.OLR\n\nskew = make_skewT()\nadd_profile(skew, rcm)\nadd_profile(skew, rcm_2xCO2_strat)\nadd_profile(skew, rcm_2xCO2_eq)\nadd_profile(skew, rcm_2xCO2_h2o)\n\nWhat is the Equilibrium Climate Sensitivity of this new model?\n\nECS = rcm_2xCO2_h2o.Ts - rcm.Ts\nECS\n\nWith the water vapor feedback, doubling CO_2 causes 3 K of warming at equilibrium, rather than the no-feedback sensitivity of 1.3 K.\n\nA pretty big difference!\n\nThe system gain is the ratio\n\ng = ECS / ECS_nofeedback\ng\n\nSo the moistening of the atmosphere more than doubles the global warming effect.\n\n","type":"content","url":"/courseware/sensitivity-feedback#a-radiative-convective-model-with-fixed-relative-humidity","position":35},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-6-contribution-of-individual-feedback-processes-to-equilibrium-climate-sensitivity","position":36},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"","type":"content","url":"/courseware/sensitivity-feedback#id-6-contribution-of-individual-feedback-processes-to-equilibrium-climate-sensitivity","position":37},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Adding up the effects of different feedbacks","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/sensitivity-feedback#adding-up-the-effects-of-different-feedbacks","position":38},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Adding up the effects of different feedbacks","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"Now what if we have several individual feedback processes occurring simultaneously?\n\nWe can think of individual feedback amounts f_1, f_2, f_3, ..., with each  representing a physically distinct mechanism, e.g. water vapor, surface snow and ice, cloud changes, lapse rate effects, etc.\n\nEach individual process takes a fraction f_i of the output and adds to the input. So the feedback amounts are additive,f = f_1 + f_2 + f_3 + ... = \\sum_{i=0}^N f_i\n\nThis gives us a way to compare the importance of individual feedback processes!\n\nThe climate sensitivity is now\\Delta T_{2xCO2} = \\frac{1}{1- \\sum_{i=0}^N f_i } \\Delta T_0\n\nThe climate sensitivity is thus increased by positive feedback processes, and decreased by negative feedback processes.\n\n","type":"content","url":"/courseware/sensitivity-feedback#adding-up-the-effects-of-different-feedbacks","position":39},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Climate feedback parameters","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/sensitivity-feedback#climate-feedback-parameters","position":40},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Climate feedback parameters","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"We can also write this in terms of the original radiative forcing as\\Delta T_{2xCO2} = \\frac{\\Delta R}{\\lambda_0 - \\sum_{i=1}^{N} \\lambda_i}\n\nwhere\\lambda_i = \\lambda_0 f_i\n\nknown as climate feedback parameters, in units of W m^{-2} K^{-1}.\n\nWith this choice of sign conventions, \\lambda_i > 0 for a positive feedback process.\n\nIndividual feedback parameters \\lambda_i are then additive, and can be compared to the no-feedback parameter \\lambda_0.\n\nWe might decompose the net climate feedback into, for example\n\nlongwave and shortwave processes\n\ncloud and non-cloud processes\n\nThese individual feedback processes may be positive or negative. This is very powerful, because we can measure the relative importance of different feedback processes simply by comparing their \\lambda_i values.\n\n","type":"content","url":"/courseware/sensitivity-feedback#climate-feedback-parameters","position":41},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Every climate model has a Planck feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/sensitivity-feedback#every-climate-model-has-a-planck-feedback","position":42},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Every climate model has a Planck feedback","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"Our no-feedback response parameter \\lambda_0 is often called the Planck feedback.\n\nIt is not really a feedback at all.  It is the most basic and universal climate process, and is present in every climate model. It is simply an expression of the fact that a warm planet radiates more to space than a cold planet.\n\nAs we will see, our estimate of \\lambda_0 = 3.3 ~\\text{W} ~\\text{m}^{-2} ~\\text{K}^{-1}  is essentially the same as the Planck feedback diagnosed from complex GCMs. Most climate models (and the real climate system) have other radiative feedback processes, such that\\lambda = \\lambda_0 - \\sum_{i=1}^{N} \\lambda_i \\ne \\lambda_0\n\n","type":"content","url":"/courseware/sensitivity-feedback#every-climate-model-has-a-planck-feedback","position":43},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate the feedback parameters in our single-column model","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"type":"lvl3","url":"/courseware/sensitivity-feedback#calculate-the-feedback-parameters-in-our-single-column-model","position":44},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Calculate the feedback parameters in our single-column model","lvl2":"6. Contribution of individual feedback processes to Equilibrium Climate Sensitivity"},"content":"We can easily calculate the feedback parameter in our model with water vapor feedback.\n\nThis is just the ratio of the radiative forcing \\Delta R to the climate sensitivity:\n\nlambda_net = DeltaR / ECS\nlambda_net\n\nThe net feedback is \\lambda = 1.43 W m^{-2} K^{-1}.\n\nBecause of the additive nature of the feedbacks, this means that the individual contribution of the water vapor feedback is\\lambda_{h2o} = \\lambda_0 - \\lambda\n\nlambda_h2o = lambda0 - lambda_net\nlambda_h2o\n\nSo we measure a water vapor feedback of \\lambda_{h2o} = 1.86 W m^{-2} K^{-1}.\n\nThis is a positive number consistent with the amplifying effect of the water vapor feedback.\n\nThe physical meaning of this number:\n\nFor every 1 degree of surface warming, the increased water vapor greenhouse effect provides an additional 1.86 W m^{-2} of radiative forcing.\n\n","type":"content","url":"/courseware/sensitivity-feedback#calculate-the-feedback-parameters-in-our-single-column-model","position":45},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"7. Feedbacks diagnosed from complex climate models"},"type":"lvl2","url":"/courseware/sensitivity-feedback#id-7-feedbacks-diagnosed-from-complex-climate-models","position":46},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"7. Feedbacks diagnosed from complex climate models"},"content":"","type":"content","url":"/courseware/sensitivity-feedback#id-7-feedbacks-diagnosed-from-complex-climate-models","position":47},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Data from the IPCC AR5","lvl2":"7. Feedbacks diagnosed from complex climate models"},"type":"lvl3","url":"/courseware/sensitivity-feedback#data-from-the-ipcc-ar5","position":48},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl3":"Data from the IPCC AR5","lvl2":"7. Feedbacks diagnosed from complex climate models"},"content":"This figure is reproduced from the IPCC AR5 report \n\nFlato et al., 2013. It shows the feedbacks diagnosed from the various models that contributed to the assessment.\n\n(Later in the term we will discuss how the feedback diagnosis is actually done)\n\nSee below for complete citation information.\n\n\n\nFigure 9.43 | (a) Strengths of individual feedbacks for CMIP3 and CMIP5 models (left and right columns of symbols) for Planck (P), water vapour (WV), clouds (C), albedo (A), lapse rate (LR), combination of water vapour and lapse rate (WV+LR) and sum of all feedbacks except Planck (ALL), from Soden and Held (2006) and Vial et al. (2013), following Soden et al. (2008). CMIP5 feedbacks are derived from CMIP5 simulations for abrupt fourfold increases in CO2 concentrations (4 × CO2). (b) ECS obtained using regression techniques by Andrews et al. (2012) against ECS estimated from the ratio of CO2 ERF to the sum of all feedbacks. The CO2 ERF is one-half the 4 × CO2 forcings from Andrews et al. (2012), and the total feedback (ALL + Planck) is from Vial et al. (2013).\n\nFigure caption reproduced from the AR5 WG1 report \n\nFlato et al., 2013\n\nLegend:\n\nP: Planck feedback\n\nWV: Water vapor feedback\n\nLR: Lapse rate feedback\n\nWV+LR: combined water vapor plus lapse rate feedback\n\nC: cloud feedback\n\nA: surface albedo feedback\n\nALL: sum of all feedback except Plank, i.e. ALL = WV+LR+C+A\n\nThings to note:\n\nThe models all agree strongly on the Planck feedback.\n\nThe Planck feedback is about -3.3 ~\\text{W} ~\\text{m}^{-2} ~\\text{K}^{-1}  just like our above estimate of \\lambda_0 (but with opposite sign convention -- watch carefully for that in the literature)\n\nThe water vapor feedback is strongly positive in every model.\n\nThe lapse rate feedback is something we will study later. It is slightly negative.\n\nFor reasons we will discuss later, the best way to measure the water vapor feedback is to combine it with lapse rate feedback.\n\nModels agree strongly on the combined water vapor plus lapse rate feedback.\n\nThe albedo feedback is slightly positive but rather small globally.\n\nBy far the largest spread across the models occurs in the cloud feedback.\n\nGlobal cloud feedback ranges from slighly negative to strongly positive across the models.\n\nMost of the spread in the total feedback is due to the spread in the cloud feedback.\n\nTherefore, most of the spread in the ECS across the models is due to the spread in the cloud feedback.\n\nLook back at the feedback parameters we calculated in our single-column model. How do they compare to the data in this figure?\n\n","type":"content","url":"/courseware/sensitivity-feedback#data-from-the-ipcc-ar5","position":49},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"Credits"},"type":"lvl2","url":"/courseware/sensitivity-feedback#credits","position":50},{"hierarchy":{"lvl1":"Climate sensitivity and feedback","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/sensitivity-feedback#credits","position":51},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps..."},"type":"lvl1","url":"/courseware/spectral-bands","position":0},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps..."},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/spectral-bands","position":1},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"type":"lvl2","url":"/courseware/spectral-bands#id-1-what-if-co-2-actually-behaved-like-a-grey-gas","position":2},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"content":"\n\nSuppose that CO_2 actually behaved as a grey gas. In other words, no spectral dependence in absorptivity.\n\nIf we then double the CO_2 concentration in the atmosphere, we double the number of absorbers. This should imply that we also double the absorption cross-section \\kappa. Following the notation from our \n\nlecture on grey-gas radiative transfer, we have:\\kappa^\\prime = 2 ~ \\kappa\n\nThis would imply that we double the optical thickness of every layer:\\Delta \\tau^\\prime  = 2 \\left( -\\frac{\\kappa}{g} \\Delta p \\right) = 2 ~ \\Delta \\tau\n\nAnd since \n\nthe absorptivity / emissivity of each layer is\\epsilon = 1 - \\exp\\big( - \\Delta \\tau \\big)\n\nthe modified absorptivity is\\epsilon^\\prime = 1 - \\exp\\big( - 2\\Delta \\tau \\big) = 1 - \\left( \\exp\\big( - \\Delta \\tau \\big)\\right)^2 = 1 - (1-\\epsilon)^2\n\nor simply\\epsilon^\\prime = 2 \\epsilon  - \\epsilon^2\n\n(Note that \\epsilon^\\prime = 2 \\epsilon for very thin layers, for which \\epsilon is small).\n\n","type":"content","url":"/courseware/spectral-bands#id-1-what-if-co-2-actually-behaved-like-a-grey-gas","position":3},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"What does our 2-layer analytical model then say about the radiative forcing?","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"type":"lvl3","url":"/courseware/spectral-bands#what-does-our-2-layer-analytical-model-then-say-about-the-radiative-forcing","position":4},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"What does our 2-layer analytical model then say about the radiative forcing?","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"content":"Recall that \n\nwe tuned the two-layer grey gas model with\\epsilon = 0.586\n\nto get the observed OLR with observed temperatures.\n\n#  Applying the above formula\neps = 0.586\nprint('Doubling a grey gas absorber would change the absorptivity from {:.3} to {:.3}'.format(eps, 2*eps - eps**2))\n\nIf CO_2 behaved like a grey gas, doubling it would cause a huge increase in the absorptivity of each layer!\n\nWe previously worked out that the radiative forcing in this model (with the observed lapse rate) is about +2.6 W m^{-2} for a 2% increase in \\epsilon.\n\nforcing_rate = 2.6 / 0.02   # W/m2 forcing per fractional increase in epsilon\n\nOur hypothetical doubling of “grey CO_2” yields an increase from 0.586 to 0.829, or more than 40%:\n\nfractional_increase = (0.829 - 0.586) / 0.586\n\nSo roughly speaking, this should yield a radiative forcing 20 times larger than +2.6 W m^{-2}:\n\nradiative_forcing = forcing_rate * fractional_increase  # W/m2\nprint(radiative_forcing)\n\nOur hypothetical doubling of “grey CO_2” gives a radiative forcing greater than 50 W m^{-2}.\n\nThis is an absolutely enormous number. Assuming a \n\nnet climate feedback of -1.3 W m^{-2} K^{-1} (consistent with the CMIP5 model ensemble)\nwould then give us a truly astronomical equilibrium climate sensitivity of 41 K:\n\nlambda_net = -1.3  #  W/m2/K\necs = radiative_forcing / -(lambda_net)  # K\nprint(ecs)\n\n","type":"content","url":"/courseware/spectral-bands#what-does-our-2-layer-analytical-model-then-say-about-the-radiative-forcing","position":5},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Conclusions:","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"type":"lvl3","url":"/courseware/spectral-bands#conclusions","position":6},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Conclusions:","lvl2":"1. What if CO_2 actually behaved like a Grey Gas?"},"content":"If CO_2 did behave like a grey gas, we would be toast*!\n\nThe Grey Gas model is insufficient for understanding radiative forcing and feedback.\n\n* Phrase borrowed with great respect from \n\nPierrehumbert (2010), which is easily to best textbook that exists on this subject.\n\n","type":"content","url":"/courseware/spectral-bands#conclusions","position":7},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"2. Another look at observed spectra"},"type":"lvl2","url":"/courseware/spectral-bands#id-2-another-look-at-observed-spectra","position":8},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"2. Another look at observed spectra"},"content":"\n\nIt’s time to move away from the Grey Gas approximation and look more carefully at the actual observed spectra of solar and terrestrial radiation.\n\n","type":"content","url":"/courseware/spectral-bands#id-2-another-look-at-observed-spectra","position":9},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Observed solar spectra","lvl2":"2. Another look at observed spectra"},"type":"lvl3","url":"/courseware/spectral-bands#observed-solar-spectra","position":10},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Observed solar spectra","lvl2":"2. Another look at observed spectra"},"content":"The following figure shows observed spectra of solar radiation at TOA and at the surface, along with the theoretical Planck function for a blackbody at 5525 K.\n\n\n\nThis figure shows the solar radiation spectrum for direct light at both the top of the Earth’s atmosphere and at sea level. The sun produces light with a distribution similar to what would be expected from a 5525 K (5250 °C) blackbody, which is approximately the sun’s surface temperature. As light passes through the atmosphere, some is absorbed by gases with specific absorption bands. Additional light is redistributed by Raleigh scattering, which is responsible for the atmosphere’s blue color. These curves are based on the American Society for Testing and Materials (ASTM) Terrestrial Reference Spectra, which are standards adopted by the photovoltaics industry to ensure consistent test conditions and are similar to the light that could be expected in North America. Regions for ultraviolet, visible and infrared light are indicated.\n\nSource: \n\nhttp://​commons​.wikimedia​.org​/wiki​/File:Solar​_spectrum​_en​.svg\n\nThe figure shows that that the incident beam at TOA has the shape of a blackbody radiator.\n\nBy the time the beam arrives at the surface, it is strongly depleted at specific wavelengths.\n\nAbsorption by O_3 (ozone) depletes almost the entire ultraviolet spectrum.\n\nWeaker absorption features, mostly due to H_2O, deplete some parts of the near-infrared.\n\nNote that the depletion in the visible band is mostly due to scattering, which depletes the direct beam but contributes diffuse radiation (so we can still see when it’s cloudy!)\n\n","type":"content","url":"/courseware/spectral-bands#observed-solar-spectra","position":11},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Observed terrestrial spectra","lvl2":"2. Another look at observed spectra"},"type":"lvl3","url":"/courseware/spectral-bands#observed-terrestrial-spectra","position":12},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Observed terrestrial spectra","lvl2":"2. Another look at observed spectra"},"content":"This figure shows the Planck function for Earth’s surface temperature compared with the spectrum observed from space.\n\n\n\nSource: David Bice, Penn State University. \n\nhttps://​www​.e​-education​.psu​.edu​/earth103​/node​/1006\n\nCareful: I’m pretty sure what is plotted here is not the total observed spectrum, but rather the part of the emissions from the surface that actual make it out to space.\n\nAs we now, the terrestrial beam from the surface is depleted by absorption by many greenhouse gases, but principally CO_2 and H_2O.\n\nHowever there is a spectral band centered on 10 \\mum in which the greenhouse effect is very weak. This is the so-called window region in the spectrum.\n\nSince absorption is so strong across most of the rest of the infrared spectrum, this window region is a key determinant of the overall greenhouse effect.\n\n","type":"content","url":"/courseware/spectral-bands#observed-terrestrial-spectra","position":13},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl4":"One very big shortcoming of the Grey Gas model: it ignores the window region","lvl3":"Observed terrestrial spectra","lvl2":"2. Another look at observed spectra"},"type":"lvl4","url":"/courseware/spectral-bands#one-very-big-shortcoming-of-the-grey-gas-model-it-ignores-the-window-region","position":14},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl4":"One very big shortcoming of the Grey Gas model: it ignores the window region","lvl3":"Observed terrestrial spectra","lvl2":"2. Another look at observed spectra"},"content":"We would therefore like to start using a model that includes enough spectral information that it represents\n\nthe mostly strong CO_2 absorption outside the window region\n\nthe weak absorption inside the window region\n\n","type":"content","url":"/courseware/spectral-bands#one-very-big-shortcoming-of-the-grey-gas-model-it-ignores-the-window-region","position":15},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"3. Water vapor changes under global warming"},"type":"lvl2","url":"/courseware/spectral-bands#id-3-water-vapor-changes-under-global-warming","position":16},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"3. Water vapor changes under global warming"},"content":"\n\nAnother big shortcoming of the Grey Gas model is that it cannot represent the water vapor feedback.\n\nWe have seen above that H_2O is an important absorber in both longwave and shortwave spectra.\n\nWe also know that the water vapor load in the atmosphere increases as the climate warms. The primary reason is that the saturation vapor pressure increases strongly with temperature.\n\n","type":"content","url":"/courseware/spectral-bands#id-3-water-vapor-changes-under-global-warming","position":17},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Evidence from CESM simulations","lvl2":"3. Water vapor changes under global warming"},"type":"lvl3","url":"/courseware/spectral-bands#evidence-from-cesm-simulations","position":18},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Evidence from CESM simulations","lvl2":"3. Water vapor changes under global warming"},"content":"Let’s take at changes in the mean water vapor fields in the CESM model after a doubling of CO_2\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom numpy import cos, deg2rad, log\n\n#  Open handles to the data files\n#  These files are climatologies calculated over the final years of each simulation\ndatapath = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"        \nctrl = xr.open_dataset(datapath + 'som_1850_f19/clim/som_1850_f19.cam.h0.clim.nc', decode_times=False)\nco2 = xr.open_dataset(datapath + 'som_1850_2xCO2/clim/som_1850_2xCO2.cam.h0.clim.nc', decode_times=False)\n\n#  Plot cross-sections of the following anomalies under 2xCO2:\n#   - Temperature \n#   - Specific humidity\n#   - Relative humidity\n\nfig, axes = plt.subplots(1,3, figsize=(16,6))\n\nax = axes[0]\nCS = ax.contourf(ctrl.lat, ctrl.lev, (co2['T'] - ctrl['T']).mean(dim=('time','lon')), \n                 levels=np.arange(-11,12,1), cmap=plt.cm.seismic)\nax.set_title('Temperature (K)')\nfig.colorbar(CS, orientation='horizontal', ax=ax)\n\nax = axes[1]\nCS = ax.contourf(ctrl.lat, ctrl.lev, (co2['Q'] - ctrl['Q']).mean(dim=('time','lon'))*1000,\n                 levels=np.arange(-3,3.25,0.25), cmap=plt.cm.seismic)\nax.set_title('Specific humidity (g/kg)')\nfig.colorbar(CS, orientation='horizontal', ax=ax)\n\nax = axes[2]\nCS = ax.contourf(ctrl.lat, ctrl.lev, (co2['RELHUM'] - ctrl['RELHUM']).mean(dim=('time','lon')),\n                 levels=np.arange(-11,12,1), cmap=plt.cm.seismic)\nax.set_title('Relative humidity (%)')\nfig.colorbar(CS, orientation='horizontal', ax=ax)\n\nfor ax in axes:\n    ax.invert_yaxis()\n    ax.set_xticks([-90, -60, -30, 0, 30, 60, 90]);\n    ax.set_xlabel('Latitude')\n    ax.set_ylabel('Pressure')\n    \nfig.suptitle('Anomalies for 2xCO2 in CESM slab ocean simulations', fontsize=16);\n\n","type":"content","url":"/courseware/spectral-bands#evidence-from-cesm-simulations","position":19},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"What do you see here?","lvl2":"3. Water vapor changes under global warming"},"type":"lvl3","url":"/courseware/spectral-bands#what-do-you-see-here","position":20},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"What do you see here?","lvl2":"3. Water vapor changes under global warming"},"content":"Where does the largest warming occur?\n\nWhere does the largest moistening occur?\n\nIn fact the specific humidity anomaly has roughly the same shape of the specific humidity field itself -- it is largest where the temperature is highest. This is a consequence of the Clausius-Clapeyron relation.\n\nThe relative humidity anomaly is\n\noverall rather small (just a few percent)\n\nLargest in places cold places where the specific humidity is very small.\n\nThe smallness of the relative humidity change is a rather remarkable result.\n\nThis is not something we can derive from first principles. It is an emergent property of the GCMs. However it is a very robust feature of global warming simulations.\n\n","type":"content","url":"/courseware/spectral-bands#what-do-you-see-here","position":21},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"4. A simple water vapor parameterization"},"type":"lvl2","url":"/courseware/spectral-bands#id-4-a-simple-water-vapor-parameterization","position":22},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"4. A simple water vapor parameterization"},"content":"\n\n","type":"content","url":"/courseware/spectral-bands#id-4-a-simple-water-vapor-parameterization","position":23},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"A credible climate model needs a water vapor feedback","lvl2":"4. A simple water vapor parameterization"},"type":"lvl3","url":"/courseware/spectral-bands#a-credible-climate-model-needs-a-water-vapor-feedback","position":24},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"A credible climate model needs a water vapor feedback","lvl2":"4. A simple water vapor parameterization"},"content":"If relative humidity is nearly constant under global warming, and water vapor is a greenhouse gas, this implies a positive feedback that will amplify the warming for a given radiative forcing.\n\nThus far our simple models have ignored this process, and we have not been able to use them to assess the climate sensitivity.\n\nTo proceed towards more realistic models, we have two options:\n\nSimulate all the evaporation, condensation and transport processes that determine the time-mean water vapor field (as is done in the CESM).\n\nParameterize the dependence of water vapor on temperature by insisting that relative humidity stays constant as the climate changes.\n\nWe will now explore this second option, so that we can continue to think of the global energy budget under climate change as a process occurring in a single column.\n\n","type":"content","url":"/courseware/spectral-bands#a-credible-climate-model-needs-a-water-vapor-feedback","position":25},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Manabe’s constant relative humidity parameterization","lvl2":"4. A simple water vapor parameterization"},"type":"lvl3","url":"/courseware/spectral-bands#manabes-constant-relative-humidity-parameterization","position":26},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Manabe’s constant relative humidity parameterization","lvl2":"4. A simple water vapor parameterization"},"content":"We are going to adopt a parameterization first used in a very famous paper by \n\nManabe & Wetherald (1967), The thermal equilibrium of the atmosphere with a given distribution of relative humidity.\n\nThis paper was the first to give a really credible calculation of climate sensitivity to a doubling of CO_2 by accounting for the known spectral properties of CO_2 and H_2O absorption, as well as the water vapor feedback!\n\nThe parameterization is very simple:\n\nWe assume that the relative humidity r is a linear function of pressure p:r = r_s \\left( \\frac{p/p_s - 0.02}{1 - 0.02} \\right)\n\nwhere p_s = 1000 hPa is the surface pressure, and r_s is a prescribed surface value of relative humidity. Manabe and Wetherald set r_s = 0.77, but we should consider this a tunable parameter in our parameterization.\n\nSince this formula gives a negative number above 20 hPa, we also assume that the specific humidity has a minimum value of 0.005 g/kg (a typical stratospheric value).\n\nThis formula is implemented in climlab.radiation.ManabeWaterVapor()\n\nUsing this parameterization, the surface and tropospheric specific humidity will always increase as the temperature increases.\n\n","type":"content","url":"/courseware/spectral-bands#manabes-constant-relative-humidity-parameterization","position":27},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"5. Modeling spectral bands with the climlab.BandRCModel process"},"type":"lvl2","url":"/courseware/spectral-bands#id-5-modeling-spectral-bands-with-the-climlab-bandrcmodel-process","position":28},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"5. Modeling spectral bands with the climlab.BandRCModel process"},"content":"\n\nHere is a brief introduction to the climlab.BandRCModel process.\n\nThis is a model that divides the spectrum into 7 distinct bands: three shortwave and four longwave.\n\nAs we will see, the process works much like the familiar climlab.RadiativeConvectiveModel.\n\n","type":"content","url":"/courseware/spectral-bands#id-5-modeling-spectral-bands-with-the-climlab-bandrcmodel-process","position":29},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"About the spectra"},"type":"lvl2","url":"/courseware/spectral-bands#about-the-spectra","position":30},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"About the spectra"},"content":"","type":"content","url":"/courseware/spectral-bands#about-the-spectra","position":31},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Shortwave","lvl2":"About the spectra"},"type":"lvl3","url":"/courseware/spectral-bands#shortwave","position":32},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Shortwave","lvl2":"About the spectra"},"content":"The shortwave is divided into three channels:\n\nChannel 0 is the Hartley and Huggins band (extreme UV, 200 - 340 nm, 1% of total flux, strong ozone absorption)\n\nChannel 1 is Chappuis band (450 - 800 nm, 27% of total flux, moderate ozone absorption)\n\nChannel 2 is remaining radiation (72% of total flux, largely in the visible range, no ozone absorption)\n\n","type":"content","url":"/courseware/spectral-bands#shortwave","position":33},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Longwave","lvl2":"About the spectra"},"type":"lvl3","url":"/courseware/spectral-bands#longwave","position":34},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Longwave","lvl2":"About the spectra"},"content":"The longwave is divided into four bands:\n\nBand 0 is the window region (between 8.5 and 11 \\mum), 17% of total flux.\n\nBand 1 is the CO_2 absorption channel (the band of strong absorption by CO_2 around 15 \\mum), 15% of total flux\n\nBand 2 is a weak water vapor absorption channel, 35% of total flux\n\nBand 3 is a strong water vapor absorption channel, 33% of total flux\n\nThe longwave decomposition is not as easily related to specific wavelengths, as in reality there is a lot of overlap between H_2O and CO_2 absorption features (as well as absorption by other greenhouse gases such as CH_4 and N_2O that we are not representing).\n\n","type":"content","url":"/courseware/spectral-bands#longwave","position":35},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Example usage of the spectral model","lvl2":"About the spectra"},"type":"lvl3","url":"/courseware/spectral-bands#example-usage-of-the-spectral-model","position":36},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"Example usage of the spectral model","lvl2":"About the spectra"},"content":"\n\nimport climlab\nfrom climlab import constants as const\n\nFirst try a model with all default parameters. Usage is very similar to the familiar RadiativeConvectiveModel.\n\ncol1 = climlab.BandRCModel()\ncol1\n\nCheck out the list of subprocesses.\n\nWe now have a process called H2O, in addition to things we’ve seen before.\n\nThe state variables are still just temperatures:\n\ncol1.state\n\nBut the model has a new input field for specific humidity:\n\ncol1.q\n\nThe H2O process sets the specific humidity field at every timestep to a specified profile, determined by air temperatures. More on that below. For now, let’s compute a radiative equilibrium state.\n\ncol1.integrate_years(2)\n\n# Check for energy balance\ncol1.ASR - col1.OLR\n\nfig, ax = plt.subplots()\nax.plot(col1.Tatm, col1.lev, 'c-', label='default')\nax.plot(col1.Ts, climlab.constants.ps, 'co', markersize=16)\nax.invert_yaxis()\nax.set_xlabel('Temperature (K)', fontsize=16)\nax.set_ylabel('Pressure (hPa)', fontsize=16 )\nax.set_title('Temperature profiles', fontsize = 18)\nax.grid()\n\nBy default this model has convective adjustment.  We can set the adjusted lapse rate by passing a parameter when we create the model.\n\nThe model currently has no ozone (so there is no stratosphere). Not very realistic!\n\n","type":"content","url":"/courseware/spectral-bands#example-usage-of-the-spectral-model","position":37},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"About the radiatively active gases","lvl2":"About the spectra"},"type":"lvl3","url":"/courseware/spectral-bands#about-the-radiatively-active-gases","position":38},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl3":"About the radiatively active gases","lvl2":"About the spectra"},"content":"\n\nThe Band model is aware of three different absorbing gases: O3 (ozone), CO2, and H2O (water vapor). The abundances of these gases are stored in a dictionary of arrays as follows:\n\ncol1.absorber_vmr\n\nOzone and CO2 are both specified in the model. The default, as you see above, is zero ozone, and constant (well-mixed) CO2 at a volume mixing ratio of 3.8E-4 or 380 ppm.\n\nWater vapor is handled differently: it is determined by the model at each timestep. We make the following assumptions, following \n\nManabe & Wetherald (1967):\n\nthe relative humidity just above the surface is fixed at 77% (can be changed of course... see the parameter col1.relative_humidity\n\nwater vapor drops off linearly with pressure\n\nthere is a small specified amount of water vapor in the stratosphere.\n\n","type":"content","url":"/courseware/spectral-bands#about-the-radiatively-active-gases","position":39},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"Putting in some ozone"},"type":"lvl2","url":"/courseware/spectral-bands#putting-in-some-ozone","position":40},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"Putting in some ozone"},"content":"\n\nWe need to provide some ozone data to the model in order to simulate a stratosphere. We will read in some ozone data just as we did in \n\nthe previous lecture on grey-gas modeling in climlab.\n\nozone = xr.open_dataset( datapath + 'som_input/ozone_1.9x2.5_L26_2000clim_c091112.nc')\n\n#  Take global (area-weighted) and annual average\nweight_ozone = cos(deg2rad(ozone.lat)) / cos(deg2rad(ozone.lat)).mean(dim='lat')\nO3_global = (ozone.O3 * weight_ozone).mean(dim=('lat','lon','time'))\nO3_global\n\nfig, ax = plt.subplots()\nax.plot( O3_global*1E6, ozone.lev)\nax.invert_yaxis()\nax.set_xlabel('Ozone (ppm)', fontsize=16)\nax.set_ylabel('Pressure (hPa)', fontsize=16 )\nax.set_title('Global, annual mean ozone concentration', fontsize = 16);\n\nWe are going to create another instance of the model, this time using the same vertical coordinates as the ozone data.\n\n#  Create the column with appropriate vertical coordinate, surface albedo and convective adjustment\ncol2 = climlab.BandRCModel(lev=ozone.lev)\ncol2\n\n#  Set the ozone mixing ratio\ncol2.absorber_vmr['O3'] = O3_global.values\n\n#  Run the model out to equilibrium!\ncol2.integrate_years(2.)\n\nfig, ax = plt.subplots()\nax.plot( col1.Tatm, np.log(col1.lev/1000), 'c-', label='RCE' )\nax.plot( col1.Ts, 0, 'co', markersize=16 )\nax.plot(col2.Tatm, np.log(col2.lev/1000), 'r-', label='RCE O3' )\nax.plot(col2.Ts, 0, 'ro', markersize=16 )\nax.invert_yaxis()\nax.set_xlabel('Temperature (K)', fontsize=16)\nax.set_ylabel('log(Pressure)', fontsize=16 )\nax.set_title('Temperature profiles', fontsize = 18)\nax.grid(); ax.legend()\n\nOnce we include ozone we get a well-defined stratosphere.\n\nThings to consider / try:\n\nHere we used the global annual mean Q = 341.3 W m^{-2}. We might want to consider latitudinal or seasonal variations in Q.\n\nWe also used the global annual mean ozone profile! Ozone varies tremendously in latitude and by season. That information is all contained in the ozone data file we opened above. We might explore the effects of those variations.\n\nWe can calculate climate sensitivity in this model by doubling the CO_2 concentration and re-running out to the new equilibrium. Does the amount of ozone affect the climate sensitivity?  (example below)\n\nAn important shortcoming of the model: there are no clouds! (that would be the next step in the hierarchy of column models)\n\nClouds would act both in the shortwave (increasing the albedo, cooling the climate) and in the longwave (greenhouse effect, warming the climate). Which effect is stronger depends on the vertical structure of the clouds (high or low clouds) and their optical properties (e.g. thin cirrus clouds are nearly transparent to solar radiation but are good longwave absorbers).\n\ncol3 = climlab.process_like(col2)\ncol3\n\n# Let's double CO2.\ncol3.absorber_vmr['CO2'] *= 2.\n\ncol3.compute_diagnostics()\nprint( 'The radiative forcing for doubling CO2 is %f W/m2.' % \n      (col2.diagnostics['OLR'][0] - col3.diagnostics['OLR'][0]))\n\ncol3.integrate_years(3)\n\ncol3.ASR - col3.OLR\n\nprint( 'The Equilibrium Climate Sensitivity is %f K.' % (col3.Ts[0] - col2.Ts[0]))\n\n#  An example with no ozone\ncol4 = climlab.process_like(col1)\ncol4\n\ncol4.absorber_vmr['CO2'] *= 2.\ncol4.compute_diagnostics()\nprint('The radiative forcing for doubling CO2 is %f W/m2.' % (col1.OLR[0] - col4.OLR[0]))\n\ncol4.integrate_years(3.)\ncol4.ASR - col4.OLR\n\nprint('The Equilibrium Climate Sensitivity is %f K.' % (col4.Ts[0] - col1.Ts[0]))\n\nInteresting that the model is MORE sensitive when ozone is set to zero.\n\n","type":"content","url":"/courseware/spectral-bands#putting-in-some-ozone","position":41},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"Credits"},"type":"lvl2","url":"/courseware/spectral-bands#credits","position":42},{"hierarchy":{"lvl1":"Who needs spectral bands? We do. Some baby steps...","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/spectral-bands#credits","position":43},{"hierarchy":{"lvl1":"The surface energy balance"},"type":"lvl1","url":"/courseware/surface-energy-balance","position":0},{"hierarchy":{"lvl1":"The surface energy balance"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/surface-energy-balance","position":1},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"type":"lvl2","url":"/courseware/surface-energy-balance#id-1-energy-exchange-mechanisms-at-the-earths-surface","position":2},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"content":"\n\nThe surface of the Earth is the boundary between the atmosphere and the land, ocean, or ice. Understanding the energy fluxes across the surface are very important for three main reasons:\n\nWe are most interested in the climate at the surface because we live at the surface.\n\nThe surface energy budget determines how much energy is available to evaporate water and moisten the atmosphere.\n\nAir-sea energy fluxes set the thermal structure of the oceans, which in turn act to redistribute energy around the planet, with many important consequences for climate.\n\nThe energy budget at the surface is more complex that the budget at the top of the atmosphere. At the TOA the only energy transfer mechanisms are radiative (shortwave and longwave). At the surface, in addition to radiation we need to consider fluxes of energy by conduction and by convection of heat and moisture through turbulent fluid motion.\n\n","type":"content","url":"/courseware/surface-energy-balance#id-1-energy-exchange-mechanisms-at-the-earths-surface","position":3},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Major terms in the surface energy budget","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"type":"lvl3","url":"/courseware/surface-energy-balance#major-terms-in-the-surface-energy-budget","position":4},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Major terms in the surface energy budget","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"content":"We will denote the net upward energy flux at the surface as F_S.\n\nAs we mentioned back in a previous \n\nLecture on Heat Transport, there are four principal contributions to F_S:\n\nShortwave radiation\n\nLongwave radiation\n\nSensible heat flux\n\nEvaporation or latent heat flux\n\nWherever F_S \\ne 0, there is a net flux of energy between the atmosphere and the surface below. This implies either that there is heat storage / release occuring below the surface (e.g. warming or cooling of water, melting of snow and ice), and/or there is horizontal heat transport by fluid motions occuring below the surface (ocean circulation, groundwater flow).\n\n","type":"content","url":"/courseware/surface-energy-balance#major-terms-in-the-surface-energy-budget","position":5},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Minor terms in the surface energy budget","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"type":"lvl3","url":"/courseware/surface-energy-balance#minor-terms-in-the-surface-energy-budget","position":6},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Minor terms in the surface energy budget","lvl2":"1. Energy exchange mechanisms at the Earth’s surface"},"content":"All of these terms are small globally but can be significant locally or seasonally.\n\nLatent heat of fusion required for melting ice and snow\n\nConversion of the kinetic energy of winds and waves to thermal energy\n\nHeat transport by precipitation, if precipitation is at a different temperature than the surface\n\nBiological uptake of solar energy through photosynthesis\n\nBiological release of energy through oxidation (respiration, decay, fires)\n\nGeothermal heat sources (hot springs, volcanoes, etc.)\n\nAnthropogenic heat released through fossil fuel burning and nuclear power generation.\n\n","type":"content","url":"/courseware/surface-energy-balance#minor-terms-in-the-surface-energy-budget","position":7},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl2","url":"/courseware/surface-energy-balance#id-2-the-surface-energy-budget-in-cesm-simulations","position":8},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\nWe will examine the surface budget in our fully coupled CESM simulations. The advantage of looking at surface fluxes in a model rather than observations is that the model fluxes are completely consistent with the model climate, so that the net flux F_S will be a meaningful measure of the heat storage in the system.\n\nThe model also gives us an opportunity to look at how the surface budget reponds to global warming under a transient increase in CO_2.\n\n","type":"content","url":"/courseware/surface-energy-balance#id-2-the-surface-energy-budget-in-cesm-simulations","position":9},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"First, load the data","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#first-load-the-data","position":10},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"First, load the data","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\nWe’ll use the same simulations we worked with in the lecture on the \n\nTransient and Equilibrium Response of the CESM to CO2 forcing.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nfrom climlab import constants as const\nimport cartopy.crs as ccrs\nfrom cartopy.util import add_cyclic_point\n\ncasenames = {'cpl_control': 'cpl_1850_f19',\n             'cpl_CO2ramp': 'cpl_CO2ramp_f19',\n             'som_control': 'som_1850_f19',\n             'som_2xCO2':   'som_1850_2xCO2',\n            }\n# The path to the THREDDS server, should work from anywhere\nbasepath = 'http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/'\n# For better performance if you can access the roselab_rit filesystem (e.g. from JupyterHub)\n# basepath = '/roselab_rit/cesm_archive/'\n\n# Topography data, just used for plotting\ntopo = xr.open_dataset(basepath+'som_input/USGS-gtopo30_1.9x2.5_remap_c050602.nc')\n\ncasepaths = {}\nfor name in casenames:\n    casepaths[name] = basepath + casenames[name] + '/concatenated/'\n\n# make a dictionary of all the CAM atmosphere output\natm = {}\nfor name in casenames:\n    path = casepaths[name] + casenames[name] + '.cam.h0.nc'\n    print('Attempting to open the dataset ', path)\n    atm[name] = xr.open_dataset(path)\n\n# extract the last 10 years from the slab ocean control simulation\n# and the last 20 years from the coupled control\nnyears_slab = 10\nnyears_cpl = 20\nclim_slice_slab = slice(-(nyears_slab*12),None)\nclim_slice_cpl = slice(-(nyears_cpl*12),None)\n\nlat = atm['cpl_control'].lat\nlon = atm['cpl_control'].lon\nlev = atm['cpl_control'].lev\n\n","type":"content","url":"/courseware/surface-energy-balance#first-load-the-data","position":11},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Annual mean surface energy budget","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#annual-mean-surface-energy-budget","position":12},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Annual mean surface energy budget","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\n#  Surface energy budget terms, all defined as positive up (from ocean to atmosphere)\nsurface_budget = {}\nmonthly_surface_budget = {}\n\nfor (name, run) in atm.items():\n    fields = xr.Dataset()\n    fields['LHF'] = run.LHFLX\n    fields['SHF'] = run.SHFLX\n    fields['LWsfc'] = run.FLNS\n    fields['LWsfc_clr'] = run.FLNSC\n    fields['SWsfc'] = -run.FSNS\n    fields['SWsfc_clr'] = -run.FSNSC\n    fields['SnowFlux'] = ((run.PRECSC+run.PRECSL)\n                           *const.rho_w*const.Lhfus)\n\n    clim_budget = fields.isel(time=clim_slice_cpl)\n    # net upward radiation from surface\n    clim_budget['NetRad'] = clim_budget.LWsfc + clim_budget.SWsfc\n    clim_budget['NetRad_clr'] = clim_budget.LWsfc_clr + clim_budget.SWsfc_clr\n    # net upward surface heat flux\n    clim_budget['Net'] = (clim_budget.NetRad + clim_budget.LHF + \n                     clim_budget.SHF + clim_budget.SnowFlux)\n    \n    budget = clim_budget.mean(dim='time')\n    monthly_budget = clim_budget.groupby(clim_budget.time.dt.month).mean()\n    \n    surface_budget[name] = budget\n    monthly_surface_budget[name] = monthly_budget\n\n","type":"content","url":"/courseware/surface-energy-balance#annual-mean-surface-energy-budget","position":13},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Compute anomalies for all terms","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#compute-anomalies-for-all-terms","position":14},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Compute anomalies for all terms","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\n#   Here we take advantage of xarray!\n#   We can simply subtract the two xarray.Dataset objects \n#   to get anomalies for every term\nsurface_budget['anom'] = surface_budget['cpl_CO2ramp'] - surface_budget['cpl_control']\nmonthly_surface_budget['anom'] = monthly_surface_budget['cpl_CO2ramp'] - monthly_surface_budget['cpl_control']\n\n#  Also compute zonal averages\nzonal_budget = {}\nmonthly_zonal_budget = {}\nfor run, budget in surface_budget.items():\n    zonal_budget[run] = budget.mean(dim='lon')\nfor run, budget in monthly_surface_budget.items():\n    monthly_zonal_budget[run] = budget.mean(dim='lon')\n\n","type":"content","url":"/courseware/surface-energy-balance#compute-anomalies-for-all-terms","position":15},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Plot maps of the annual mean net upward flux F_S (control and anomaly after warming)","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#plot-maps-of-the-annual-mean-net-upward-flux-f-s-control-and-anomaly-after-warming","position":16},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Plot maps of the annual mean net upward flux F_S (control and anomaly after warming)","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\nfig = plt.figure(figsize=(12,5))\n\nax1 = fig.add_subplot(1,2,1, projection=ccrs.Robinson())\nfield = surface_budget['cpl_control'].Net\n# add cyclic point so cartopy doesn't show a white strip at zero longitude\nwrap_data, wrap_lon = add_cyclic_point(field.values, coord=field.lon, axis=field.dims.index('lon'))\n\n\ncax1 = ax1.pcolormesh(wrap_lon, field.lat, wrap_data, \n                        cmap=plt.cm.seismic, vmin=-200., vmax=200.,\n                        transform=ccrs.PlateCarree())\nax1.set_title('Annual mean net surface heat flux (+ up) - CESM control')\n\nax2 = fig.add_subplot(1,2,2, projection=ccrs.Robinson())\ncax2 = ax2.pcolormesh(lon, lat, surface_budget['anom'].Net,\n                    cmap=plt.cm.seismic, vmin=-30., vmax=30.,\n                     transform=ccrs.PlateCarree())\nax2.set_title('Anomaly after 1%/year CO2 ramp')\n\nfor ax in [ax1, ax2]:\n    ax.set_global(); ax.coastlines();\nfor cax in [cax1, cax2]:\n    plt.colorbar(cax, orientation='horizontal', label='W m$^{-2}$')\n\n\nSome notable points about the control state:\n\nThe net flux over all land surfaces is very close to zero!\n\nIn the long-term annual mean, a non-zero F_S must be balanced by heat transport.\n\nThe spatial pattern of F_S over the oceans is essentially just the prescribed q-flux that we have imposed on the slab ocean to represent ocean heat transport.\n\nWe have looked at maps like this before, back when we \n\nintroduced the slab ocean version of the CESM as well as in the \n\nlecture on decompositions of poleward heat transport.\n\nNet heat uptake by the oceans occurs mostly along the equator and the cold tongues on the eastern sides of the tropical basins.\n\nNet heat release from oceans to atmosphere occurs mostly in mid- to high latitudes. Hot spots include the Gulf Stream and Kuroshio regions on the western sides of the mid-latitude basins, as well as the subpolar North Atlantic. These features are largely determined by ocean dynamics.\n\nAfter greenhouse warming:\n\nThe net change in F_S is very small in most locations.\n\nThis indicates that the model has reached quasi-equilibrium. Non-zero changes in F_S would indicate either\n\nheat storage below the surface\n\nchanges in ocean heat transport\n\nWe can see the dominant regions of ocean heat uptake in the North Atlantic as well as the Southern Ocean showing up as negative anomalies in F_S in the right hand plot.\n\n","type":"content","url":"/courseware/surface-energy-balance#plot-maps-of-the-annual-mean-net-upward-flux-f-s-control-and-anomaly-after-warming","position":17},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Variation of energy balance components with latitude","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#variation-of-energy-balance-components-with-latitude","position":18},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Variation of energy balance components with latitude","lvl2":"2. The surface energy budget in CESM simulations"},"content":"\n\nfieldlist = ['SWsfc', 'LWsfc', 'LHF', 'SHF', 'Net']\nfig, axes = plt.subplots(1,2, figsize=(16,5))\nfor ax, run in zip(axes, ['cpl_control', 'anom']):\n    for field in fieldlist:\n        ax.plot(lat, zonal_budget[run][field], label=field)\n    ax.set_xlim(-90, 90); ax.grid(); ax.legend()\naxes[0].set_title('Components of ANNUAL surface energy budget (+ up) - CESM control')\naxes[1].set_title('Anomaly after CO2 doubling');\nfor ax in axes:\n    ax.set_ylabel('W m$^{-2}$')\n    ax.set_xlabel('Latitude')\n\nIn these graphs, the curve labeled “Net” is the net flux F_S. It is just the zonal average of the maps from the previous figure, and shows the ocean heat uptake at the equator and release in mid- to high latitudes.\n\nMore interestingly, these graphs show the contribution of the various terms to F_S. They are all plotted as positive up. A negative value thus indicates heating of the surface, and a positive value indicates a cooling of the surface.\n\nKey points about the control simulation:\n\nSolar radiation acts to warm the surface everywhere.\n\nNote that this is a net shortwave flux, so it is the amount that is actually absorbed by the surface after accounting for the reflected fraction.\n\nAll other mechanisms act to cool the surface.\n\nThe dominant balance across the tropics is between warming by solar radiation and cooling by evaporation (latent heat flux or LHF).\n\nThe latent heat flux decreases poleward.\n\nLatent heat flux is dominant over sensible heat flux at most latitudes except close to the poles.\n\nThe net longwave radiation also acts to cool the surface.\n\nThis is the residual between the surface emissions (essentially \\sigma~T_s^4) and the back-radiation from the atmosphere.\n\nAfter greenhouse warming\n\nThe anomaly in net upward longwave radiation is negative at most latitudes.\n\nThis implies that the downwelling back-radiation increases faster than the upwelling surface emissions.\n\nThis is a signature of greenhouse warming! Both the upwelling and downwelling beams increase with warming. But the downwelling beam also increases because of the CO_2-induced increase in emissivity of the atmosphere.\n\nSo the surface is warmed by excess longwave radiation.\n\nThis warming is largely balanced by increased evaporation (red curve)!\n\nThere are also significant changes in shortwave radiation. We could use the modeled clear-sky diagnostics to infer which of these changes are due to clouds.\n\nThe negative shortwave anomalies in high latitudes are consistent with surface albedo feedback and loss of ice and snow.\n\n","type":"content","url":"/courseware/surface-energy-balance#variation-of-energy-balance-components-with-latitude","position":19},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Seasonal variations","lvl2":"2. The surface energy budget in CESM simulations"},"type":"lvl3","url":"/courseware/surface-energy-balance#seasonal-variations","position":20},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Seasonal variations","lvl2":"2. The surface energy budget in CESM simulations"},"content":"We will compute the budgets for the months of January and July, and plot their differences.\n\n#  July minus January\njulminusjan_budget = {}\nfor name, budget in monthly_surface_budget.items():\n    #  xarray.Dataset objects let you \"select\" a subset in various ways\n    #  Here we are using the integer time index (0-11)\n    julminusjan_budget[name] = budget.sel(month=7) - budget.sel(month=1)\n\nfieldlist = ['SWsfc', 'LWsfc', 'LHF', 'SHF', 'Net']\nfig,axes = plt.subplots(1,2,figsize=(16,5))\nfor field in fieldlist:\n    axes[0].plot(lat, julminusjan_budget['cpl_control'][field].mean(dim='lon'), label=field)\naxes[0].set_title('Components of JUL-JAN surface energy budget (+ up) - CESM control')\nfor field in fieldlist:\n    axes[1].plot(lat, julminusjan_budget['anom'][field].mean(dim='lon'), label=field)\naxes[1].set_title('Anomaly after CO2 doubling')\nfor ax in axes:\n    ax.set_xlim(-90, 90)\n    ax.grid()\n    ax.legend()\n    ax.set_ylabel('W m$^{-2}$')\n    ax.set_xlabel('Latitude')\n\nSeasonally, the dominant balance by far is between solar radiation and heat storage!\n\n","type":"content","url":"/courseware/surface-energy-balance#seasonal-variations","position":21},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"type":"lvl2","url":"/courseware/surface-energy-balance#id-3-sensible-and-latent-heat-fluxes-in-the-boundary-layer","position":22},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"content":"\n\nThese notes largely follow Chapter 4 of \n\nHartmann (1994), Global Physical Climatology.\n\nTurbulent fluxes of heat: eddy fluxes of heat and moisture at some level in the atmospheric boundary layer\\text{SH} = c_p ~\\rho ~ \\overline{w^\\prime T^\\prime}\\text{LE} = L ~\\rho ~\\overline{w^\\prime q^\\prime}\n\nwhere c_p is the specific heat of air at constant pressure, L is the latent heat of vaporization, \\text{SH} is the sensible heat flux and \\text{LE} is the latent heat flux.\n\n","type":"content","url":"/courseware/surface-energy-balance#id-3-sensible-and-latent-heat-fluxes-in-the-boundary-layer","position":23},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Bulk aerodynamic formulas","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"type":"lvl3","url":"/courseware/surface-energy-balance#bulk-aerodynamic-formulas","position":24},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"Bulk aerodynamic formulas","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"content":"From theory of boundary layer turbulence, we suppose that the eddy heat fluxes is related to boundary layer temperature gradients, as well as the mean wind speed:\\text{SH} = c_p ~\\rho ~ C_D ~ U \\left( T_s - T_a \\right)\n\nwhere T_s is the surface temperature and T_a is the air temperature at some reference height above the surface. U is the wind speed at the reference height, and C_D is a dimensionless aerodynamic drag coefficient.\n\nC_D will depend, among other things, on the roughness of the surface.\n\nSimilarly, we assume that the latent heat flux is related to boundary layer moisture gradients:\\text{LE} = L ~\\rho ~ C_D ~ U \\left( q_s - q_a \\right)\n\nwhere q_s is the specific humidity of air immediately above the surface, and q_a is the specific humidity at the reference height.\n\nIn general the transfer coefficients C_D could be different for sensible and latent heat flux, but empirically they are found to be very similar to each other. We will assume they are equal here.\n\n","type":"content","url":"/courseware/surface-energy-balance#bulk-aerodynamic-formulas","position":25},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The Bowen ratio","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"type":"lvl3","url":"/courseware/surface-energy-balance#the-bowen-ratio","position":26},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The Bowen ratio","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"content":"The Bowen ratio is a dimensionless number defined asB_o = \\frac{\\text{SH}}{\\text{LE}}\n\ni.e. the ratio of sensible heat loss to evaporative cooling.\n\nFrom the above plots, the Bowen ratio tends to be small in the low latitudes.\n\n","type":"content","url":"/courseware/surface-energy-balance#the-bowen-ratio","position":27},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The Bowen ratio for wet surfaces","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"type":"lvl3","url":"/courseware/surface-energy-balance#the-bowen-ratio-for-wet-surfaces","position":28},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The Bowen ratio for wet surfaces","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"content":"Over a water surface or a very wet land surface, we may assume that the mixing ratio of water vapor at the surface is equal to the saturation mixing ratio q^* at the temperature of the surface:q_s = q^*(T_s)\n\nRecall that the saturation vapor pressure q^* is a sensitive function of temperature through the Clausius-Claperyon relation. (It also depends on pressure)\n\nLet’s approximate the mixing ratio for saturated air at the reference height through a first-order Taylor series expansion:q_a^* \\approx q_s^*(T_s) + \\frac{\\partial q^*}{\\partial T} \\left( T_a - T_s \\right)\n\nThe actual mixing ratio at the reference height can be expressed asq_a = r ~ q_a^*\n\nwhere r is the relative humidity at that level.\n\nThen we have an appoximation for q_a in terms of temperature gradients:q_a \\approx r \\left( q_s^*(T_s) + \\frac{\\partial q^*}{\\partial T} \\left( T_a - T_s \\right) \\right)\n\nSubstituting this into the bulk formula for latent heat flux, we get\\text{LE} \\approx L ~\\rho ~ C_D ~ U \\left( q_s^* - r \\left( q_s^* + \\frac{\\partial q^*}{\\partial T} \\left( T_a - T_s \\right) \\right) \\right)\n\nor, rearranging a bit,\\text{LE} \\approx L ~\\rho ~ C_D ~ U \\left( (1-r) ~ q_s^* + r \\frac{\\partial q^*}{\\partial T} \\left( T_s - T_a \\right) \\right)\n\nThe Bowen ratio is thusB_o = \\frac{c_p}{ L \\left( \\frac{(1-r)}{\\left( T_s - T_a \\right)} q_s^* + r \\frac{\\partial q^*}{\\partial T} \\right)}\n\n","type":"content","url":"/courseware/surface-energy-balance#the-bowen-ratio-for-wet-surfaces","position":29},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The equilibrium Bowen ratio (for saturated air)","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"type":"lvl3","url":"/courseware/surface-energy-balance#the-equilibrium-bowen-ratio-for-saturated-air","position":30},{"hierarchy":{"lvl1":"The surface energy balance","lvl3":"The equilibrium Bowen ratio (for saturated air)","lvl2":"3. Sensible and Latent Heat Fluxes in the boundary layer"},"content":"Notice that if the boundary layer air is saturated, then r=1 and the Bowen ratio takes on a special valueB_e = \\frac{c_p}{ L \\frac{\\partial q^*}{\\partial T} }\n\nWhen the surface and the air at the reference level are saturated, the Bowen ratio approaches the value B_e, which is called the equilibrium Bowen ratio. We presume that the flux of moisture from the boundary layer to the free atmosphere is sufficient to just balance the upward flux of moisture from the surface so that the humidity at the reference height is in equilibrium at the saturation value.\n\nRecall that from the Clausius-Claperyon relation, the rate of change of the saturation mixing ratio is itself a strong function of temperature:\\frac{\\partial q^*}{\\partial T} = q^*(T) \\frac{L}{R_v ~ T^2}\n\nHere the quasi-exponential dependence of q^* on T far outweighs the inverse square dependence, so the equilibrium Bowen ratio decreases roughly exponentially with temperature.\n\nThe following code reproduces Figure 4.10 of \n\nHartmann (1994).\n\nfrom climlab.utils.thermo import qsat\nT = np.linspace(-40, 40) + const.tempCtoK\nqstar = qsat(T, const.ps)  # in kg / kg\n\ndef Be(T):\n    qstar = qsat(T, const.ps)  # in kg / kg\n    dqstardT = qstar * const.Lhvap / const.Rv / T**2\n    return const.cp / const.Lhvap / dqstardT\n\nfig, ax = plt.subplots()\nax.semilogy(T + const.tempKtoC, qstar*1000, label='$q^*$')\nax.semilogy(T + const.tempKtoC, Be(T), label='$B_e$')\nax.grid()\nax.set_xlabel('Temperature (degC)')\nax.legend(loc='upper center')\nax.set_title('Saturation specific humidity (g/kg) and equilibrium Bowen ratio');\n\nEquilibrium Bowen ratio is near 1 at 0ºC, and decreases to about 0.2 at 30ºC.\n\nAs relative humidity is decreased from 1 to smaller values, evaporative cooling increases.\n\nThe equilibrium Bowen ratio is the maximum possible Bowen ratio for a wet surface.\n\nActual Bowen ratio over a wet surface will generally be smaller than B_e, because the air is usually not saturated.\n\nBecause of the strong temperature dependence of the saturation specific humidity:\n\nEvaporative cooling (latent heat flux) dominates over sensible cooling of wet surfaces at tropical temperatures.\n\nSensible heat flux becomes important wherever the surface is either cold or dry.\n\n","type":"content","url":"/courseware/surface-energy-balance#the-equilibrium-bowen-ratio-for-saturated-air","position":31},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"4. Bowen ratio in CESM simulations"},"type":"lvl2","url":"/courseware/surface-energy-balance#id-4-bowen-ratio-in-cesm-simulations","position":32},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"4. Bowen ratio in CESM simulations"},"content":"\n\nBo_control = (surface_budget['cpl_control'].SHF / \n              surface_budget['cpl_control'].LHF)\nBe_control = Be(atm['cpl_control'].TS.isel(time=clim_slice_cpl).mean(dim='time'))\n\nfig,axes = plt.subplots(1,3,figsize=(16,4))\ncax1 = axes[0].pcolormesh(lon, lat, Bo_control,\n                    vmin=0., vmax=5. )\nfig.colorbar(cax1, ax=axes[0])\naxes[0].set_title('$B_o$ (CESM control)', fontsize=20)\ncax2 = axes[1].pcolormesh(lon, lat, Be_control,\n                    vmin=0., vmax=5. )\nfig.colorbar(cax2, ax=axes[1])\naxes[1].set_title('$B_e$ (CESM control)', fontsize=20)\ncax3 = axes[2].pcolormesh(lon, lat, (Bo_control - Be_control),\n                    cmap='seismic', vmin=-10., vmax=10. )\nfig.colorbar(cax3, ax=axes[2])\naxes[2].set_title('$B_o - B_e$ (CESM control)', fontsize=20)\nfor ax in axes:\n    ax.set_xlim(0, 360)\n    ax.set_ylim(-90, 90)\n    ax.contour( lon, lat, topo.variables['LANDFRAC'][:], [0.5], colors='k');\n\nOn the difference plot, the blue colors indicate the actual Bowen ratio is smaller than the equilibrium Bowen ratio. This will typically occur for wet surfaces with undersaturated air.\n\nThe red colors indicate the actual Bowen ratio is larger than the equilibrium Bowen ratio. This typically occurs for dry surfaces where there is not enough water available to satisfy the energetic demand for evaporation.\n\nNote\n\nThese notes are unfinished.\n\n","type":"content","url":"/courseware/surface-energy-balance#id-4-bowen-ratio-in-cesm-simulations","position":33},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"Credits"},"type":"lvl2","url":"/courseware/surface-energy-balance#credits","position":34},{"hierarchy":{"lvl1":"The surface energy balance","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/surface-energy-balance#credits","position":35},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy"},"type":"lvl1","url":"/courseware/sympy-greenhouse","position":0},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/sympy-greenhouse","position":1},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"1. Introducing symbolic computation with sympy"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-1-introducing-symbolic-computation-with-sympy","position":2},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"1. Introducing symbolic computation with sympy"},"content":"\n\nThese notes elaborate on material in the \n\nlecture on elementary greenhouse models, demonstrating use of a computer algebra system to make precise calculations.\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-1-introducing-symbolic-computation-with-sympy","position":3},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Symbolic math with the sympy package","lvl2":"1. Introducing symbolic computation with sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#symbolic-math-with-the-sympy-package","position":4},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Symbolic math with the sympy package","lvl2":"1. Introducing symbolic computation with sympy"},"content":"The two-layer grey gas model is simple enough that we can work out all the details algebraically. There are three temperatures to keep track of (T_s, T_0, T_1), so we will have 3x3 matrix equations.\n\nWe all know how to work these things out with pencil and paper. But it can be tedious and error-prone.\n\nSymbolic math software lets us use the computer to automate a lot of tedious algebra.\n\nThe \n\nsympy package is a powerful open-source symbolic math library that is well-integrated into the scientific Python ecosystem.\n\n","type":"content","url":"/courseware/sympy-greenhouse#symbolic-math-with-the-sympy-package","position":5},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Getting started with sympy","lvl2":"1. Introducing symbolic computation with sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#getting-started-with-sympy","position":6},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Getting started with sympy","lvl2":"1. Introducing symbolic computation with sympy"},"content":"\n\nimport sympy\n#  Allow sympy to produce nice looking equations as output\nsympy.init_printing()\n#  Define some symbols for mathematical quantities\n#  Assume all quantities are positive (which will help simplify some expressions)\nepsilon, T_e, T_s, T_0, T_1, sigma = \\\n    sympy.symbols('epsilon, T_e, T_s, T_0, T_1, sigma', positive=True)\n#  So far we have just defined some symbols, e.g.\nT_s\n\n#  We have hard-coded the assumption that the temperature is positive\nsympy.ask(T_s>0)\n\n","type":"content","url":"/courseware/sympy-greenhouse#getting-started-with-sympy","position":7},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-2-coding-up-the-2-layer-grey-gas-model-in-sympy","position":8},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"content":"\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-2-coding-up-the-2-layer-grey-gas-model-in-sympy","position":9},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Longwave emissions","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#longwave-emissions","position":10},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Longwave emissions","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"content":"Let’s denote the emissions from each layer as\\begin{align}\nE_s &= \\sigma T_s^4 \\\\\nE_0 &= \\epsilon \\sigma T_0^4 \\\\\nE_1 &= \\epsilon \\sigma T_1^4 \n\\end{align}\n\nrecognizing that E_0 and E_1 contribute to both the upwelling and downwelling beams.\n\n#  Define these operations as sympy symbols \n#  And display as a column vector:\nE_s = sigma*T_s**4\nE_0 = epsilon*sigma*T_0**4\nE_1 = epsilon*sigma*T_1**4\nE = sympy.Matrix([E_s, E_0, E_1])\nE\n\n","type":"content","url":"/courseware/sympy-greenhouse#longwave-emissions","position":11},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Shortwave radiation","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#shortwave-radiation","position":12},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Shortwave radiation","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"content":"Since we have assumed the atmosphere is transparent to shortwave, the incident beam Q passes unchanged from the top to the surface, where a fraction \\alpha is reflected upward out to space.\n\n#  Define some new symbols for shortwave radiation\nQ, alpha = sympy.symbols('Q, alpha', positive=True)\n#  Create a dictionary to hold our numerical values\ntuned = {}\ntuned[Q] = 341.3  #  global mean insolation in W/m2\ntuned[alpha] = 101.9/Q.subs(tuned)  #  observed planetary albedo\ntuned[sigma] = 5.67E-8  #  Stefan-Boltzmann constant in W/m2/K4\ntuned\n#  Numerical value for emission temperature\n#T_e.subs(tuned)\n\n","type":"content","url":"/courseware/sympy-greenhouse#shortwave-radiation","position":13},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Tracing the upwelling beam of longwave radiation","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#tracing-the-upwelling-beam-of-longwave-radiation","position":14},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Tracing the upwelling beam of longwave radiation","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"content":"Let U be the upwelling flux of longwave radiation.\n\nThe upward flux from the surface to layer 0 isU_0 = E_s\n\n(just the emission from the suface).\n\nU_0 = E_s\nU_0\n\nFollowing this beam upward, we can write the upward flux from layer 0 to layer 1 as the sum of the transmitted component that originated below layer 0 and the new emissions from layer 0:U_1 = (1-\\epsilon) U_0 + E_0\n\nU_1 = (1-epsilon)*U_0 + E_0\nU_1\n\nContinuing to follow the same beam, the upwelling flux above layer 1 isU_2 = (1-\\epsilon) U_1 + E_1\n\nU_2 = (1-epsilon) * U_1 + E_1\n\nSince there is no more atmosphere above layer 1, this upwelling flux is our Outgoing Longwave Radiation for this model:OLR = U_2\n\nU_2\n\nThe three terms in the above expression represent the contributions to the total OLR that originate from each of the three levels.\n\nLet’s code this up explicitly for future reference:\n\n#  Define the contributions to OLR originating from each level\nOLR_s = (1-epsilon)**2 *sigma*T_s**4\nOLR_0 = epsilon*(1-epsilon)*sigma*T_0**4\nOLR_1 = epsilon*sigma*T_1**4\n\nOLR = OLR_s + OLR_0 + OLR_1\n\nprint( 'The expression for OLR is')\nOLR\n\n","type":"content","url":"/courseware/sympy-greenhouse#tracing-the-upwelling-beam-of-longwave-radiation","position":15},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Downwelling beam","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"type":"lvl3","url":"/courseware/sympy-greenhouse#downwelling-beam","position":16},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Downwelling beam","lvl2":"2. Coding up the 2-layer grey gas model in sympy"},"content":"Let D be the downwelling longwave beam. Since there is no longwave radiation coming in from space, we begin with\n\nfromspace = 0\nD_2 = fromspace\n\nBetween layer 1 and layer 0 the beam contains emissions from layer 1:D_1 = (1-\\epsilon)D_2 + E_1 = E_1\n\nD_1 = (1-epsilon)*D_2 + E_1\nD_1\n\nFinally between layer 0 and the surface the beam contains a transmitted component and the emissions from layer 0:D_0 = (1-\\epsilon) D_1 + E_0 = \\epsilon(1-\\epsilon) \\sigma T_1^4 + \\epsilon \\sigma T_0^4\n\nD_0 = (1-epsilon)*D_1 + E_0\nD_0\n\nThis D_0 is what we call the back radiation, i.e. the longwave radiation from the atmosphere to the surface.\n\n","type":"content","url":"/courseware/sympy-greenhouse#downwelling-beam","position":17},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"3. Tuning the grey gas model to observations"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-3-tuning-the-grey-gas-model-to-observations","position":18},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"3. Tuning the grey gas model to observations"},"content":"\n\nIn building our new model we have introduced exactly one parameter, the absorptivity \\epsilon. We need to choose a value for \\epsilon.\n\nWe will tune our model so that it reproduces the observed global mean OLR given observed global mean temperatures.\n\nTo get appropriate temperatures for T_s, T_0, T_1, revisit the global, annual mean lapse rate plot from NCEP Reanalysis data we first encountered in the \n\nRadiation notes.\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-3-tuning-the-grey-gas-model-to-observations","position":19},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Temperatures","lvl2":"3. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/sympy-greenhouse#temperatures","position":20},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Temperatures","lvl2":"3. Tuning the grey gas model to observations"},"content":"First, we setT_s = 288 \\text{ K}\n\nFrom the lapse rate plot, an average temperature for the layer between 1000 and 500 hPa isT_0 = 275 \\text{ K}\n\nDefining an average temperature for the layer between 500 and 0 hPa is more ambiguous because of the lapse rate reversal at the tropopause. We will chooseT_1 = 230 \\text{ K}\n\nFrom the graph, this is approximately the observed global mean temperature at 275 hPa or about 10 km.\n\n#  add to our dictionary of values:\ntuned[T_s] = 288.\ntuned[T_0] = 275.\ntuned[T_1] = 230.\ntuned\n\n","type":"content","url":"/courseware/sympy-greenhouse#temperatures","position":21},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"OLR","lvl2":"3. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/sympy-greenhouse#olr","position":22},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"OLR","lvl2":"3. Tuning the grey gas model to observations"},"content":"From the \n\nobserved global energy budget we setOLR = 238.5 \\text{ W m}^{-2}\n\n","type":"content","url":"/courseware/sympy-greenhouse#olr","position":23},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Solving for \\epsilon","lvl2":"3. Tuning the grey gas model to observations"},"type":"lvl3","url":"/courseware/sympy-greenhouse#solving-for-epsilon","position":24},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Solving for \\epsilon","lvl2":"3. Tuning the grey gas model to observations"},"content":"We wrote down the expression for OLR as a function of temperatures and absorptivity in our model above.\n\nWe just need to equate this to the observed value and solve a quadratic equation for \\epsilon.\n\nThis is where the real power of the symbolic math toolkit comes in.\n\nSubsitute in the numerical values we are interested in:\n\n# the .subs() method for a sympy symbol means\n#  substitute values in the expression using the supplied dictionary\n#  Here we use observed values of Ts, T0, T1 \nOLR2 = OLR.subs(tuned)\nOLR2\n\nWe have a quadratic equation for \\epsilon.\n\nNow use the sympy.solve function to solve the quadratic:\n\n#  The sympy.solve method takes an expression equal to zero\n#  So in this case we subtract the tuned value of OLR from our expression\neps_solution = sympy.solve(OLR2 - 238.5, epsilon)\neps_solution\n\nThere are two roots, but the second one is unphysical since we must have 0 < \\epsilon < 1.\n\nJust for fun, here is a simple of example of filtering a list using powerful Python list comprehension syntax:\n\n# Give me only the roots that are between zero and 1!\nlist_result = [eps for eps in eps_solution if 0<eps<1]\nprint( list_result)\n# The result is a list with a single element.\n#  We need to slice the list to get just the number:\neps_tuned = list_result[0]\nprint( eps_tuned)\n\nWe conclude that our tuned value is (to within 3 decimal places):\\epsilon = 0.586\n\nThis is the absorptivity that guarantees that our model reproduces the observed OLR given the observed tempertures.\n\ntuned[epsilon] = eps_tuned\ntuned\n\n","type":"content","url":"/courseware/sympy-greenhouse#solving-for-epsilon","position":25},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"4. Level of emission"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-4-level-of-emission","position":26},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"4. Level of emission"},"content":"\n\nEven in this very simple greenhouse model, there is no single level at which the OLR is generated.\n\nThe three terms in our formula for OLR tell us the contributions from each level.\n\nOLRterms = sympy.Matrix([OLR_s, OLR_0, OLR_1])\nOLRterms\n\nNow evaluate these expressions for our tuned temperature and absorptivity:\n\nOLRtuned = OLRterms.subs(tuned)\nOLRtuned\n\nSo we are getting about 67 W m^{-2} from the surface, 79 W m^{-2} from layer 0, and 93 W m^{-2} from the top layer.\n\nIn terms of fractional contributions to the total OLR, we have (limiting the output to two decimal places):\n\nsympy.N(OLRtuned / 238.5, 2)\n\nNotice that the largest single contribution is coming from the top layer. This is in spite of the fact that the emissions from this layer are weak, because it is so cold.\n\nComparing to observations, the actual contribution to OLR from the surface is about 22 W m^{-2} (or about 9% of the total), not 67 W m^{-2}. So we certainly don’t have all the details worked out yet!\n\nAs we will see later, to really understand what sets that observed 22 W m^{-2}, we will need to start thinking about the spectral dependence of the longwave absorptivity.\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-4-level-of-emission","position":27},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-5-radiative-forcing-in-the-2-layer-grey-gas-model","position":28},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"\n\nAdding some extra greenhouse absorbers will mean that a greater fraction of incident longwave radiation is absorbed in each layer.\n\nThus \\epsilon must increase as we add greenhouse gases.\n\nSuppose we have \\epsilon initially, and the absorptivity increases to \\epsilon_2 = \\epsilon + \\delta_\\epsilon.\n\nSuppose further that this increase happens abruptly so that there is no time for the temperatures to respond to this change. We hold the temperatures fixed in the column and ask how the radiative fluxes change.\n\nDo you expect the OLR to increase or decrease?\n\nLet’s use our two-layer leaky greenhouse model to investigate the answer.\n\nThe components of the OLR before the perturbation are\n\nOLRterms\n\nAfter the perturbation we have\n\ndelta_epsilon = sympy.symbols('delta_epsilon')\nOLRterms_pert = OLRterms.subs(epsilon, epsilon+delta_epsilon)\nOLRterms_pert\n\nLet’s take the difference\n\ndeltaOLR = OLRterms_pert - OLRterms\ndeltaOLR\n\nTo make things simpler, we will neglect the terms in \\delta_\\epsilon^2. This is perfectly reasonably because we are dealing with small perturbations where \\delta_\\epsilon << \\epsilon.\n\nTelling sympy to set the quadratic terms to zero gives us\n\ndeltaOLR_linear = sympy.expand(deltaOLR).subs(delta_epsilon**2, 0)\ndeltaOLR_linear\n\nRecall that the three terms are the contributions to the OLR from the three different levels. In this case, the changes in those contributions after adding more absorbers.\n\nNow let’s divide through by \\delta_\\epsilon to get the normalized change in OLR per unit change in absorptivity:\n\ndeltaOLR_per_deltaepsilon = \\\n    sympy.simplify(deltaOLR_linear / delta_epsilon)\ndeltaOLR_per_deltaepsilon\n\nNow look at the sign of each term. Recall that 0 < \\epsilon < 1. Which terms in the OLR go up and which go down?\n\nTHIS IS VERY IMPORTANT, SO STOP AND THINK ABOUT IT.\n\nThe contribution from the surface must decrease, while the contribution from the top layer must increase.\n\nWhen we add absorbers, the average level of emission goes up!\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-5-radiative-forcing-in-the-2-layer-grey-gas-model","position":29},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"“Radiative forcing” is the change in radiative flux at TOA after adding absorbers","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/sympy-greenhouse#radiative-forcing-is-the-change-in-radiative-flux-at-toa-after-adding-absorbers","position":30},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"“Radiative forcing” is the change in radiative flux at TOA after adding absorbers","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"In this model, only the longwave flux can change, so we define the radiative forcing asR = - \\delta OLR\n\n(with the minus sign so that R is positive when the climate system is gaining extra energy).\n\nWe just worked out that whenever we add some extra absorbers, the emissions to space (on average) will originate from higher levels in the atmosphere.\n\nWhat does this mean for OLR? Will it increase or decrease?\n\nTo get the answer, we just have to sum up the three contributions we wrote above:\n\nR_per_deltaepsilon = -sum(deltaOLR_per_deltaepsilon)\nR_per_deltaepsilon\n\nIs this a positive or negative number? The key point is this:\n\nIt depends on the temperatures, i.e. on the lapse rate.\n\n","type":"content","url":"/courseware/sympy-greenhouse#radiative-forcing-is-the-change-in-radiative-flux-at-toa-after-adding-absorbers","position":31},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/sympy-greenhouse#greenhouse-effect-for-an-isothermal-atmosphere","position":32},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"Stop and think about this question:\n\nIf the surface and atmosphere are all at the same temperature, does the OLR go up or down when \\epsilon increases (i.e. we add more absorbers)?\n\nUnderstanding this question is key to understanding how the greenhouse effect works.\n\n","type":"content","url":"/courseware/sympy-greenhouse#greenhouse-effect-for-an-isothermal-atmosphere","position":33},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Let’s solve the isothermal case","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/sympy-greenhouse#lets-solve-the-isothermal-case","position":34},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Let’s solve the isothermal case","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"We will just set T_s = T_0 = T_1 in the above expression for the radiative forcing.\n\nR_per_deltaepsilon.subs([(T_0, T_s), (T_1, T_s)])\n\nwhich then simplifies to\n\nsympy.simplify(R_per_deltaepsilon.subs([(T_0, T_s), (T_1, T_s)]))\n\n","type":"content","url":"/courseware/sympy-greenhouse#lets-solve-the-isothermal-case","position":35},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"The answer is zero","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/sympy-greenhouse#the-answer-is-zero","position":36},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"The answer is zero","lvl3":"Greenhouse effect for an isothermal atmosphere","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"For an isothermal atmosphere, there is no change in OLR when we add extra greenhouse absorbers. Hence, no radiative forcing and no greenhouse effect.\n\nWhy?\n\nThe level of emission still must go up. But since the temperature at the upper level is the same as everywhere else, the emissions are exactly the same.\n\n","type":"content","url":"/courseware/sympy-greenhouse#the-answer-is-zero","position":37},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"The radiative forcing (change in OLR) depends on the lapse rate!","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/sympy-greenhouse#the-radiative-forcing-change-in-olr-depends-on-the-lapse-rate","position":38},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"The radiative forcing (change in OLR) depends on the lapse rate!","lvl2":"5. Radiative forcing in the 2-layer grey gas model"},"content":"\n\nFor a more realistic example of radiative forcing due to an increase in greenhouse absorbers, we can substitute in our tuned values for temperature and \\epsilon.\n\nWe’ll express the answer in W m^{-2} for a 2% increase in \\epsilon.\n\ndelta_epsilon = 0.02 * epsilon\ndelta_epsilon\n\nThe three components of the OLR change are\n\n(deltaOLR_per_deltaepsilon * delta_epsilon).subs(tuned)\n\nAnd the net radiative forcing is\n\n(R_per_deltaepsilon*delta_epsilon).subs(tuned)\n\nSo in our example, the OLR decreases by 2.6 W m^{-2}, or equivalently, the radiative forcing is +2.6 W m^{-2}.\n\nWhat we have just calculated is this:\n\nGiven the observed lapse rates, a small increase in absorbers will cause a small decrease in OLR.\n\nThe greenhouse effect thus gets stronger, and energy will begin to accumulate in the system -- which will eventually cause temperatures to increase as the system adjusts to a new equilibrium.\n\n","type":"content","url":"/courseware/sympy-greenhouse#the-radiative-forcing-change-in-olr-depends-on-the-lapse-rate","position":39},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-6-radiative-equilibrium-in-the-2-layer-grey-gas-model","position":40},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"content":"\n\nIn the previous section we:\n\nmade no assumptions about the processes that actually set the temperatures.\n\nused the model to calculate radiative fluxes, given observed temperatures.\n\nstressed the importance of knowing the lapse rates in order to know how an increase in emission level would affect the OLR, and thus determine the radiative forcing.\n\nA key question in climate dynamics is therefore this:\n\nWhat sets the lapse rate?\n\nIt turns out that lots of different physical processes contribute to setting the lapse rate.\n\nUnderstanding how these processes acts together and how they change as the climate changes is one of the key reasons for which we need more complex climate models.\n\nFor now, we will use our prototype greenhouse model to do the most basic lapse rate calculation: the radiative equilibrium temperature.\n\nWe assume that\n\nthe only exchange of energy between layers is longwave radiation\n\nequilibrium is achieved when the net radiative flux convergence in each layer is zero.\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-6-radiative-equilibrium-in-the-2-layer-grey-gas-model","position":41},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"type":"lvl3","url":"/courseware/sympy-greenhouse#compute-the-radiative-flux-convergence","position":42},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"content":"First, the net upwelling flux is just the difference between flux up and flux down:\n\n#  Upwelling and downwelling beams as matrices\nU = sympy.Matrix([U_0, U_1, U_2])\nD = sympy.Matrix([D_0, D_1, D_2])\n# Net flux, positive up\nF = U-D\nF\n\n","type":"content","url":"/courseware/sympy-greenhouse#compute-the-radiative-flux-convergence","position":43},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Net absorption is the flux convergence in each layer","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/sympy-greenhouse#net-absorption-is-the-flux-convergence-in-each-layer","position":44},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Net absorption is the flux convergence in each layer","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"content":"(difference between what’s coming in the bottom and what’s going out the top of each layer)\n\n# define a vector of absorbed radiation -- same size as emissions\nA = E.copy()\n\n#  absorbed radiation at surface\nA[0] = F[0]\n# Compute the convergence\nfor n in range(2):\n    A[n+1] = -(F[n+1]-F[n])\n\nA\n\n","type":"content","url":"/courseware/sympy-greenhouse#net-absorption-is-the-flux-convergence-in-each-layer","position":45},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Radiative equilibrium means net absorption is ZERO in the atmosphere","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/sympy-greenhouse#radiative-equilibrium-means-net-absorption-is-zero-in-the-atmosphere","position":46},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Radiative equilibrium means net absorption is ZERO in the atmosphere","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"content":"The only other heat source is the shortwave heating at the surface.\n\nIn matrix form, here is the system of equations to be solved:\n\nradeq = sympy.Equality(A, sympy.Matrix([(1-alpha)*Q, 0, 0]))\nradeq\n\nJust as we did for the 1-layer model, it is helpful to rewrite this system using the definition of the emission temperture T_e(1-\\alpha) Q = \\sigma T_e^4\n\nradeq2 = radeq.subs([((1-alpha)*Q, sigma*T_e**4)])\nradeq2\n\nIn this form we can see that we actually have a linear system of equations for a set of variables T_s^4, T_0^4, T_1^4.\n\nWe can solve this matrix problem to get these as functions of T_e^4.\n\n# Solve for radiative equilibrium \nfourthpower = sympy.solve(radeq2, [T_s**4, T_1**4, T_0**4])\nfourthpower\n\nThis produces a dictionary of solutions for the fourth power of the temperatures!\n\nA little manipulation gets us the solutions for temperatures that we want:\n\n# need the symbolic fourth root operation\nfrom sympy.simplify.simplify import nthroot\n\nfourthpower_list = [fourthpower[key] for key in [T_s**4, T_0**4, T_1**4]]\nsolution = sympy.Matrix([nthroot(item,4) for item in fourthpower_list])\n#  Display result as matrix equation!\nT = sympy.Matrix([T_s, T_0, T_1])\nsympy.Equality(T, solution)\n\nIn more familiar notation, the radiative equilibrium solution is thus\\begin{align} \nT_s &= T_e \\left( \\frac{2+\\epsilon}{2-\\epsilon} \\right)^{1/4} \\\\\nT_0 &= T_e \\left( \\frac{1+\\epsilon}{2-\\epsilon} \\right)^{1/4} \\\\\nT_1 &= T_e \\left( \\frac{ 1}{2 - \\epsilon} \\right)^{1/4}\n\\end{align}\n\nPlugging in the tuned value \\epsilon = 0.586 gives\n\nTsolution = solution.subs(tuned)\n#  Display result as matrix equation!\nsympy.Equality(T, Tsolution)\n\nNow we just need to know the Earth’s emission temperature T_e!\n\n(Which we already know is about 255 K)\n\n# Here's how to calculate T_e from the observed values\nsympy.solve(((1-alpha)*Q - sigma*T_e**4).subs(tuned), T_e)\n\n# Need to unpack the list\nTe_value = sympy.solve(((1-alpha)*Q - sigma*T_e**4).subs(tuned), T_e)[0]\nTe_value\n\n","type":"content","url":"/courseware/sympy-greenhouse#radiative-equilibrium-means-net-absorption-is-zero-in-the-atmosphere","position":47},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Now we finally get our solution for radiative equilibrium","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"type":"lvl4","url":"/courseware/sympy-greenhouse#now-we-finally-get-our-solution-for-radiative-equilibrium","position":48},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl4":"Now we finally get our solution for radiative equilibrium","lvl3":"Compute the radiative flux convergence","lvl2":"6. Radiative equilibrium in the 2-layer grey gas model"},"content":"\n\n#  Output 4 significant digits\nTrad = sympy.N(Tsolution.subs([(T_e, Te_value)]), 4)\nsympy.Equality(T, Trad)\n\nCompare these to the values we derived from the observed lapse rates:\n\nsympy.Equality(T, T.subs(tuned))\n\nThe radiative equilibrium solution is substantially warmer at the surface and colder in the lower troposphere than reality.\n\nThis is a very general feature of radiative equilibrium, and we will see it again very soon in this course.\n\n","type":"content","url":"/courseware/sympy-greenhouse#now-we-finally-get-our-solution-for-radiative-equilibrium","position":49},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"7. Summary"},"type":"lvl2","url":"/courseware/sympy-greenhouse#id-7-summary","position":50},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"7. Summary"},"content":"\n\n","type":"content","url":"/courseware/sympy-greenhouse#id-7-summary","position":51},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"Key physical lessons"},"type":"lvl2","url":"/courseware/sympy-greenhouse#key-physical-lessons","position":52},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"Key physical lessons"},"content":"Putting a layer of longwave absorbers above the surface keeps the surface substantially warmer, because of the backradiation from the atmosphere (greenhouse effect).\n\nThe grey gas model assumes that each layer absorbs and emits a fraction \\epsilon of its blackbody value, independent of wavelength.\n\nWith incomplete absorption (\\epsilon < 1), there are contributions to the OLR from every level and the surface (there is no single level of emission)\n\nAdding more absorbers means that contributions to the OLR from upper levels go up, while contributions from the surface go down.\n\nThis upward shift in the weighting of different levels is what we mean when we say the level of emission goes up.\n\nThe radiative forcing caused by an increase in absorbers depends on the lapse rate.\n\nFor an isothermal atmosphere the radiative forcing is zero and there is no greenhouse effect\n\nThe radiative forcing is positive for our atmosphere because tropospheric temperatures tends to decrease with height.\n\nPure radiative equilibrium produces a warm surface and cold lower troposphere.\n\nThis is unrealistic, and suggests that crucial heat transfer mechanisms are missing from our model.\n\n","type":"content","url":"/courseware/sympy-greenhouse#key-physical-lessons","position":53},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"And on the Python side...","lvl2":"Key physical lessons"},"type":"lvl3","url":"/courseware/sympy-greenhouse#and-on-the-python-side","position":54},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"And on the Python side...","lvl2":"Key physical lessons"},"content":"Did we need sympy to work all this out? No, of course not. We could have solved the 3x3 matrix problems by hand. But computer algebra can be very useful and save you a lot of time and error, so it’s good to invest some effort into learning how to use it.\n\nHopefully these notes provide a useful starting point.\n\n","type":"content","url":"/courseware/sympy-greenhouse#and-on-the-python-side","position":55},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"A follow-up assignment","lvl2":"Key physical lessons"},"type":"lvl3","url":"/courseware/sympy-greenhouse#a-follow-up-assignment","position":56},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl3":"A follow-up assignment","lvl2":"Key physical lessons"},"content":"You are now ready to tackle a follow-up assignment where you are asked to extend this grey-gas analysis to many layers.\n\nFor more than a few layers, the analytical approach we used here is no longer very useful. You will code up a numerical solution to calculate OLR given temperatures and absorptivity, and look at how the lapse rate determines radiative forcing for a given increase in absorptivity.\n\n","type":"content","url":"/courseware/sympy-greenhouse#a-follow-up-assignment","position":57},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"Credits"},"type":"lvl2","url":"/courseware/sympy-greenhouse#credits","position":58},{"hierarchy":{"lvl1":"Advanced topic: Solving the two-layer grey gas model analytically with sympy","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/sympy-greenhouse#credits","position":59},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM"},"type":"lvl1","url":"/courseware/transient-cesm","position":0},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\nI have run two sets of experiments with the CESM model:\n\nThe fully coupled model:\n\npre-industrial control\n\n1%/year CO_2 ramp scenario for 80 years\n\nThe slab ocean model:\n\npre-industrial control with prescribed q-flux\n\n2xCO_2 scenario run out to equilibrium\n\nOur main first task is to compute the two canonical measures of climate sensitivity for this model:\n\nEquilibrium Climate Sensitivity (ECS)\n\nTransient Climate Response (TCR)\n\nFrom the IPCC AR5 WG1 report, Chapter 9, page 817:\n\nEquilibrium climate sensitivity (ECS) is the equilibrium change in global and annual mean surface air temperature after doubling the atmos- pheric concentration of CO2 relative to pre-industrial levels.\n\nThe transient climate response (TCR) is the change in global and annual mean surface temperature from an experiment in which the CO2 concentration is increased by 1% yr^{–1}, and calculated using the difference between the start of the experiment and a 20-year period centred on the time of CO2 doubling.\n\n","type":"content","url":"/courseware/transient-cesm","position":1},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"First, a quick demonstration that 1%/year compounded increase reaches doubling after 70 years"},"type":"lvl3","url":"/courseware/transient-cesm#first-a-quick-demonstration-that-1-year-compounded-increase-reaches-doubling-after-70-years","position":2},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"First, a quick demonstration that 1%/year compounded increase reaches doubling after 70 years"},"content":"\n\nstartingamount = 1.\namount = startingamount\nfor n in range(70):\n    amount *= 1.01\namount\n\nTCR is always smaller than ECS due to the transient effects of ocean heat uptake.\n\nWe are going to estimate the ECS of the fully coupled model by using the equilibrium response of the Slab Ocean .\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\n\n","type":"content","url":"/courseware/transient-cesm#first-a-quick-demonstration-that-1-year-compounded-increase-reaches-doubling-after-70-years","position":3},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Load the concatenated output from the CAM output (atmosphere)"},"type":"lvl2","url":"/courseware/transient-cesm#load-the-concatenated-output-from-the-cam-output-atmosphere","position":4},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Load the concatenated output from the CAM output (atmosphere)"},"content":"\n\ncasenames = {'cpl_control': 'cpl_1850_f19',\n             'cpl_CO2ramp': 'cpl_CO2ramp_f19',\n             'som_control': 'som_1850_f19',\n             'som_2xCO2':   'som_1850_2xCO2',\n            }\n# The path to the THREDDS server, should work from anywhere\nbasepath = 'http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/'\n# For better performance if you can access the roselab_rit filesystem (e.g. from JupyterHub)\n# basepath = '/roselab_rit/cesm_archive/'\ncasepaths = {}\nfor name in casenames:\n    casepaths[name] = basepath + casenames[name] + '/concatenated/'\n\n# make a dictionary of all the CAM atmosphere output\natm = {}\nfor name in casenames:\n    path = casepaths[name] + casenames[name] + '.cam.h0.nc'\n    print('Attempting to open the dataset ', path)\n    atm[name] = xr.open_dataset(path, decode_times=False)\n\n","type":"content","url":"/courseware/transient-cesm#load-the-concatenated-output-from-the-cam-output-atmosphere","position":5},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"A plot of the prescribed CO2 concentrations in the coupled simulations","lvl2":"Load the concatenated output from the CAM output (atmosphere)"},"type":"lvl3","url":"/courseware/transient-cesm#a-plot-of-the-prescribed-co2-concentrations-in-the-coupled-simulations","position":6},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"A plot of the prescribed CO2 concentrations in the coupled simulations","lvl2":"Load the concatenated output from the CAM output (atmosphere)"},"content":"\n\ndays_per_year = 365\nfig, ax = plt.subplots()\nfor name in ['cpl_control', 'cpl_CO2ramp']:\n    ax.plot(atm[name].time/days_per_year, atm[name].co2vmr*1E6, label=name)\nax.set_title('CO2 volume mixing ratio (CESM coupled simulations)')\nax.set_xlabel('Years')\nax.set_ylabel('pCO2 (ppm)')\nax.grid()\nax.legend();\n\nIssues to think about:\n\nWhy do we talk about fractional changes in CO_2, such as “doubling atmospheric CO_2”, and \"1%/year compounded CO_2 increase?\n\nWhy not instead talk about changes in absolute amounts of CO_2?\n\nThe answer is closely related to the fact that the radiative forcing associated with CO_2 increase is approximately logarithmic in CO_2 amount. So a doubling of CO_2 represents roughly the same radiative forcing regardless of the initial CO_2 concentration.\n\n","type":"content","url":"/courseware/transient-cesm#a-plot-of-the-prescribed-co2-concentrations-in-the-coupled-simulations","position":7},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Compute and plot time series of global, annual mean near-surface air temperature in all four simulations"},"type":"lvl2","url":"/courseware/transient-cesm#compute-and-plot-time-series-of-global-annual-mean-near-surface-air-temperature-in-all-four-simulations","position":8},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Compute and plot time series of global, annual mean near-surface air temperature in all four simulations"},"content":"\n\n# The surface air temperature, which we will use for our sensitivity metrics\natm['cpl_control'].TREFHT\n\n#  The area weighting needed for global averaging\ngw = atm['som_control'].gw\nprint(gw)\n\ndef global_mean(field, weight=gw):\n    '''Return the area-weighted global average of the input field'''\n    return (field*weight).mean(dim=('lat','lon'))/weight.mean(dim='lat')\n\n#  Loop through the four simulations and produce the global mean timeseries\nTREFHT_global = {}\nfor name in casenames:\n    TREFHT_global[name] = global_mean(atm[name].TREFHT)\n\n","type":"content","url":"/courseware/transient-cesm#compute-and-plot-time-series-of-global-annual-mean-near-surface-air-temperature-in-all-four-simulations","position":9},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl4":"Make some pretty timeseries plots, including an approximate running annual average","lvl2":"Compute and plot time series of global, annual mean near-surface air temperature in all four simulations"},"type":"lvl4","url":"/courseware/transient-cesm#make-some-pretty-timeseries-plots-including-an-approximate-running-annual-average","position":10},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl4":"Make some pretty timeseries plots, including an approximate running annual average","lvl2":"Compute and plot time series of global, annual mean near-surface air temperature in all four simulations"},"content":"\n\nfig, axes = plt.subplots(2,1,figsize=(10,8))\nfor name in casenames:\n    if 'cpl' in name:\n        ax = axes[0]\n        ax.set_title('Fully coupled ocean')\n    else:\n        ax = axes[1]\n        ax.set_title('Slab ocean')\n    field = TREFHT_global[name]\n    field_running = field.rolling(time=12, center=True).mean()\n    line = ax.plot(field.time / days_per_year, \n                   field, \n                   label=name,\n                   linewidth=0.75,\n                   )\n    ax.plot(field_running.time / days_per_year, \n            field_running, \n            color=line[0].get_color(),\n            linewidth=2,\n           )\nfor ax in axes:\n    ax.legend();\n    ax.set_xlabel('Years')\n    ax.set_ylabel('Temperature (K)')\n    ax.grid();\n    ax.set_xlim(0,100)\nfig.suptitle('Global mean surface air temperature in CESM simulations', fontsize=16);\n\nIssues to think about here include:\n\nWhy is the annual average here only approximate? (think about the calendar)\n\nWhy is there an annual cycle in the global average temperature? (planet is coldest during NH winter)\n\nDifferent character of the temperature variability in the coupled vs. slab model\n\nMuch more rapid warming in the Slab Ocean Model\n\n","type":"content","url":"/courseware/transient-cesm#make-some-pretty-timeseries-plots-including-an-approximate-running-annual-average","position":11},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Now we can work on computing ECS and TCR"},"type":"lvl2","url":"/courseware/transient-cesm#now-we-can-work-on-computing-ecs-and-tcr","position":12},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Now we can work on computing ECS and TCR"},"content":"\n\n# extract the last 10 years from the slab ocean control simulation\n# and the last 20 years from the coupled control\nnyears_slab = 10\nnyears_cpl = 20\nclim_slice_slab = slice(-(nyears_slab*12),None)\nclim_slice_cpl = slice(-(nyears_cpl*12),None)\n\n# extract the last 10 years from the slab ocean control simulation\nT0_slab = TREFHT_global['som_control'].isel(time=clim_slice_slab).mean(dim='time')\nT0_slab\n\n# and the last 20 years from the coupled control\nT0_cpl = TREFHT_global['cpl_control'].isel(time=clim_slice_cpl).mean(dim='time')\nT0_cpl\n\n# extract the last 10 years from the slab 2xCO2 simulation\nT2x_slab = TREFHT_global['som_2xCO2'].isel(time=clim_slice_slab).mean(dim='time')\nT2x_slab\n\n# extract the last 20 years from the coupled CO2 ramp simulation\nT2x_cpl = TREFHT_global['cpl_CO2ramp'].isel(time=clim_slice_cpl).mean(dim='time')\nT2x_cpl\n\nECS = T2x_slab - T0_slab\nTCR = T2x_cpl - T0_cpl\nprint('The Equilibrium Climate Sensitivity is {:.3} K.'.format(float(ECS)))\nprint('The Transient Climate Response is {:.3} K.'.format(float(TCR)))\n\n","type":"content","url":"/courseware/transient-cesm#now-we-can-work-on-computing-ecs-and-tcr","position":13},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Some CMIP climate sensitivity results to compare against"},"type":"lvl2","url":"/courseware/transient-cesm#some-cmip-climate-sensitivity-results-to-compare-against","position":14},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Some CMIP climate sensitivity results to compare against"},"content":"Figure and table from \n\nFlato et al. (2013)\n\n\n\nFigure 9.43 | (a) Strengths of individual feedbacks for CMIP3 and CMIP5 models (left and right columns of symbols) for Planck (P), water vapour (WV), clouds (C), albedo (A), lapse rate (LR), combination of water vapour and lapse rate (WV+LR) and sum of all feedbacks except Planck (ALL), from Soden and Held (2006) and Vial et al. (2013), following Soden et al. (2008). CMIP5 feedbacks are derived from CMIP5 simulations for abrupt fourfold increases in CO2 concentrations (4 × CO2). (b) ECS obtained using regression techniques by Andrews et al. (2012) against ECS estimated from the ratio of CO2 ERF to the sum of all feedbacks. The CO2 ERF is one-half the 4 × CO2 forcings from Andrews et al. (2012), and the total feedback (ALL + Planck) is from Vial et al. (2013).\n\nFigure caption reproduced from the AR5 WG1 report \n\nFlato et al., 2013\n\n\n\nComparing against the multi-model mean of the ECS and TCR, our model is apparently slightly less sensitive than the CMIP5 mean.\n\n","type":"content","url":"/courseware/transient-cesm#some-cmip-climate-sensitivity-results-to-compare-against","position":15},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Let’s make some maps to compare spatial patterns of transient vs. equilibrium warming"},"type":"lvl2","url":"/courseware/transient-cesm#lets-make-some-maps-to-compare-spatial-patterns-of-transient-vs-equilibrium-warming","position":16},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Let’s make some maps to compare spatial patterns of transient vs. equilibrium warming"},"content":"\n\nHere is a helper function that takes a 2D lat/lon field and renders it as a nice contour map with accompanying zonal average line plot.\n\n# The map projection capabilities come from the cartopy package. There are many possible projections\nimport cartopy.crs as ccrs\nfrom cartopy.util import add_cyclic_point\n\ndef make_map(field, title=\"\", levels=8):\n    '''input field should be a 2D xarray.DataArray on a lat/lon grid.\n        Make a filled contour plot of the field, and a line plot of the zonal mean\n    '''\n    fig = plt.figure(figsize=(14,6))\n    nrows = 10; ncols = 3\n    mapax = plt.subplot2grid((nrows,ncols), (0,0), colspan=ncols-1, rowspan=nrows-1, projection=ccrs.Robinson())\n    barax = plt.subplot2grid((nrows,ncols), (nrows-1,0), colspan=ncols-1)\n    plotax = plt.subplot2grid((nrows,ncols), (0,ncols-1), rowspan=nrows-1)\n    # add cyclic point so cartopy doesn't show a white strip at zero longitude\n    wrap_data, wrap_lon = add_cyclic_point(field.values, coord=field.lon, axis=field.dims.index('lon'))\n    cx = mapax.contourf(wrap_lon, field.lat, wrap_data, levels=levels, transform=ccrs.PlateCarree())\n    mapax.set_global(); mapax.coastlines();\n    plt.colorbar(cx, cax=barax, orientation='horizontal', label='Surface air temperature (K)')\n    plotax.plot(field.mean(dim='lon'), field.lat)\n    plotax.set_xlabel('Zonal mean (K)')\n    plotax.set_ylabel('Latitude')\n    plotax.grid()\n    fig.suptitle(title, fontsize=16)\n    return fig, (mapax, plotax, barax), cx\n\n# Plot a single time slice of surface air temperature just as example\nfig, axes, cx = make_map(atm['cpl_control'].TREFHT.isel(time=0), \n                        title=\"Surface air temperature in the coupled control simulation\")\n\n","type":"content","url":"/courseware/transient-cesm#lets-make-some-maps-to-compare-spatial-patterns-of-transient-vs-equilibrium-warming","position":17},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"Make maps of the surface air temperature anomaly due to CO2 doubling in both the slab and coupled models","lvl2":"Let’s make some maps to compare spatial patterns of transient vs. equilibrium warming"},"type":"lvl3","url":"/courseware/transient-cesm#make-maps-of-the-surface-air-temperature-anomaly-due-to-co2-doubling-in-both-the-slab-and-coupled-models","position":18},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl3":"Make maps of the surface air temperature anomaly due to CO2 doubling in both the slab and coupled models","lvl2":"Let’s make some maps to compare spatial patterns of transient vs. equilibrium warming"},"content":"\n\nTmap_cpl_2x = atm['cpl_CO2ramp'].TREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nTmap_cpl_control = atm['cpl_control'].TREFHT.isel(time=clim_slice_cpl).mean(dim='time')\nDeltaT_cpl = Tmap_cpl_2x - Tmap_cpl_control\n\nTmap_som_2x = atm['som_2xCO2'].TREFHT.isel(time=clim_slice_slab).mean(dim='time')\nTmap_som_control = atm['som_control'].TREFHT.isel(time=clim_slice_slab).mean(dim='time')\nDeltaT_som = Tmap_som_2x - Tmap_som_control\n\ncontours = np.arange(0., 8.5, 0.5)\nfig, axes, cx = make_map(DeltaT_cpl, levels=contours,\n                        title=\"Surface air temperature anomaly (coupled transient)\")\naxes[1].set_xlim(0,7)  # ensure the line plots have same axes\n\nfig, axes,cx  = make_map(DeltaT_som, levels=contours,\n                         title=\"Surface air temperature anomaly (equilibrium SOM)\")\naxes[1].set_xlim(0,7)\n\nLots of intersting phenomena to think about here, including:\n\nPolar amplification of surface warming\n\nReduction in equator-to-pole temperature gradients\n\nMuch larger polar amplification in SOM than in transient -- especially over the Southern Ocean (the delayed warming of the Southern Ocean)\n\nNorth Atlantic warming hole present in transient but not in equilibrium SOM.\n\nLand-ocean warming contrast: larger in transient, but still present in equilibrium\n\n","type":"content","url":"/courseware/transient-cesm#make-maps-of-the-surface-air-temperature-anomaly-due-to-co2-doubling-in-both-the-slab-and-coupled-models","position":19},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Appendix: for later reference, here is how you can open the other output types"},"type":"lvl2","url":"/courseware/transient-cesm#appendix-for-later-reference-here-is-how-you-can-open-the-other-output-types","position":20},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Appendix: for later reference, here is how you can open the other output types"},"content":"The following will open the rest of the CESM output (land, sea ice, river routing, ocean).\n\nThese are not needed for the above homework assignment, but may be useful later on.\n\n# # make a dictionary of all the CLM land model output\n# land = {}\n# for name in casenames:\n#     path = casepaths[name] + casenames[name] + '.clm2.h0.nc'\n#     print('Attempting to open the dataset ', path)\n#     land[name] = xr.open_dataset(path)\n\n# # make a dictionary of all the sea ice model output\n# ice = {}\n# for name in casenames:\n#     path = casepaths[name] + casenames[name] + '.cice.h.nc'\n#     print('Attempting to open the dataset ', path)\n#     ice[name] = xr.open_dataset(path)\n\n# # make a dictionary of all the river transport output\n# rtm = {}\n# for name in casenames:\n#     path = casepaths[name] + casenames[name] + '.rtm.h0.nc'\n#     print('Attempting to open the dataset ', path)\n#     rtm[name] = xr.open_dataset(path)\n\n# ocn = {}\n# for name in casenames:\n#     if 'cpl' in name:\n#         path = casepaths[name] + casenames[name] + '.pop.h.nc'\n#         print('Attempting to open the dataset ', path)\n#         ocn[name] = xr.open_dataset(path)\n\n","type":"content","url":"/courseware/transient-cesm#appendix-for-later-reference-here-is-how-you-can-open-the-other-output-types","position":21},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Credits"},"type":"lvl2","url":"/courseware/transient-cesm#credits","position":22},{"hierarchy":{"lvl1":"Examing the transient and equilibrium CO2 response in the CESM","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/transient-cesm#credits","position":23},{"hierarchy":{"lvl1":"Toy models of transient warming"},"type":"lvl1","url":"/courseware/transient-toy","position":0},{"hierarchy":{"lvl1":"Toy models of transient warming"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.","type":"content","url":"/courseware/transient-toy","position":1},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Exploring the rate of climate change"},"type":"lvl2","url":"/courseware/transient-toy#exploring-the-rate-of-climate-change","position":2},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Exploring the rate of climate change"},"content":"\n\nIn the last set of notes and homework we discussed differences between equilibrium warming and transient warming due to the slowly-evolving effects of ocean heat uptake.\n\nHere we are going to look at some toy climate models and think about relationships between climate sensitivity, ocean heat uptake, and timescales.\n\n","type":"content","url":"/courseware/transient-toy#exploring-the-rate-of-climate-change","position":3},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Two versions of Radiative-Convective Equilibrium with different climate sensitivities"},"type":"lvl2","url":"/courseware/transient-toy#two-versions-of-radiative-convective-equilibrium-with-different-climate-sensitivities","position":4},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Two versions of Radiative-Convective Equilibrium with different climate sensitivities"},"content":"We are going set up two different single-column model with different lapse rate feedbacks.\n\nWe begin by repeating the same setup we have done several times before, building a single-column RCM with prescribed water vapor profile.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport climlab\n\n# Get the water vapor data from CESM output\ncesm_data_path = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\natm_control = xr.open_dataset(cesm_data_path + \"cpl_1850_f19/concatenated/cpl_1850_f19.cam.h0.nc\")\n# Take global, annual average of the specific humidity\nweight_factor = atm_control.gw / atm_control.gw.mean(dim='lat')\nQglobal = (atm_control.Q * weight_factor).mean(dim=('lat','lon','time'))\n\n#  Make a model on same vertical domain as the GCM\nstate = climlab.column_state(lev=Qglobal.lev, water_depth=2.5)\nsteps_per_year = 90\ndeltat = climlab.constants.seconds_per_year/steps_per_year\nrad = climlab.radiation.RRTMG(name='Radiation',\n                              state=state, \n                              specific_humidity=Qglobal.values,\n                              timestep = deltat,\n                              albedo = 0.25,  # tuned to give reasonable ASR for reference cloud-free model\n                             )\nconv = climlab.convection.ConvectiveAdjustment(name='Convection',\n                                               state=state,\n                                               adj_lapse_rate=6.5,\n                                               timestep=rad.timestep,)\nrcm_control = climlab.couple([rad,conv], name='Radiative-Convective Model')\n\nIntegrate the control model out to equilibrium.\n\nrcm_control.integrate_years(5)\nrcm_control.ASR - rcm_control.OLR\n\nNow let’s make two copies of this model and keep them in a list:\n\nslab_control = []\nslab_control.append(rcm_control)\nslab_control.append(climlab.process_like(rcm_control))\n\nWe are going to double CO_2 in both models and label them as high and low sensitivity. We will build in different feedbacks into our two columns.\n\nslab_2x = []\nfor n in range(len(slab_control)):\n    rcm_2xCO2 = climlab.process_like(rcm_control)\n    rcm_2xCO2.subprocess['Radiation'].absorber_vmr['CO2'] *= 2.\n    if n == 0:\n        rcm_2xCO2.name = 'High-sensitivity RCM'\n    elif n == 1:\n        rcm_2xCO2.name = 'Low-sensitivity RCM'\n    slab_2x.append(rcm_2xCO2)\n\nWe will implement a water vapor feedback as we have done before: by recomputing the specific humidity at every timestep using the current temperatures so that the relative humidity stays fixed.\n\nWe begin by computing the relative humidity profile from the control climate.\n\n#  actual specific humidity\nq = rcm_control.subprocess['Radiation'].specific_humidity\n#  saturation specific humidity (a function of temperature and pressure)\nqsat = climlab.utils.thermo.qsat(rcm_control.Tatm, rcm_control.lev)\n#  Relative humidity\nrh = q/qsat\n\nNow here is where our two models will differ:\n\nWe are going to assign them different lapse rate feedbacks.\n\nSimilar to the exercise in \n\nthis homework assignment, we are going to assume\\Gamma = \\Gamma_{ref} + \\gamma * \\Delta T_s\n\nwhere \\Gamma_{ref} = 6.5 K/km is the critical lapse rate in our control climate, and \\gamma is a number in units of km^{-1} that determines how much the critical lapse rate should change per degree warming.\n\nWe are going to investigate two different assumptions:\n\ntemperatures decrease more with height under global warming, \\gamma = +0.3 km^{-1}\n\ntemperature decrease less with height under global warming, \\gamma = -0.3 km^{-1}\n\nlapse_change_factor = [+0.3, -0.3]\n\nfor n in range(len(slab_2x)):\n    rcm_2xCO2 = slab_2x[n]\n    print('Integrating ' + rcm_2xCO2.name)\n    for m in range(5 * steps_per_year):\n        # At every timestep\n        # we calculate the new saturation specific humidity for the new temperature\n        #  and change the water vapor in the radiation model\n        #  so that relative humidity is always the same\n        qsat = climlab.utils.thermo.qsat(rcm_2xCO2.Tatm, rcm_2xCO2.lev)\n        rcm_2xCO2.subprocess['Radiation'].specific_humidity[:] = rh * qsat\n        #  We also adjust the critical lapse rate in our convection model\n        DeltaTs = rcm_2xCO2.Ts - rcm_control.Ts\n        rcm_2xCO2.subprocess['Convection'].adj_lapse_rate = 6.5 + lapse_change_factor[n]*DeltaTs\n        rcm_2xCO2.step_forward()\n    imbalance = (rcm_2xCO2.ASR - rcm_2xCO2.OLR).squeeze()  # convert to a single scalar\n    ecs = (rcm_2xCO2.Ts - rcm_control.Ts).squeeze()\n    print('The TOA imbalance is {:.2e} W/m2'.format(imbalance))\n    print('The ECS is {:.2f} K'.format(ecs))\n    print('')\n\nSo Model 0 (in which the lapse rates have gotten larger) is more sensitive than Model 1 (smaller lapse rates). It has a larger system gain, or a more positive overall climate feedback.\n\nAlthough this is not the main topic of today’s lesson, it’s still interesting to think about why the lapse rates affect the climate sensivitity in this way...\n\n","type":"content","url":"/courseware/transient-toy#two-versions-of-radiative-convective-equilibrium-with-different-climate-sensitivities","position":5},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Time to reach equilibrium"},"type":"lvl2","url":"/courseware/transient-toy#time-to-reach-equilibrium","position":6},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Time to reach equilibrium"},"content":"These models reached their new equilibria in just a few years. Why is that? Because they have very little heat capacity:\n\nslab_control[0].depth_bounds\n\nThe “ocean” in these models is just a “slab” of water 2.5 meter deep.\n\nThat’s all we need to calculate the equilibrium temperatures, but it tells us nothing about the timescales for climate change in the real world.\n\nFor this, we need a deep ocean that can exchange heat with the surface.\n\n","type":"content","url":"/courseware/transient-toy#time-to-reach-equilibrium","position":7},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Transient warming scenarios in column models with ocean heat uptake"},"type":"lvl2","url":"/courseware/transient-toy#transient-warming-scenarios-in-column-models-with-ocean-heat-uptake","position":8},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Transient warming scenarios in column models with ocean heat uptake"},"content":"\n\nWe are now going to build two new models. The atmosphere (radiative-convective model) will be identical to the two “slab” models we just used. But these will be coupled to a column of ocean water 2000 m deep!\n\nWe will parameterize the ocean heat uptake as a diffusive mixing process. Much like when we discussed the diffusive parameterization for atmospheric heat transport -- we are assuming that ocean dynamics result in a vertical mixing of heat from warm to cold temperatures.\n\nThe following code will set this up for us.\n\nWe will make one more assumption, just for the sake of illustration:\n\nThe more sensitive model (Model 0) is also more efficent at taking up heat into the deep ocean\n\n#  Create the domains\nocean_bounds = np.arange(0., 2010., 100.)\ndepthax = climlab.Axis(axis_type='depth', bounds=ocean_bounds)\nocean = climlab.domain.domain.Ocean(axes=depthax)\natm = slab_control[0].Tatm.domain\n\n#  Model 0 has a higher ocean heat diffusion coefficient -- \n#  a more efficent deep ocean heat sink\nocean_diff = [5.E-4, 3.5E-4]\n\n#  List of deep ocean models\ndeep = []\nfor n in range(len(slab_control)):\n    rcm_control = slab_control[n]\n    #  Create the state variables\n    Tinitial_ocean = rcm_control.Ts * np.ones(ocean.shape)\n    Tocean = climlab.Field(Tinitial_ocean.copy(), domain=ocean)\n    Tatm = climlab.Field(rcm_control.Tatm.copy(), domain=atm)\n\n    #  Surface temperature Ts is the upper-most grid box of the ocean\n    Ts = Tocean[0:1]\n    atm_state = {'Tatm': Tatm, 'Ts': Ts}\n    \n    rad = climlab.radiation.RRTMG(name='Radiation',\n                                  state=atm_state, \n                                  specific_humidity=Qglobal.values,\n                                  timestep = deltat,\n                                  albedo = 0.25,  \n                                 )\n    conv = climlab.convection.ConvectiveAdjustment(name='Convection',\n                                                   state=atm_state,\n                                                   adj_lapse_rate=6.5,\n                                                   timestep=rad.timestep,)\n\n    model = rad + conv\n    if n == 0:\n        model.name = 'RCM with high sensitivity and efficient heat uptake'\n    elif n == 1:\n        model.name = 'RCM with low sensitivity and inefficient heat uptake'\n    model.set_state('Tocean', Tocean)\n    diff = climlab.dynamics.Diffusion(state={'Tocean': model.Tocean}, \n                                K=ocean_diff[n], \n                                diffusion_axis='depth', \n                                timestep=deltat * 10,)\n    model.add_subprocess('Ocean Heat Uptake', diff)\n    print('')\n    print(model)\n    print('')\n    deep.append(model)\n\n","type":"content","url":"/courseware/transient-toy#transient-warming-scenarios-in-column-models-with-ocean-heat-uptake","position":9},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"An idealized transient global warming scenario: CO2 increases by 1%/year to doubling."},"type":"lvl2","url":"/courseware/transient-toy#an-idealized-transient-global-warming-scenario-co2-increases-by-1-year-to-doubling","position":10},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"An idealized transient global warming scenario: CO2 increases by 1%/year to doubling."},"content":"\n\nNow consider the CO_2 increase. In the real world, CO_2 has been increasing every year since the beginning of industrialization. Future CO_2 concentrations depend on collective choices made by human societies about how much fossil fuel to extract and burn.\n\nWe will set up a simple scenario. Suppose that CO_2 increases by 1% of its existing concentration every year until it reaches 2x its initial concentration. This takes about 70 years.\n\nAfter 70 years, we assume that all anthropogenic emissions, and CO_2 concentration is stabilized at the 2x level.\n\nWhat happens to the surface temperature?\n\nHow do the histories of surface and deep ocean temperature compare in our two models?\n\nWe are going to simulation 400 years of transient global warming in the two models.\n\nCaution\n\nThis code will take a long time to run! While it’s running, we’ll think about what the result might look like.\n\nnum_years = 400\nyears = np.arange(num_years+1)\n\nTsarray = []\nTocean = []\nnetrad = []\nfor n in range(len(deep)):\n    thisTs = np.nan * np.zeros(num_years+1)\n    thisnetrad = np.nan * np.zeros(num_years+1)\n    thisTocean = np.nan * np.zeros((deep[n].Tocean.size, num_years+1))\n    thisTs[0] = deep[n].Ts.squeeze()\n    thisnetrad[0] = (deep[n].ASR - deep[n].OLR).squeeze()\n    thisTocean[:, 0] = deep[n].Tocean\n    Tsarray.append(thisTs)\n    Tocean.append(thisTocean)\n    netrad.append(thisnetrad)\n    \nCO2initial = deep[0].subprocess['Radiation'].absorber_vmr['CO2']\nCO2array = np.nan * np.zeros(num_years+1)\nCO2array[0] = CO2initial * 1E6\n\n#  Increase CO2 by 1% / year for 70 years (until doubled), and then hold constant\nfor y in range(num_years):\n    if deep[0].subprocess['Radiation'].absorber_vmr['CO2'] < 2 * CO2initial:\n        for model in deep:\n            model.subprocess['Radiation'].absorber_vmr['CO2'] *= 1.01\n    CO2array[y+1] = deep[0].subprocess['Radiation'].absorber_vmr['CO2'] * 1E6\n    print('Year ', y+1, ', CO2 mixing ratio is ', CO2array[y+1],' ppm.')\n\n    for n, model in enumerate(deep):\n        for m in range(steps_per_year):            \n            qsat = climlab.utils.thermo.qsat(model.Tatm, model.lev)\n            model.subprocess['Radiation'].specific_humidity[:] = rh * qsat\n            DeltaTs = model.Ts - slab_control[n].Ts\n            model.subprocess['Convection'].adj_lapse_rate = 6.5 + lapse_change_factor[n]*DeltaTs\n            model.step_forward()\n            \n            Tsarray[n][y+1] = model.Ts.squeeze()\n            Tocean[n][:, y+1] = model.Tocean\n            netrad[n][y+1] = (model.ASR - model.OLR).squeeze()\n\ncolorlist = ['b', 'r']\nco2color = 'k'\n\nnum_axes = len(deep) + 1\nfig, ax = plt.subplots(num_axes, figsize=(12,14))\n\n# Twin the x-axis twice to make independent y-axes.\ntopaxes = [ax[0], ax[0].twinx(), ax[0].twinx()]\n\n# Make some space on the right side for the extra y-axis.\nfig.subplots_adjust(right=0.85)\n\n# Move the last y-axis spine over to the right by 10% of the width of the axes\ntopaxes[-1].spines['right'].set_position(('axes', 1.1))\n\n# To make the border of the right-most axis visible, we need to turn the frame\n# on. This hides the other plots, however, so we need to turn its fill off.\ntopaxes[-1].set_frame_on(True)\ntopaxes[-1].patch.set_visible(False)\n\nfor n, model in enumerate(slab_2x):\n    topaxes[0].plot(model.Ts*np.ones_like(Tsarray[n]), '--', color=colorlist[n])\ntopaxes[0].set_ylabel('Surface temperature (K)')\ntopaxes[0].set_xlabel('Years')\ntopaxes[0].set_title('Transient warming scenario: 1%/year CO2 increase to doubling, followed by CO2 stabilization', fontsize=14)\ntopaxes[0].legend(['Model 0', 'Model 1'], loc='lower right')\n\ntopaxes[1].plot(CO2array, color=co2color)\ntopaxes[1].set_ylabel('CO2 (ppm)', color=co2color)\nfor tl in topaxes[1].get_yticklabels():\n    tl.set_color(co2color)\ntopaxes[1].set_ylim(300., 1000.)\n\ntopaxes[2].set_ylabel('TOA imbalance (W/m2)', color='b')\nfor tl in topaxes[2].get_yticklabels():\n    tl.set_color('b')\ntopaxes[2].set_ylim(0, 3)\n\n\ncontour_levels = np.arange(-0.25, 3.25, 0.25)\nfor n in range(len(deep)):\n    cax = ax[n+1].contourf(years, deep[n].depth, Tocean[n] - Tsarray[n][0], levels=contour_levels)\n    ax[n+1].invert_yaxis()\n    ax[n+1].set_ylabel('Depth (m)')\n    ax[n+1].set_xlabel('Years')\n\n\nfor n, model in enumerate(deep):\n    topaxes[0].plot(Tsarray[n], color=colorlist[n])\n    topaxes[2].plot(netrad[n], ':', color=colorlist[n])\n    for n in range(len(deep)):\n        cax = ax[n+1].contourf(years, deep[n].depth, Tocean[n] - Tsarray[n][0], levels=contour_levels)    \ntopaxes[1].plot(CO2array, color=co2color)\n\nfig.subplots_adjust(bottom=0.12)\ncbar_ax = fig.add_axes([0.25, 0.02, 0.5, 0.03])\nfig.colorbar(cax, cax=cbar_ax, orientation='horizontal');\n\n","type":"content","url":"/courseware/transient-toy#an-idealized-transient-global-warming-scenario-co2-increases-by-1-year-to-doubling","position":11},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Transient vs. equilibrium warming: key points"},"type":"lvl2","url":"/courseware/transient-toy#transient-vs-equilibrium-warming-key-points","position":12},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Transient vs. equilibrium warming: key points"},"content":"During the first 70 years, the radiative forcing goes up every year\n\nThe warming in the two models is almost identical during this phase\n\nAfter year 70, the CO_2 levels are stable and so the radiative forcing is no longer increasing\n\nBoth models continue to warm for hundreds of years\n\nThe difference between the two models become larger over time\n\nIn either case, at the time of CO_2 doubling the model has achieved only a fraction of its equilibrium surface warming.\n\nThe difference between the warming at year 70 and the equilibrium warming is called the committed warming. It is the global warming associated with CO_2 emissions that are already in the atmosphere.\n\nHow do we know at year 70 what the committed warming is?  Are we on the blue or the red path? At year 70, have we achieved half or only a third of the eventual equilibrium warming?\n\nIn our example, the more sensitive model also has more efficient ocean heat uptake, so the initial warming looks identical.\n\nUncertainties in both climate feedback processes and ocean heat uptake processes contribute to uncertainty in the rate of global warming\n\n","type":"content","url":"/courseware/transient-toy#transient-vs-equilibrium-warming-key-points","position":13},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Results from comprehensive coupled GCMs"},"type":"lvl2","url":"/courseware/transient-toy#results-from-comprehensive-coupled-gcms","position":14},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Results from comprehensive coupled GCMs"},"content":"\n\n","type":"content","url":"/courseware/transient-toy#results-from-comprehensive-coupled-gcms","position":15},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl3":"Fast and slow components of the warming","lvl2":"Results from comprehensive coupled GCMs"},"type":"lvl3","url":"/courseware/transient-toy#fast-and-slow-components-of-the-warming","position":16},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl3":"Fast and slow components of the warming","lvl2":"Results from comprehensive coupled GCMs"},"content":"\n\nThis figure shows how a comprehensive coupled GCM responds to the same kind of idealized CO_2 increase we have looked at above: CO_2 increases at 1%/year for 70 years and is then held constant at twice the pre-industrial level (blue curve), or at 4x the pre-industrial level (red curve) \n\nYoshimori et al., 2016\n\nThe dashed curve show the ocean heat content continuing to rise slowly over thousands of years.\n\n\n\nM. Yoshimori, M. Watanabe, H. Shiogama, A. Oka, A. Abe-Ouchi, R. Ohgaito, and Y. Kamae. A review of progress towards understanding the transient global mean surface temperature response to radiative perturbation. Prog. Earth Planet. Sic., 3, 2016.\n\n","type":"content","url":"/courseware/transient-toy#fast-and-slow-components-of-the-warming","position":17},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl3":"What happens if CO_2 levels are abruptly returned to pre-industrial levels?","lvl2":"Results from comprehensive coupled GCMs"},"type":"lvl3","url":"/courseware/transient-toy#what-happens-if-co-2-levels-are-abruptly-returned-to-pre-industrial-levels","position":18},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl3":"What happens if CO_2 levels are abruptly returned to pre-industrial levels?","lvl2":"Results from comprehensive coupled GCMs"},"content":"\n\nHere, in a different model, we see the surface temperature change through the historical period (black) followed by a typical future global warming scenario (blue).\n\nThe red curves show the effects of suddenly returning greenhouse gases to their preindustrial levels at various times in the future.\n\nThe temperatures very quickly drop, but not back to the preindustrial values. Over time, the build-up of heat content in the deep ocean means that, even if CO_2 levels revert to what they used to be, the climate remain quite a bit warmer for thousands of years.\n\nThis has been referred to as the recalcitrant component of global warming, in analogy with stubborn medical conditions that are difficult to treat \n\nHeld et al., 2010.\n\n\n\nI. M. Held, M. Winton, K. Takahashi, T. Delworth, F. Zeng, and G. K. Vallis. Probing the fast and slow components of global warming by returning abruptly to preindustrial forcing. J. Climate, 23:2418–2427, 2010.\n\n","type":"content","url":"/courseware/transient-toy#what-happens-if-co-2-levels-are-abruptly-returned-to-pre-industrial-levels","position":19},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Credits"},"type":"lvl2","url":"/courseware/transient-toy#credits","position":20},{"hierarchy":{"lvl1":"Toy models of transient warming","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/transient-toy#credits","position":21},{"hierarchy":{"lvl1":"Water, water everywhere!"},"type":"lvl1","url":"/courseware/water-water-everywhere","position":0},{"hierarchy":{"lvl1":"Water, water everywhere!"},"content":"","type":"content","url":"/courseware/water-water-everywhere","position":1},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"A brief look at the effects of evaporation on global climate"},"type":"lvl2","url":"/courseware/water-water-everywhere#a-brief-look-at-the-effects-of-evaporation-on-global-climate","position":2},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"A brief look at the effects of evaporation on global climate"},"content":"This notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/water-water-everywhere#a-brief-look-at-the-effects-of-evaporation-on-global-climate","position":3},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"1. Imagine a world with reduced efficiency of evaporation"},"type":"lvl2","url":"/courseware/water-water-everywhere#id-1-imagine-a-world-with-reduced-efficiency-of-evaporation","position":4},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"1. Imagine a world with reduced efficiency of evaporation"},"content":"\n\nRecall from the lecture on \n\nsurface energy balance that the bulk formula for surface evaporation (latent heat flux) is\\text{LE} = L ~\\rho ~ C_D ~ U \\left( q_s - q_a \\right)\n\nwhich we approximated in terms of temperatures for a wet surface as\\text{LE} \\approx L ~\\rho ~ C_D ~ U \\left( (1-r) ~ q_s^* + r \\frac{\\partial q^*}{\\partial T} \\left( T_s - T_a \\right) \\right)\n\nThe drag coefficient C_D determines the flux for a given set of temperatures, relative humidity, and wind speed.\n\nNow suppose that the drag coefficient is reduced by a factor of two (for evaporation only, not for sensible heat flux). i.e. all else being equal, there will be half as much evaporation.\n\nReasoning through the effects of this perturbation (and calculating the effects in models) will give us some insight into several different roles played by water in the climate system.\n\n","type":"content","url":"/courseware/water-water-everywhere#id-1-imagine-a-world-with-reduced-efficiency-of-evaporation","position":5},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"In-class exercise:","lvl2":"1. Imagine a world with reduced efficiency of evaporation"},"type":"lvl3","url":"/courseware/water-water-everywhere#in-class-exercise","position":6},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"In-class exercise:","lvl2":"1. Imagine a world with reduced efficiency of evaporation"},"content":"What is the effect of the reduced evaporation efficiency on surface temperature?\n\nForm small groups.\n\nEach group should formulate a hypothesis about how and why the surface temperature will change when C_D is reduced by a factor of 2.\n\nDraw a sketch of the surface temperature anomaly as a function of latitude.\n\nBe prepared to explain your sketch and your hypothesis.\n\n","type":"content","url":"/courseware/water-water-everywhere#in-class-exercise","position":7},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"type":"lvl2","url":"/courseware/water-water-everywhere#id-2-reduced-evaporation-experiment-in-a-simple-model-with-climlab","position":8},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"content":"\n\nWe can use climlab to construct a model for the zonal-average climate. The model will be on a pressure-latitude grid. It will include the following processes:\n\nSeasonally varying insolation as function of latitude\n\nRRTMG radiation, including water vapor dependence and prescribed clouds\n\nFixed relative humidity\n\nShortave absorption by ozone\n\nMeridional heat transport, implemented as a horizontal down-gradient temperature diffusion at every vertical level\n\nSensible and Latent heat fluxes at the surface using the bulk formulas\n\nConvective adjustment of the atmospheric lapse rate (not surface)\n\nThis model basically draws together all the process models we have developed throughout the course, and adds the surface flux parameterizations.\n\nNote that since we are using explicit surface flux parameterizations, we will now use the convective adjustment only on the atmospheric air temperatures. Previous our adjustment has also modified the surface temperature, which was implicitly taking account of the turbulent heat fluxes.\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport climlab\nfrom climlab import constants as const\n\ndef inferred_heat_transport( energy_in, lat_deg ):\n    '''Returns the inferred heat transport (in PW) by integrating the net energy imbalance from pole to pole.'''\n    from scipy import integrate\n    from climlab import constants as const\n    lat_rad = np.deg2rad( lat_deg )\n    return ( 1E-15 * 2 * np.pi * const.a**2 * \n            integrate.cumulative_trapezoid( np.cos(lat_rad)*energy_in,\n            x=lat_rad, initial=0. ) )\n\n# A two-dimensional domain\nnum_lev = 50\nstate = climlab.column_state(num_lev=num_lev, num_lat=60, water_depth=10.)\nlev = state.Tatm.domain.axes['lev'].points\n\nHere we specify cloud properties. The combination of the two cloud layers defined below were found to reproduce the global, annual mean energy balance in a single-column model.\n\nWe will specify the same clouds everywhere for simplicity. A more thorough investigation would incorporate some meridional variations in cloud properties.\n\n#  Define two types of cloud, high and low\ncldfrac = np.zeros_like(state.Tatm)\nr_liq = np.zeros_like(state.Tatm)\nr_ice = np.zeros_like(state.Tatm)\nclwp = np.zeros_like(state.Tatm)\nciwp = np.zeros_like(state.Tatm)\n#   indices\nhigh = 10  # corresponds to 210 hPa\nlow = 40   #  corresponds to 810 hPa\n#  A high, thin ice layer (cirrus cloud)\nr_ice[:,high] = 14. # Cloud ice crystal effective radius (microns)\nciwp[:,high] = 10.  # in-cloud ice water path (g/m2)\ncldfrac[:,high] = 0.322\n#  A low, thick, water cloud layer (stratus)\nr_liq[:,low] = 14.  # Cloud water drop effective radius (microns)\nclwp[:,low] = 100.  # in-cloud liquid water path (g/m2)\ncldfrac[:,low] = 0.21\n# wrap everything up in a dictionary\nmycloud = {'cldfrac': cldfrac,\n          'ciwp': ciwp,\n          'clwp': clwp,\n          'r_ice': r_ice,\n          'r_liq': r_liq}\n\nplt.plot(cldfrac[0,:], lev)\nplt.gca().invert_yaxis()\nplt.ylabel('Pressure (hPa)')\nplt.xlabel('Cloud fraction')\nplt.title('Prescribed cloud fraction in the column model')\nplt.show()\n\n#  The top-level model\nmodel = climlab.TimeDependentProcess(state=state, name='Radiative-Convective-Diffusive Model')\n#  Specified relative humidity distribution\nh2o = climlab.radiation.ManabeWaterVapor(state=state)\n#  Hard convective adjustment for ATMOSPHERE ONLY (not surface)\nconv = climlab.convection.ConvectiveAdjustment(state={'Tatm':model.state['Tatm']},\n                                               adj_lapse_rate=6.5,\n                                               **model.param)\n#  Annual mean insolation as a function of latitude and time of year\nsun = climlab.radiation.DailyInsolation(domains=model.Ts.domain)\n#  Couple the radiation to insolation and water vapor processes\nrad = climlab.radiation.RRTMG(state=state, \n                              specific_humidity=h2o.q, \n                              albedo=0.125,\n                              coszen=sun.coszen,\n                              irradiance_factor=sun.irradiance_factor,\n                              **mycloud)\nmodel.add_subprocess('Radiation', rad)\nmodel.add_subprocess('Insolation', sun)\nmodel.add_subprocess('WaterVapor', h2o)\nmodel.add_subprocess('Convection', conv)\n\nprint(model)\n\nHere we add a diffusive heat transport process. The climlab code is set up to handle meridional diffusion level-by-level with a constant coefficient.\n\nfrom climlab.dynamics import MeridionalDiffusion\n\n# thermal diffusivity in W/m**2/degC\nD = 0.04\n# meridional diffusivity in m**2/s\nK = D / model.Tatm.domain.heat_capacity[0] * const.a**2\nd = MeridionalDiffusion(state={'Tatm': model.state['Tatm']}, \n                        K=K, **model.param)\nmodel.add_subprocess('Diffusion', d)\n\nNow we will add the surface heat flux processes. We have not used these before.\n\nNote that the drag coefficient C_D is passed as an input argument when we create the process. It is also stored as an attribute of the process and can be modified (see below).\n\nThe bulk formulas depend on a wind speed U. In this model, U is specified as a constant. In a model with more complete dynamics, U would be interactively calculated from the equations of motion.\n\n#  Add surface heat fluxes\nshf = climlab.surface.SensibleHeatFlux(state=model.state, Cd=0.5E-3)\nlhf = climlab.surface.LatentHeatFlux(state=model.state, Cd=0.5E-3)\n# set the water vapor input field for LHF\nlhf.q = h2o.q\nmodel.add_subprocess('SHF', shf)\nmodel.add_subprocess('LHF', lhf)\n\n","type":"content","url":"/courseware/water-water-everywhere#id-2-reduced-evaporation-experiment-in-a-simple-model-with-climlab","position":9},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"The complete model, ready to use!","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"type":"lvl3","url":"/courseware/water-water-everywhere#the-complete-model-ready-to-use","position":10},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"The complete model, ready to use!","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"content":"\n\nprint( model)\n\nWarning\n\nAlthough this is a “simple” model, it has a 60 x 30 point grid and is by far the most complex model we have built so far in these notes. These runs will probably take several minutes to execute, depending on the speed of your computer.\n\nmodel.integrate_years(4.)\n\n#  One more year to get annual-mean diagnostics\nmodel.integrate_years(1.)\n\nticks = [-90, -60, -30, 0, 30, 60, 90]\nfig, axes = plt.subplots(2,2,figsize=(14,10))\nax = axes[0,0]\nax.plot(model.lat, model.timeave['Ts'])\nax.set_title('Surface temperature (reference)')\nax.set_ylabel('K')\n\nax2 = axes[0,1]\nfield = (model.timeave['Tatm']).transpose()\ncax = ax2.contourf(model.lat, model.lev, field)\nax2.invert_yaxis()\nfig.colorbar(cax, ax=ax2)\nax2.set_title('Atmospheric temperature (reference)');\nax2.set_ylabel('hPa')\n\nax3 = axes[1,0]\nax3.plot(model.lat, model.timeave['LHF'], label='LHF')\nax3.plot(model.lat, model.timeave['SHF'], label='SHF')\nax3.set_title('Surface heat flux (reference)')\nax3.set_ylabel('W/m2')\nax3.legend();\n\nax4 = axes[1,1]\nRtoa = np.squeeze(model.timeave['ASR'] - model.timeave['OLR'])\nax4.plot(model.lat, inferred_heat_transport(Rtoa, model.lat))\nax4.set_title('Meridional heat transport (reference)');\nax4.set_ylabel('PW')\n\nfor ax in axes.flatten():\n    ax.set_xlim(-90,90); ax.set_xticks(ticks)\n    ax.set_xlabel('Latitude'); ax.grid();\n\n","type":"content","url":"/courseware/water-water-everywhere#the-complete-model-ready-to-use","position":11},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Reducing the evaporation efficiency","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"type":"lvl3","url":"/courseware/water-water-everywhere#reducing-the-evaporation-efficiency","position":12},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Reducing the evaporation efficiency","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"content":"Just need to clone our model, and modify C_D in the latent heat flux subprocess.\n\nmodel2 = climlab.process_like(model)\nmodel2.subprocess['LHF'].Cd *= 0.5\nmodel2.integrate_years(4.)\nmodel2.integrate_years(1.)\n\nfig, axes = plt.subplots(2,2,figsize=(14,10))\nax = axes[0,0]\nax.plot(model.lat, model2.timeave['Ts'] - model.timeave['Ts'])\nax.set_title('Surface temperature anomaly')\nax.set_ylabel('K')\n\nax2 = axes[0,1]\nfield = (model2.timeave['Tatm'] - model.timeave['Tatm']).transpose()\ncax = ax2.contourf(model.lat, model.lev, field)\nax2.invert_yaxis()\nfig.colorbar(cax, ax=ax2)\nax2.set_title('Atmospheric temperature anomaly');\nax2.set_ylabel('hPa')\n\nax3 = axes[1,0]\nfor field in ['LHF','SHF']:\n    ax3.plot(model2.lat, model2.timeave[field] - model.timeave[field], label=field)\nax3.set_title('Surface heat flux anomalies')\nax3.set_ylabel('W/m2')\nax3.legend();\n\nax4 = axes[1,1]\nRtoa = np.squeeze(model.timeave['ASR'] - model.timeave['OLR'])\nRtoa2 = np.squeeze(model2.timeave['ASR'] - model2.timeave['OLR'])\nax4.plot(model.lat, inferred_heat_transport(Rtoa2-Rtoa, model.lat))\nax4.set_title('Meridional heat transport anomaly');\nax4.set_ylabel('PW')\n\nfor ax in axes.flatten():\n    ax.set_xlim(-90,90); ax.set_xticks(ticks)\n    ax.set_xlabel('Latitude'); ax.grid();\n    \nprint ('The global mean surface temperature anomaly is %0.2f K.' \n       %np.average(model2.timeave['Ts'] - model.timeave['Ts'], \n                   weights=np.cos(np.deg2rad(model.lat)), axis=0) )\n\nThis model predicts the following:\n\nThe surface temperature warms slightly in the tropics, and cools at high latitudes\n\nThe atmosphere gets colder everywhere!\n\nThere is a substantial reduction in surface latent heat flux, especially in the tropics where it is dominant.\n\nThere is also a substantial increase in sensible heat flux. This is consistent with the cooler air temperatures and warmer surface.\n\nColder tropical atmosphere leads to a decrease in the poleward heat tranpsort. This helps explain the high-latitude cooling.\n\nNotice that the heat transport responds to the atmopsheric temperature gradient, which changes in the opposite direction of the surface temperature gradient.\n\nBasically, this model predicts that by inhibiting evaporation in the tropics, we force the tropical surface to warm and the tropical atmosphere to cool. This cooling signal is then communicated globally by atmospheric heat transport. The result is small positive global surface temperature anomaly.\n\n","type":"content","url":"/courseware/water-water-everywhere#reducing-the-evaporation-efficiency","position":13},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Discussion: what is this model missing?","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"type":"lvl3","url":"/courseware/water-water-everywhere#discussion-what-is-this-model-missing","position":14},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Discussion: what is this model missing?","lvl2":"2. Reduced evaporation experiment in a simple model with climlab"},"content":"\n\nWe could list many things, but as we will see below, two key climate components that are not included in this model are\n\nchanges in relative humidity\n\ncloud feedback\n\nWe will compare this result to an analogous experiment in a GCM.\n\n","type":"content","url":"/courseware/water-water-everywhere#discussion-what-is-this-model-missing","position":15},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl2","url":"/courseware/water-water-everywhere#id-3-reduced-evaporation-efficiency-experiment-in-an-aquaplanet-gcm","position":16},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nThe model is the familiar CESM but in simplified “aquaplanet” setup. The surface is completely covered by a shallow slab ocean.\n\nThis model setup (with CAM4 model physics) is described in detail in \n\nRose et al. (2014) and \n\nRose & Rencurrel (2016).\n\nHere we will compare a control simulation with a perturbation simulation in which we have once again reduced the drag coefficient by a factor of 2.\n\n# Load the climatologies from the CAM4 aquaplanet runs\ndatapath = \"http://thredds.atmos.albany.edu:8080/thredds/dodsC/CESMA/\"\nctrl = xr.open_dataset(datapath + \"QAqu_ctrl/clim/QAqu_ctrl.cam.h0.clim.nc\").mean(dim='time')\nhalfEvap = xr.open_dataset(datapath + \"QAqu_halfEvap_old/clim/QAqu_halfEvap.cam2.h0.clim.nc\").mean(dim='time')\n\nlat = ctrl.lat\nlon = ctrl.lon\nlev = ctrl.lev\n\nTS_anom = halfEvap.TS - ctrl.TS\nTatm_anom = halfEvap['T'] - ctrl['T']\n\n","type":"content","url":"/courseware/water-water-everywhere#id-3-reduced-evaporation-efficiency-experiment-in-an-aquaplanet-gcm","position":17},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Temperature anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl3","url":"/courseware/water-water-everywhere#temperature-anomalies","position":18},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Temperature anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(14,5))\nax1.plot(lat, TS_anom.mean(dim='lon')); ax1.set_title('Surface temperature anomaly')\ncax2 = ax2.contourf(lat, lev, Tatm_anom.mean(dim='lon'), levels=np.arange(-7, 8., 2.), cmap='seismic')\nax2.invert_yaxis(); fig.colorbar(cax2,ax=ax2); ax2.set_title('Atmospheric temperature anomaly');\nfor ax in (ax1, ax2):\n    ax.set_xlim(-90,90); ax.set_xticks(ticks); ax.grid();\n    \nprint ('The global mean surface temperature anomaly is %0.2f K.' %((TS_anom*ctrl.gw).mean(dim=('lat','lon'))/ctrl.gw.mean(dim='lat')))\n\nIn this model, reducing the evaporation efficiency leads to a much warmer climate.  The largest warming occurs in mid-latitudes. The warming is not limited to the surface but in fact extends deeply through the troposphere.\n\nBoth the spatial pattern and the magnitude of the warming are completely different than what our much simpler model predicted.\n\nWhy?\n\n","type":"content","url":"/courseware/water-water-everywhere#temperature-anomalies","position":19},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Compute all the terms in the TOA and surface energy and water budget anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl3","url":"/courseware/water-water-everywhere#compute-all-the-terms-in-the-toa-and-surface-energy-and-water-budget-anomalies","position":20},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Compute all the terms in the TOA and surface energy and water budget anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nenergy_budget = {}\nfor name, run in zip(['ctrl','halfEvap'],[ctrl,halfEvap]):\n    budget = xr.Dataset()\n    # TOA radiation\n    budget['OLR'] = run.FLNT\n    budget['OLR_clr'] = run.FLNTC\n    budget['ASR'] = run.FSNT\n    budget['ASR_clr'] = run.FSNTC\n    budget['Rtoa'] = budget.ASR - budget.OLR  # net downwelling radiation\n    #  surface fluxes  (all positive UP)\n    budget['LHF'] = run.LHFLX\n    budget['SHF'] = run.SHFLX\n    budget['LWsfc'] = run.FLNS\n    budget['LWsfc_clr'] = run.FLNSC\n    budget['SWsfc'] = -run.FSNS\n    budget['SWsfc_clr'] = -run.FSNSC\n    budget['SnowFlux'] = ((run.PRECSC+run.PRECSL)\n                           *const.rho_w*const.Lhfus)\n    # net upward radiation from surface\n    budget['SfcNetRad'] = budget['LWsfc'] + budget['SWsfc']  \n    budget['SfcNetRad_clr'] = budget['LWsfc_clr'] + budget['SWsfc_clr']  \n    # net upward surface heat flux\n    budget['SfcNet'] = (budget['SfcNetRad'] + budget['LHF'] + \n                     budget['SHF'] + budget['SnowFlux'])\n    # net heat flux in to atmosphere\n    budget['Fatmin'] = budget['Rtoa'] + budget['SfcNet']  \n    #  hydrological cycle\n    budget['Evap'] = run['QFLX']  # kg/m2/s or mm/s\n    budget['Precip'] = (run['PRECC']+run['PRECL'][:])*const.rho_w  # kg/m2/s or mm/s\n    budget['EminusP'] = budget.Evap - budget.Precip  # kg/m2/s or mm/s\n    energy_budget[name] = budget\n\n#   Here we take advantage of xarray!\n#   We can simply subtract the two xarray.Dataset objects \n#   to get anomalies for every term\n#   And also take the zonal averages for all anomaly fields in one line of code\nanom = energy_budget['halfEvap'] - energy_budget['ctrl']\nzonanom = anom.mean(dim='lon')\n\n","type":"content","url":"/courseware/water-water-everywhere#compute-all-the-terms-in-the-toa-and-surface-energy-and-water-budget-anomalies","position":21},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Energy budget anomalies at TOA and surface","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl3","url":"/courseware/water-water-everywhere#energy-budget-anomalies-at-toa-and-surface","position":22},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Energy budget anomalies at TOA and surface","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(14,5))\nax1.plot(lat, zonanom.ASR, color='b', label='ASR')\nax1.plot(lat, zonanom.OLR, color='r', label='OLR')\nax1.plot(lat, zonanom.ASR_clr, color='b', linestyle='--')\nax1.plot(lat, zonanom.OLR_clr, color='r', linestyle='--')\nax1.set_title('TOA radiation anomalies')\n    \nax2.plot(lat, zonanom.SWsfc, color='b', label='SW')\nax2.plot(lat, zonanom.SWsfc_clr, color='b', linestyle='--')\nax2.plot(lat, zonanom.LWsfc, color='g', label='LW')\nax2.plot(lat, zonanom.LWsfc_clr, color='g', linestyle='--')\nax2.plot(lat, zonanom.LHF, color='r', label='LHF')\nax2.plot(lat, zonanom.SHF, color='c', label='SHF')\nax2.plot(lat, zonanom.SfcNet, color='m', label='Net')\nax2.set_title('Surface energy budget anomalies')\n\nfor ax in [ax1, ax2]:\n    ax.set_ylabel('W/m2'); ax.set_xlabel('Latitude')\n    ax.set_xlim(-90,90); ax.set_xticks(ticks);\n    ax.legend(); ax.grid();\n\nDashed lines are clear-sky radiation anomalies.\n\nLooking at the TOA budget:\n\nReducing evaporation efficiency leads to very large increase in ASR, especially in mid-latitudes\n\nThis increase is almost entirely due to clouds!\n\nAccompanied by a (mostly) clear-sky OLR increase, consistent with the warmer temperatures.\n\nThis is very suggestive of an important role for low-level cloud changes.  [Why?]\n\nFrom the surface budget:\n\nNotice that the decrease in evaporation is much weaker than we found in the simple model.\n\nHere, the decreased evaporation efficiency is competing against the warmer temperatures which tend to strongly increase evaporation, all else being equal.\n\nThe surface (ocean) gains a lot of excess heat by solar radiation.\n\nAs noted from the TOA budget, this is due to changes in cloudiness.\n\nThe clear-sky SW anomaly is actually positive, consistent with a warmer, moister atmosphere (but this effect is small).\n\nThe LW anomaly is positive, indicating increased radiative cooling of the surface.\n\nThis is also largely a cloud effect, and consistent with a decrease in low-level cloudiness. [Why?]\n\nAs in the simple model, there is an increase in the sensible heat flux (though weaker).\n\nAccording to bulk formula, should be driven by one or both of\n\nincreased wind speed\n\nincreased air-sea temperature difference\n\n","type":"content","url":"/courseware/water-water-everywhere#energy-budget-anomalies-at-toa-and-surface","position":23},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Vertical structure of relative humidity and cloud changes","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl3","url":"/courseware/water-water-everywhere#vertical-structure-of-relative-humidity-and-cloud-changes","position":24},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Vertical structure of relative humidity and cloud changes","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,5))\nRH = (halfEvap.RELHUM - ctrl.RELHUM).mean(dim='lon'); CLOUD = (halfEvap.CLOUD - ctrl.CLOUD).mean(dim='lon')\ncontours = np.arange(-15, 16., 2.)\ncax1 = ax1.contourf(lat, lev, RH, levels=contours, cmap='seismic'); fig.colorbar(cax1, ax=ax1); ax1.set_title('Relative Humidity (%)')\ncax2 = ax2.contourf(lat, lev, 100*CLOUD, levels=contours, cmap='seismic'); ax2.set_title('Cloud fraction (%)')\nfor ax in [ax1, ax2]:\n    ax.invert_yaxis(); ax.set_xlim(-90,90); ax.set_xticks(ticks);\n\n","type":"content","url":"/courseware/water-water-everywhere#vertical-structure-of-relative-humidity-and-cloud-changes","position":25},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Meridional heat transport anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"type":"lvl3","url":"/courseware/water-water-everywhere#meridional-heat-transport-anomalies","position":26},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl3":"Meridional heat transport anomalies","lvl2":"3. Reduced evaporation efficiency experiment in an aquaplanet GCM"},"content":"\n\nHT = {}\nHT['total'] = inferred_heat_transport(anom.Rtoa.mean(dim='lon'), lat)\nHT['atm'] = inferred_heat_transport(anom.Fatmin.mean(dim='lon'), lat)\nHT['latent'] = inferred_heat_transport(anom.EminusP.mean(dim='lon') * const.Lhvap, lat)\nHT['dse'] = HT['atm'] - HT['latent']\n\nfig, ax = plt.subplots()\nax.plot(lat, HT['total'], 'k-', label='total', linewidth=2)\nax.plot(lat, HT['dse'], 'b', label='dry')\nax.plot(lat, HT['latent'], 'r', label='latent')\nax.set_xlim(-90,90); ax.set_xticks(ticks); ax.grid()\nax.legend(loc='upper left'); ax.set_ylabel('PW'); ax.set_xlabel('Latitude')\n\n","type":"content","url":"/courseware/water-water-everywhere#meridional-heat-transport-anomalies","position":27},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"4. Conclusion"},"type":"lvl2","url":"/courseware/water-water-everywhere#id-4-conclusion","position":28},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"4. Conclusion"},"content":"\n\nWe have forced a climate change NOT by adding any kind of radiative forcing, but just by changing the efficiency of evaporation at the sea surface.\n\nThe climate system then find a new equilibrium in which the radiative fluxes, surface temperature, air-sea temperature difference, boundary layer relative humidity, and wind speeds all change simultaneously.\n\nReasoning our way through such a problem from first principles in practically impossible. This is particularly true because in this example, the dominant driver of the climate change is an increase in SW absorption due to a substantial decrease in low-level clouds across the subtropics and mid-latitudes.\n\nA comprehensive theory to explain these cloud changes does not yet exist. Understanding changes in low-level cloudiness under climate change is enormously important -- because these clouds, which have an unambiguous cooling effect, are a key determinant of climate sensitivity. There is lots of work left to do.\n\nWater is intimately involved in just about every aspect of the planetary energy budget. Here we have highlighted the role of water in:\n\nCooling of the surface by evaporation\n\nWater vapor greenhouse effect\n\nPoleward latent heat transport\n\nCloud formation\n\n","type":"content","url":"/courseware/water-water-everywhere#id-4-conclusion","position":29},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"Credits"},"type":"lvl2","url":"/courseware/water-water-everywhere#credits","position":30},{"hierarchy":{"lvl1":"Water, water everywhere!","lvl2":"Credits"},"content":"This notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/water-water-everywhere#credits","position":31},{"hierarchy":{"lvl1":"Modeling the global energy budget"},"type":"lvl1","url":"/courseware/zero-dim-ebm","position":0},{"hierarchy":{"lvl1":"Modeling the global energy budget"},"content":"Introducing the zero-dimensional Energy Balance Model\n\nThis notebook is part of \n\nThe Climate Laboratory by \n\nBrian E. J. Rose, University at Albany.\n\n","type":"content","url":"/courseware/zero-dim-ebm","position":1},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"1. Recap of the global energy budget"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-1-recap-of-the-global-energy-budget","position":2},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"1. Recap of the global energy budget"},"content":"\n\nLet’s look again at the observations \n\nTrenberth & Fasullo, 2012:\n\n\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-1-recap-of-the-global-energy-budget","position":3},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-2-tuning-radiative-fluxes-to-the-observations","position":4},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-2-tuning-radiative-fluxes-to-the-observations","position":5},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Recap of our simple greenhouse model","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl3","url":"/courseware/zero-dim-ebm#recap-of-our-simple-greenhouse-model","position":6},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Recap of our simple greenhouse model","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"Last class we introduced a very simple model for the \n\nOutgoing Longwave Radiation to space:\\text{OLR} = \\tau \\sigma T_s^4\n\nwhere \\tau is the transmissivity of the atmosphere, a number less than 1 that represents the greenhouse effect of Earth’s atmosphere.\n\nWe also tuned this model to the observations by choosing  \\tau \\approx 0.61.\n\nMore precisely:\n\nOLRobserved = 238.5  # in W/m2\nsigma = 5.67E-8  # S-B constant\nTsobserved = 288.  # global average surface temperature\ntau = OLRobserved / sigma / Tsobserved**4  # solve for tuned value of transmissivity\nprint(tau)\n\nLet’s now deal with the shortwave (solar) side of the energy budget.\n\n","type":"content","url":"/courseware/zero-dim-ebm#recap-of-our-simple-greenhouse-model","position":7},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl3","url":"/courseware/zero-dim-ebm#absorbed-shortwave-radiation-asr-and-planetary-albedo","position":8},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"Let’s define a few terms.\n\n","type":"content","url":"/courseware/zero-dim-ebm#absorbed-shortwave-radiation-asr-and-planetary-albedo","position":9},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Global mean insolation","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl4","url":"/courseware/zero-dim-ebm#global-mean-insolation","position":10},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Global mean insolation","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"First let’s define a new term:\n\nInsolation\n\nThe incoming solar (shortwave) radiation at the top of Earth’s atmosphere.\n\nFrom the observations, the global area-averaged \n\nInsolation is 341.3 W m⁻².\n\nLet’s denote this quantity by Q in our equations and Python code:\n\nQ = 341.3  # the insolation\n\n","type":"content","url":"/courseware/zero-dim-ebm#global-mean-insolation","position":11},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Planetary albedo","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl4","url":"/courseware/zero-dim-ebm#planetary-albedo","position":12},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Planetary albedo","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"Some of the incoming radiation is not absorbed at all but simply reflected back to space. Let’s call this quantity F_{reflected}\n\nFrom observations we have:\n\nFreflected = 101.9  #  reflected shortwave flux in W/m2\n\nThe planetary albedo is the fraction of Q that is reflected.\n\nWe will denote the planetary albedo by \\alpha.\n\nFrom the observations:\n\nalpha = Freflected / Q\nprint(alpha)\n\nThat is, about 30% of the incoming radiation is reflected back to space.\n\n","type":"content","url":"/courseware/zero-dim-ebm#planetary-albedo","position":13},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Absorbed Shortwave Radiation","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"type":"lvl4","url":"/courseware/zero-dim-ebm#absorbed-shortwave-radiation","position":14},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl4":"Absorbed Shortwave Radiation","lvl3":"Absorbed Shortwave Radiation (ASR) and Planetary Albedo","lvl2":"2. Tuning radiative fluxes to the observations"},"content":"We’ll now formally define a key term:\n\nAbsorbed Shortwave Radiation\n\nThe part of the \n\nInsolation that is not reflected back to space, i.e. that part that is absorbed somewhere within the Earth system (often abbreviated as ASR).\n\nMathematically we write\\text{ASR} = Q - F_{reflected} = (1-\\alpha) Q\n\nFrom the observations:\n\nASRobserved = Q - Freflected\nprint(ASRobserved)\n\nAs we noted last time, this number is just slightly greater than the observed OLR of 238.5 W m⁻².\n\n","type":"content","url":"/courseware/zero-dim-ebm#absorbed-shortwave-radiation","position":15},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"3. Equilibrium temperature"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-3-equilibrium-temperature","position":16},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"3. Equilibrium temperature"},"content":"\n\nImportant\n\nThis is one of the central concepts in climate modeling.\n\nThe Earth system is in energy balance when energy in = energy out, i.e. when\\text{ASR} = \\text{OLR}\n\nWe want to know:\n\nWhat surface temperature do we need to have this balance?\n\nBy how much would the temperature change in response to other changes in Earth system?\n\nChanges in greenhouse gases\n\nChanges in cloudiness\n\netc.\n\nWith our simple greenhouse model, we can get an exact solution for the equilibrium temperature.\n\nFirst, write down our statement of energy balance:(1-\\alpha) Q = \\tau \\sigma T_s^4\n\nRearrange to solve for T_s:T_s^4 = \\frac{(1-\\alpha) Q}{\\tau \\sigma}\n\nand take the fourth root, denoting our equilibrium temperature as T_{eq}:T_{eq} = \\left( \\frac{(1-\\alpha) Q}{\\tau \\sigma} \\right)^\\frac{1}{4}\n\nPlugging the observed values back in, we compute:\n\n#  define a reusable function!\ndef equilibrium_temperature(alpha,Q,tau):\n    return ((1-alpha)*Q/(tau*sigma))**(1/4)\n\nTeq_observed = equilibrium_temperature(alpha,Q,tau)\nprint(Teq_observed)\n\nAnd this equilibrium temperature is just slightly warmer than 288 K.  Why?\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-3-equilibrium-temperature","position":17},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"4. A climate change scenario"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-4-a-climate-change-scenario","position":18},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"4. A climate change scenario"},"content":"\n\nSuppose that, due to global warming (changes in atmospheric composition and subsequent changes in cloudiness):\n\nThe longwave transmissitivity decreases to \\tau = 0.57\n\nThe planetary albedo increases to \\alpha = 0.32\n\nWhat is the new equilibrium temperature?\n\nFor this very simple model, we can work out the answer exactly:\n\nTeq_new = equilibrium_temperature(0.32,Q,0.57)\n#  an example of formatted print output, limiting to two or one decimal places\nprint('The new equilibrium temperature is {:.2f} K.'.format(Teq_new))\nprint('The equilibrium temperature increased by about {:.1f} K.'.format(Teq_new-Teq_observed))\n\nMost climate models are more complicated mathematically, and solving directly for the equilibrium temperature will not be possible!\n\nInstead, we will be able to use the model to calculate the terms in the energy budget (ASR and OLR).\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-4-a-climate-change-scenario","position":19},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Python exercise","lvl2":"4. A climate change scenario"},"type":"lvl3","url":"/courseware/zero-dim-ebm#python-exercise","position":20},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Python exercise","lvl2":"4. A climate change scenario"},"content":"Write Python functions to calculate ASR and OLR for arbitrary parameter values.\n\nVerify the following:\n\nWith the new parameter values but the old temperature T = 288 K, is ASR greater or lesser than OLR?\n\nIs the Earth gaining or losing energy?\n\nHow does your answer change if T = 295 K (or any other temperature greater than 291 K)?\n\n\n\n","type":"content","url":"/courseware/zero-dim-ebm#python-exercise","position":21},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"5. A time-dependent Energy Balance Model"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-5-a-time-dependent-energy-balance-model","position":22},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"5. A time-dependent Energy Balance Model"},"content":"\n\nThe above exercise shows us that if some properties of the climate system change in such a way that the equilibrium temperature goes up, then the Earth system receives more energy from the sun than it is losing to space. The system is no longer in energy balance.\n\nThe temperature must then increase to get back into balance. The increase will not happen all at once! It will take time for energy to accumulate in the climate system. We want to model this time-dependent adjustment of the system.\n\nIn fact almost all climate models are time-dependent, meaning the model calculates time derivatives (rates of change) of climate variables.\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-5-a-time-dependent-energy-balance-model","position":23},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"An energy balance equation","lvl2":"5. A time-dependent Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#an-energy-balance-equation","position":24},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"An energy balance equation","lvl2":"5. A time-dependent Energy Balance Model"},"content":"We will write the total energy budget of the Earth system as\\begin{align} \n\\frac{dE}{dt} &= \\text{net energy flux in to system} \\\\\n &= \\text{flux in – flux out} \\\\\n &= \\text{ASR} - \\text{OLR}\n\\end{align}\n\nwhere E is the enthalpy or heat content of the total system.\n\nWe will express the budget per unit surface area, so each term above has units W m⁻².\n\nNote: any internal exchanges of energy between different reservoirs (e.g. between ocean, land, ice, atmosphere) do not appear in this budget – because E is the sum of all reservoirs.\n\nAlso note: This is a generically true statement. We have just defined some terms, and made the (very good) assumption that the only significant energy sources are radiative exchanges with space.\n\nThis equation is the starting point for EVERY CLIMATE MODEL.\n\nBut so far, we don’t actually have a MODEL. We just have a statement of a budget. To use this budget to make a model, we need to relate terms in the budget to state variables of the atmosphere-ocean system.\n\nFor now, the state variable we are most interested in is temperature – because it is directly connected to the physics of each term above.\n\n","type":"content","url":"/courseware/zero-dim-ebm#an-energy-balance-equation","position":25},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"An energy balance model","lvl2":"5. A time-dependent Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#an-energy-balance-model","position":26},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"An energy balance model","lvl2":"5. A time-dependent Energy Balance Model"},"content":"If we now suppose thatE = C T_s\n\nwhere T_s is the global mean surface temperature, and C is a constant – the effective heat capacity of the atmosphere- ocean column.\n\nthen our budget equation becomes:\n\nC \\frac{dT_s}{dt} = \\text{ASR} - \\text{OLR}\n\nwhere\n\nC is the heat capacity of Earth system, in units of J m⁻² K⁻¹.\n\n\\frac{dT_s}{dt} is the rate of change of global average surface temperature.\n\nBy adopting this equation, we are assuming that the energy content of the Earth system (atmosphere, ocean, ice, etc.) is proportional to surface temperature.\n\nImportant things to think about:\n\nWhy is this a sensible assumption?\n\nWhat determines the heat capacity C?\n\nWhat are some limitations of this assumption?\n\nFor our purposes here we are going to use a value of C equivalent to heating 100 meters of water:C = c_w \\rho_w H\n\nwhere\n\nc_w = 4 \\times 10^3 J kg⁻¹ K⁻¹ is the specific heat of water,\n\n\\rho_w = 10^3 kg m⁻³ is the density of water, and\n\nH is an effective depth of water that is heated or cooled.\n\nc_w = 4E3  #  Specific heat of water in J/kg/K\nrho_w = 1E3  #  Density of water in kg/m3\nH = 100.   #  Depth of water in m\nC = c_w * rho_w * H   #  Heat capacity of the model \nprint('The effective heat capacity is {:.1e} J m⁻² K⁻¹'.format(C))\n\n","type":"content","url":"/courseware/zero-dim-ebm#an-energy-balance-model","position":27},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Solving the energy balance model","lvl2":"5. A time-dependent Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#solving-the-energy-balance-model","position":28},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Solving the energy balance model","lvl2":"5. A time-dependent Energy Balance Model"},"content":"This is a first-order Ordinary Differential Equation (ODE) for T_s as a function of time. It is also our very first climate model!\n\nTo solve it (i.e. see how T_s evolves from some specified initial condition) we have two choices:\n\nSolve it analytically\n\nSolve it numerically\n\nOption 1 (analytical) will usually not be possible because the equations will typically be too complex and non-linear. This is why computers are our best friends in the world of climate modeling.\n\nHOWEVER it is often useful and instructive to simplify a model down to something that is analytically solvable when possible. Why? Two reasons:\n\nAnalysis will often yield a deeper understanding of the behavior of the system\n\nGives us a benchmark against which to test the results of our numerical solutions.\n\n","type":"content","url":"/courseware/zero-dim-ebm#solving-the-energy-balance-model","position":29},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"6. Representing time derivatives on a computer"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-6-representing-time-derivatives-on-a-computer","position":30},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"6. Representing time derivatives on a computer"},"content":"\n\nRecall that the derivative is the instantaneous rate of change. It is defined as\\frac{dT}{dt} = \\lim_{\\Delta t\\rightarrow 0}⁡ \\frac{\\Delta T}{\\Delta t}\n\nOn the computer there is no such thing as an instantaneous change.\n\nWe are always dealing with discrete quantities.\n\nSo we approximate the derivative with \\Delta T/ \\Delta t.\n\nSo long as we take the time interval \\Delta t small enough, the approximation is valid and useful.\n\n(The meaning of “small enough” varies widely in practice. Let’s not talk about it now)\n\nSo we write our model asC  \\frac{\\Delta T}{\\Delta t} \\approx \\text{ASR} - \\text{OLR}\n\nwhere \\Delta T is the change in temperature predicted by our model over a short time interval \\Delta t.\n\nWe can now use this to make a prediction:\n\nGiven a current temperature T_1 at time t_1, what is the temperature T_2 at a future time t_2?\n\nWe can write\\Delta T = T_2-T_1\\Delta t = t_2-t_1\n\nand so our model saysC  \\frac{T_2-T_1}{\\Delta t} = \\text{ASR} - \\text{OLR}\n\nWhich we can rearrange to solve for the future temperature:T_2 = T_1 + \\frac{\\Delta t}{C} \\left( \\text{ASR} - \\text{OLR}(T_1) \\right)\n\nWe now have a formula with which to make our prediction!\n\nNotice that we have written the OLR as a function of temperature. We will use the current temperature T_1 to compute the OLR, and use that OLR to determine the future temperature.\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-6-representing-time-derivatives-on-a-computer","position":31},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"7. Numerical solution of the Energy Balance Model"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-7-numerical-solution-of-the-energy-balance-model","position":32},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"7. Numerical solution of the Energy Balance Model"},"content":"\n\nThe quantity \\Delta t is called a timestep. It is the smallest time interval represented in our model.\n\nHere we’re going to use a timestep of 1 year:\n\ndt = 60. * 60. * 24. * 365.   # one year expressed in seconds\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-7-numerical-solution-of-the-energy-balance-model","position":33},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Try stepping forward one timestep","lvl2":"7. Numerical solution of the Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#try-stepping-forward-one-timestep","position":34},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Try stepping forward one timestep","lvl2":"7. Numerical solution of the Energy Balance Model"},"content":"\n\n# Try a single timestep, assuming we have working functions for ASR and OLR\nT1 = 288.\nT2 = T1 + dt / C * ( ASR(alpha=0.32) - OLR(T1, tau=0.57) )\nprint(T2)\n\nDid you get a NameError here?\n\nThe code above assumes that we have already defined functions ASR() and OLR(). If you haven’t completed the exercise above, then the code won’t work.\n\nLet’s now define the functions that we were supposed to create above:\n\ndef ASR(Q=Q, alpha=alpha):\n    return (1-alpha)*Q\n\ndef OLR(T, tau=tau):\n    return tau * sigma * T**4\n\nNow we’ll try again...\n\n# Try a single timestep, assuming we have working functions for ASR and OLR\nT1 = 288.\nT2 = T1 + dt / C * ( ASR(alpha=0.32) - OLR(T1, tau=0.57) )\nprint(T2)\n\nWhat happened? Why?\n\nTry another timestep\n\nT1 = T2\nT2 = T1 + dt / C * ( ASR(alpha=0.32) - OLR(T1, tau=0.57) )\nprint(T2)\n\nWarmed up again, but by a smaller amount.\n\nBut this is tedious typing. Time to define a function to make things easier and more reliable:\n\ndef step_forward(T):\n    return T + dt / C * ( ASR(alpha=0.32) - OLR(T, tau=0.57) )\n\nTry it out with an arbitrary temperature:\n\nstep_forward(300.)\n\nNotice that our function calls other functions and variables we have already defined.\n\nPython fact 10\n\nFunctions can access variables and other functions defined outside of the function.\n\nThis is both very useful and occasionally confusing.\n\n","type":"content","url":"/courseware/zero-dim-ebm#try-stepping-forward-one-timestep","position":35},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Automate the timestepping with a loop","lvl2":"7. Numerical solution of the Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#automate-the-timestepping-with-a-loop","position":36},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Automate the timestepping with a loop","lvl2":"7. Numerical solution of the Energy Balance Model"},"content":"Now let’s really harness the power of the computer by making a loop (and storing values in arrays):\n\nimport numpy as np\n\nnumsteps = 20\nTsteps = np.zeros(numsteps+1)\nYears = np.zeros(numsteps+1)\nTsteps[0] = 288. \nfor n in range(numsteps):\n    Years[n+1] = n+1\n    Tsteps[n+1] = step_forward( Tsteps[n] )\nprint(Tsteps)\n\nWhat did we just do?\n\nCreated an array of zeros\n\nset the initial temperature to 288 K\n\nrepeated our time step 20 times.\n\nStored the results of each time step into the array.\n\nPython fact 11\n\nThe for statement executes a statement (or series of statements) a specified number of times (a loop!)\n\nPython fact 12\n\nUse square bracket [ ] to refer to elements of an array or list. Use round parentheses ( ) for function arguments.\n\n","type":"content","url":"/courseware/zero-dim-ebm#automate-the-timestepping-with-a-loop","position":37},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Plotting the result","lvl2":"7. Numerical solution of the Energy Balance Model"},"type":"lvl3","url":"/courseware/zero-dim-ebm#plotting-the-result","position":38},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl3":"Plotting the result","lvl2":"7. Numerical solution of the Energy Balance Model"},"content":"Now let’s draw a picture of our result!\n\n# a special instruction for the Jupyter notebook\n#   Display all plots inline in the notebook\n%matplotlib inline  \n#  import the plotting package\nimport matplotlib.pyplot as plt\n\nplt.plot(Years, Tsteps)\nplt.xlabel('Years')\nplt.ylabel('Global mean temperature (K)');\n\nNote how the temperature adjusts smoothly toward the equilibrium temperature, that is, the temperature at which\nASR = OLR.\n\nIf the planetary energy budget is out of balance, the temperature must change so that the OLR gets closer to the ASR!\n\nThe adjustment is actually an exponential decay process: The rate of adjustment slows as the temperature approaches equilibrium.\n\nThe temperature gets very very close to equilibrium but never reaches it exactly.\n\nPython fact 13\n\nWe can easily make simple graphs with the function plt.plot(x,y), where x and y are arrays of the same size. But we must import it first.\n\nThis is actually not native Python, but uses a graphics library called \n\nmatplotlib. This is the workhorse of scientific plotting in Python, and we will be using it all the time!\n\nJust about all of our notebooks will start with this:import numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n","type":"content","url":"/courseware/zero-dim-ebm#plotting-the-result","position":39},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"8. Summary and take-away messages"},"type":"lvl2","url":"/courseware/zero-dim-ebm#id-8-summary-and-take-away-messages","position":40},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"8. Summary and take-away messages"},"content":"\n\nWe looked at the flows of energy in and out of the Earth system.\n\nThese are determined by radiation at the top of the Earth’s atmosphere.\n\nAny imbalance between \n\nAbsorbed Shortwave Radiation (ASR) and \n\nOutgoing Longwave Radiation (OLR) drives a change in temperature\n\nUsing this idea, we built a climate model!\n\nThis Zero-Dimensional Energy Balance Model solves for the global, annual mean surface temperature T_s\n\nTwo key assumptions:\n\nEnergy content of the Earth system varies proportionally to T_s\n\nThe OLR increases as \\tau \\sigma T_s^4 (our simple greenhouse model)\n\nEarth (or any planet) has a well-defined equilibrium temperature T_{eq} at which ASR = OLR, because of the temperature dependence of the \n\nOutgoing Longwave Radiation.\n\nIf T_s < T_{eq}, the model will warm up.\n\nWe can represent the continous warming process on the computer using discrete timesteps.\n\nWe can plot the result.\n\n","type":"content","url":"/courseware/zero-dim-ebm#id-8-summary-and-take-away-messages","position":41},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"Credits"},"type":"lvl2","url":"/courseware/zero-dim-ebm#credits","position":42},{"hierarchy":{"lvl1":"Modeling the global energy budget","lvl2":"Credits"},"content":"\n\nThis notebook is part of \n\nThe Climate Laboratory, an open-source textbook developed and maintained by \n\nBrian E. J. Rose, University at Albany.\n\nIt is licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0) license.\n\nDevelopment of these notes and the \n\nclimlab software is partially supported by the National Science Foundation under award AGS-1455071 to Brian Rose. Any opinions, findings, conclusions or recommendations expressed here are mine and do not necessarily reflect the views of the National Science Foundation.","type":"content","url":"/courseware/zero-dim-ebm#credits","position":43},{"hierarchy":{"lvl1":"Glossary of terms"},"type":"lvl1","url":"/glossary","position":0},{"hierarchy":{"lvl1":"Glossary of terms"},"content":"Note\n\nThis page is auto-generated using \n\nnew indexing capabilities in the MyST rendering engine. The list will grow over time as I adapt more of the book content to use these features!\n\nTry hovering over each term linked here to see the formal definition where it was first introduced in the book.\n\nA\n\nAbsorbed Shortwave Radiation: \n\nAbsorbed Shortwave Radiation\n\nAtmosphere: \n\nAtmosphere\n\n\n\nB\n\nBiosphere: \n\nBiosphere\n\n\n\nC\n\nClimate System: \n\nClimate System\n\nCryosphere: \n\nCryosphere\n\nclimlab: \n\nclimlab\n\n\n\nE\n\nEnergy Balance Model: \n\nEnergy Balance Model\n\n\n\nG\n\nGlobal Circulation Model: \n\nGlobal Circulation Model\n\n\n\nH\n\nHydrosphere: \n\nHydrosphere\n\n\n\nI\n\nInsolation: \n\nInsolation\n\n\n\nL\n\nLithosphere: \n\nLithosphere\n\n\n\nO\n\nOutgoing Longwave Radiation: \n\nOutgoing Longwave Radiation\n\n","type":"content","url":"/glossary","position":1},{"hierarchy":{"lvl1":"How to use this book"},"type":"lvl1","url":"/how-to","position":0},{"hierarchy":{"lvl1":"How to use this book"},"content":"I wrote this book with a strong emphasis on reproducibility of the content.\nFor example, most of the figures in the notes are generated interactively,\noften using data pulled from public servers. This means that readers are able\nto reproduce all the results and use the code as starting points\nfor their own investigations.\n\nIn some cases the code to produce figures and animations may be hidden by default,\nbut you will always be able to click to reveal the Python code, and/or\nopen the underlying \n\nJupyter notebook with all the details.\n\nThe notes are designed to be fully self-explanatory and readable.\nHowever to get the most of the material, you’ll probably want to\ninteract with the Python code contained in the Jupyter notebooks.\n\nThere are several different ways to do this.","type":"content","url":"/how-to","position":1},{"hierarchy":{"lvl1":"How to use this book","lvl2":"UAlbany users: interact through our dedicated JupyterHub"},"type":"lvl2","url":"/how-to#ualbany-users-interact-through-our-dedicated-jupyterhub","position":2},{"hierarchy":{"lvl1":"How to use this book","lvl2":"UAlbany users: interact through our dedicated JupyterHub"},"content":"This is the preferred route for UAlbany students. Anyone with login credentials\nto our server will have a point-and-click interface to a completely interactive\nversion of the notes, and will be able to save their work and pull in new updates.\n\nHere’s what to do:\n\nNavigate to the desired page of this book.\n\nFind the “Rocket ship” icon at top right. Click on it to reveal a drop-down menu.\n\nIn the URL box, paste in this link to the JupyterHub: \n\nhttps://​lore​.atmos​.albany​.edu:8000\n\nSelect “JupyterHub” as the provider type\n\nClick the “Launch” button\n\nIf prompted to login, use your standard UAlbany netid and password.\n\nThere may be a brief delay while a local copy of the notes is made for you (or updated) on the server. You should then see the notebook open and running live on the JupyterHub.\n\nIMPORTANT you need to manually change the kernel before things will run properly:\n\nFind the Kernel menu\n\nSelect Kernel --> Change kernel --> Python 3 Jan. 2025 Environment\n\nYou should then be able to run all the code without any trouble.\n\nNote\n\nDo this step every time! If you get errors trying to run any import statements, double check that you’re using the Python 3 Jan. 2025 Environment kernel.\n\nUAlbany users, please let me know if things don’t seem to be working correctly.","type":"content","url":"/how-to#ualbany-users-interact-through-our-dedicated-jupyterhub","position":3},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Public users: interact through a cloud-based Binder service"},"type":"lvl2","url":"/how-to#public-users-interact-through-a-cloud-based-binder-service","position":4},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Public users: interact through a cloud-based Binder service"},"content":"This will work well for many of the simple examples,\nbut some of the notes require more computational resources.\nBinder is good for tinkering, but there is no easy way to save your work and come back to it.\n\nTo launch a notebook in Binder, hover over the “Rocket ship” icon at top right and click the Binder button.\n\nThis will take you to an NSF-funded Binder service run by \n\nProject Pythia.","type":"content","url":"/how-to#public-users-interact-through-a-cloud-based-binder-service","position":5},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Google Colab users"},"type":"lvl2","url":"/how-to#google-colab-users","position":6},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Google Colab users"},"content":"Some users have reported success installing and running climlab on Google Colab.\nSee \n\nthese instructions in the climlab docs.\n\nYou would also need to clone the \n\nsource repository for this book on github into your Colab space.\nI’m not using Colab so I don’t have step-by-step instructions for this, but the adventurous user might find this a good option.","type":"content","url":"/how-to#google-colab-users","position":7},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Anyone: run the code in your own Python environment"},"type":"lvl2","url":"/how-to#anyone-run-the-code-in-your-own-python-environment","position":8},{"hierarchy":{"lvl1":"How to use this book","lvl2":"Anyone: run the code in your own Python environment"},"content":"You will need the following:\n\nThe \n\nconda package manager\n\nBasic knowledge of \n\nversion control with git\n\nBasic knowledge of \n\nJupyter notebooks\n\nNote\n\nLooking for a great geoscience-oriented learning resource for all these skills? Check out \n\nPythia Foundations \n\n(Rose et al. 2025)!\n\nThe first step is to clone the \n\nsource repository for this book on github.\n\nOnce you have the source repo, the following commands will create a self-contained\n\n\nconda environment\nwith everything you need to run the notebooks (Mac, Linux and Windows),\nincluding the specialized \n\nclimlab toolkit.\n\nFrom within the ClimateLaboratoryBook directory in your favorite terminal, do this:conda env create --file environment.yml\nconda activate climlab-courseware\n\nThen find all the Jupyter notebook *.ipynb files in ClimateLaboratoryBook/courseware\n\nYou may find it useful to do all your work in a separate git branch,\nand leave your main branch untouched so you can keep it up to date with\nthe source repository.","type":"content","url":"/how-to#anyone-run-the-code-in-your-own-python-environment","position":9},{"hierarchy":{"lvl1":"The Climate Laboratory"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"The Climate Laboratory"},"content":"A hands-on approach to climate physics and climate modeling\n\nBy \n\nBrian E. J. Rose, University at Albany\n\nThis book is powered by \n\nMyST Markdown and \n\nJupyterBook 2,\nand aims to be all of the following:\n\nself-reproducing (most figures are self-generating in the notebooks)\n\nfree and open (permissive license, sources and content available through github)\n\ninteractive (integration with JupyterHub and Binder allows readers to run and modify code examples)\n\na living document (content continues to evolve, and collaboration is welcome)\n\nThe material is mostly based on lecture notes for\n\n\nENV 415: Climate Laboratory and \n\nATM 623: Climate Modeling\nat the \n\nUniversity at Albany.\n\nTo view the book online, go here.\n\nThe JupyterBook source and all book content (mostly \n\nJupyter Notebook files)\nare all in \n\nthis github repository.\n\nMuch of the content is made possible by \n\nclimlab, an open-source\nPython toolkit for interactive, process-oriented climate modeling.\n\n\nBrian Rose is the principle developer of climlab as well as the author of this book.\n\nThe contents of this book are licensed for free and open consumption under the\n\n\nCreative Commons Attribution 4.0 International (CC BY 4.0)\nlicense.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Lectures"},"type":"lvl1","url":"/lectures","position":0},{"hierarchy":{"lvl1":"Lectures"},"content":"Time to start ambling!","type":"content","url":"/lectures","position":1},{"hierarchy":{"lvl1":"Preamble"},"type":"lvl1","url":"/preamble","position":0},{"hierarchy":{"lvl1":"Preamble"},"content":"Dedication\n\nThis book is dedicated to my children, Eleanor and Annabel.\n\nWe navigate this troubled world with minds full of curiosity, reason, and compassion.\n\nLet’s get ready to amble amiably!","type":"content","url":"/preamble","position":1},{"hierarchy":{"lvl1":"References"},"type":"lvl1","url":"/references","position":0},{"hierarchy":{"lvl1":"References"},"content":"Note\n\nThis is a placeholder for a book-wide bibliography that is currently missing. See reference sections at the end of each chapter for full citations. ```{bibliography}\n``` ","type":"content","url":"/references","position":1},{"hierarchy":{"lvl1":"Suggested course sequences"},"type":"lvl1","url":"/sequences","position":0},{"hierarchy":{"lvl1":"Suggested course sequences"},"content":"Note\n\nCurrently under construction!\n\nHere sometime soon you will find suggested sequences for semester-long courses at upper-level undergraduate and graduate level, based on my experiences teaching this material at the University at Albany.","type":"content","url":"/sequences","position":1},{"hierarchy":{"lvl1":"Who is the book for?"},"type":"lvl1","url":"/who-for","position":0},{"hierarchy":{"lvl1":"Who is the book for?"},"content":"This book should be useful for:\n\nUpper-level undergraduate with some (limited) background in atmospheric and climate science\n\nGraduate students and researchers in climate science\n\nAnyone else with some physics or atmospheric science background who is interested!\n\nThe interactive code in the book is all written in Python.\nFamiliarity with the Python language and its scientific packages is useful.\n\n\nPythia Foundations is a great learning resource for getting up to speed on the core scientific Python packages we will need.\nHowever, this book also starts off slow with lots of examples.\nMany students have learned Python by working through a version of this course!","type":"content","url":"/who-for","position":1}]}